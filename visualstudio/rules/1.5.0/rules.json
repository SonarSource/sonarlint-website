{
  "version": "1.5.0",
  "rules": [
    {
      "key": "S3244",
      "title": "Anonymous delegates should not be used to unsubscribe from Events",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S3244",
          "language": "C#",
          "title": "Anonymous delegates should not be used to unsubscribe from Events",
          "description": "<p>\r\n    It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them.\r\n    That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove\r\n    this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries\r\n    to remove a different item from the list than was added. The result: <code>NOOP</code>.\r\n</p>\r\n<p>\r\n    Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nlistView.PreviewTextInput += (obj,args) =>\r\n        listView_PreviewTextInput(obj,args,listView);\r\n\r\n// ...\r\n\r\nlistView.PreviewTextInput -= (obj, args) =>\r\n        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nEventHandler func = (obj,args) => listView_PreviewTextInput(obj,args,listView);\r\n\r\nlistView.PreviewTextInput += func;\r\n\r\n// ...\r\n\r\nlistView.PreviewTextInput -= func;\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S3236",
      "title": "Methods with caller info attributes should not be invoked with explicit arguments",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S3236",
          "language": "C#",
          "title": "Methods with caller info attributes should not be invoked with explicit arguments",
          "description": "<p>\r\n    Caller information attributes (<code>CallerFilePathAttribute</code>, <code>CallerLineNumberAttribute</code>, and\r\n    <code>CallerMemberNameAttribute</code>) provide a way to get information about the caller of a method through optional parameters.\r\n    But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying\r\n    the argument values defeats the purpose of the attributes.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvoid TraceMessage(string message,\r\n  [CallerMemberName] string memberName = \"\",\r\n  [CallerFilePath] string filePath = \"\",\r\n  [CallerLineNumber] int lineNumber = 0)\r\n{\r\n  /* ... */\r\n}\r\n\r\nvoid MyMethod()\r\n{\r\n  TraceMessage(\"my message\", \"MyMethod\"); // Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvoid TraceMessage(string message,\r\n  [CallerMemberName] string memberName = \"\",\r\n  [CallerFilePath] string filePath = \"\",\r\n  [CallerLineNumber] int lineNumber = 0)\r\n{\r\n  /* ... */\r\n}\r\n\r\nvoid MyMethod()\r\n{\r\n  TraceMessage(\"my message\");\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S2330",
      "title": "Array covariance should not be used",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2330",
          "language": "C#",
          "title": "Array covariance should not be used",
          "description": "<p>\r\n    Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to\r\n    <code>B</code>, then the same conversion exists from the array type <code>A[]</code> to <code>B[]</code>.\r\n</p>\r\n<p>\r\n    While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> wherever\r\n    <code>B[]</code> is expected, it must be used with care, since assigning an instance of <code>B</code> into an array of\r\n    <code>A</code> will cause an <code>ArrayTypeMismatchException</code> to be thrown at runtime.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nabstract class Fruit { }\r\nclass Apple : Fruit { }\r\nclass Orange : Fruit { }\r\n\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used\r\n    FillWithOranges(fruits);\r\n  }\r\n\r\n  // Just looking at the code doesn't reveal anything suspicious\r\n  static void FillWithOranges(Fruit[] fruits)\r\n  {\r\n    for (int i = 0; i < fruits.Length; i++)\r\n    {\r\n      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException\r\n    }\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nabstract class Fruit { }\r\nclass Apple : Fruit { }\r\nclass Orange : Fruit { }\r\n\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n    Orange[] fruits = new Orange[1]; // Compliant\r\n    FillWithOranges(fruits);\r\n  }\r\n\r\n  static void FillWithOranges(Orange[] fruits)\r\n  {\r\n    for (int i = 0; i < fruits.Length; i++)\r\n    {\r\n      fruits[i] = new Orange();\r\n    }\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1121",
      "title": "Assignments should not be made from within sub-expressions",
      "tags": [
        "suspicious",
        "cwe",
        "misra"
      ],
      "implementations": [
        {
          "key": "S1121",
          "language": "C#",
          "title": "Assignments should not be made from within sub-expressions",
          "description": "<p>\r\n    Assignments within sub-expressions are hard to spot and therefore make the code less readable.\r\n    It is also a common mistake to write <code>=</code> when <code>==</code> was meant.\r\n    Ideally, expressions should should not have side-effects.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\ndoSomething(i = 42);\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ni = 42;\r\ndoSomething(i);\r\n// or\r\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\nAssignments inside lambda and delegate expressions are allowed.\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\r\n    <li>MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\r\n    <li>MISRA C:2012, 13.4 - The result of an assignment operator should not be used</li>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "suspicious",
            "cwe",
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S2306",
      "title": "\"async\" and \"await\" should not be used as identifiers",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2306",
          "language": "C#",
          "title": "\"async\" and \"await\" should not be used as identifiers",
          "description": "<p>\r\nSince C# 5.0, <code>async</code> and <code>await</code> are contextual keywords.\r\nContextual keywords do have a particular meaning in some contexts, but can still be used as variable names for example.\r\nKeywords, on the other hand, are always reserved, and therefore are not valid variable names.\r\nTo avoid any confusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nint await = 42; // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nint someOtherName = 42;\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1764",
      "title": "Identical expressions should not be used on both sides of a binary operator",
      "tags": [
        "bug",
        "cert"
      ],
      "implementations": [
        {
          "key": "S1764",
          "language": "C#",
          "title": "Identical expressions should not be used on both sides of a binary operator",
          "description": "<p>\r\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\r\n</p>\r\n<p>\r\nThis rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif ( a == a ) // always true\r\n{\r\n  doZ();\r\n}\r\nif ( a != a ) // always false\r\n{\r\n  doY();\r\n}\r\nif ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too\r\n{\r\n  doX();\r\n}\r\nif ( a == b || a == b ) // if the first one is true, the second one is too\r\n{\r\n  doW();\r\n}\r\n\r\nint j = 5 / 5; //always 1\r\nint k = 5 - 5; //always 0\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ndoZ();\r\n\r\nif ( a == b )\r\n{\r\n  doX();\r\n}\r\nif ( a == b )\r\n{\r\n  doW();\r\n}\r\n\r\nint j = 1;\r\nint k = 0;\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\nLeft-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.\r\n<pre>\r\nint i = 1 << 1; // Compliant\r\nint j = a << a; // Noncompliant\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\r\n    <li><a class=\"rule-link\" href=\"#version=1.5.0&ruleId=S1656\">Rule S1656</a> - Implements a check on <code>=</code>.</li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "bug",
            "cert"
          ]
        }
      ]
    },
    {
      "key": "S1940",
      "title": "Boolean checks should not be inverted",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S1940",
          "language": "C#",
          "title": "Boolean checks should not be inverted",
          "description": "<p>\r\n    It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif ( !(a == 2)) { ... }  // Noncompliant\r\nbool b = !(i < 10);  // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (a != 2) { ... }\r\nbool b = (i >= 10);\r\n</pre>\r\n\r\n<h2>Code Fixes</h2><ul><li>Invert \"Boolean\" check</li></ul>",
          "severity": "Minor",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1125",
      "title": "Boolean literals should not be redundant",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S1125",
          "language": "C#",
          "title": "Boolean literals should not be redundant",
          "description": "<p>\r\n    Redundant Boolean literals should be removed from expressions to improve readability.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (booleanVariable == true) { /* ... */ }\r\nif (booleanVariable != true) { /* ... */ }\r\nif (booleanVariable || false) { /* ... */ }\r\ndoSomething(!false);\r\n\r\nbooleanVariable = condition ? true : exp;\r\nbooleanVariable = condition ? false : exp;\r\nbooleanVariable = condition ?  exp : true;\r\nbooleanVariable = condition ?  exp : false;\r\nbooleanVariable = condition ?  true : false;\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (booleanVariable) { /* ... */ }\r\nif (!booleanVariable) { /* ... */ }\r\nif (booleanVariable) { /* ... */ }\r\ndoSomething(true);\r\n\r\nbooleanVariable = condition || exp;\r\nbooleanVariable = !condition && exp;\r\nbooleanVariable = !condition ||  exp;\r\nbooleanVariable = condition && exp;\r\nbooleanVariable = condition;\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove the unnecessary Boolean literal(s)</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1227",
      "title": "break statements should not be used except for switch cases",
      "tags": [],
      "implementations": [
        {
          "key": "S1227",
          "language": "C#",
          "title": "break statements should not be used except for switch cases",
          "description": "<p>\r\n<code>break;</code> is an unstructured control flow statement which makes code harder to read.\r\nIdeally, every loop should have a single termination condition.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n\r\n<pre>\r\nint i = 0;\r\nwhile (true)\r\n{\r\n  if (i == 10)\r\n  {\r\n    break;      // Non-Compliant\r\n  }\r\n\r\n  Console.WriteLine(i);\r\n  i++;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nint i = 0;\r\nwhile (i != 10) // Compliant\r\n{\r\n  Console.WriteLine(i);\r\n  i++;\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": []
        }
      ]
    },
    {
      "key": "S3215",
      "title": "\"interface\" instances should not be cast to concrete types",
      "tags": [
        "design"
      ],
      "implementations": [
        {
          "key": "S3215",
          "language": "C#",
          "title": "\"interface\" instances should not be cast to concrete types",
          "description": "<p>\r\n    Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in\r\n    use, likely that something is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing\r\n    functionality should be added to the <code>interface</code>. Otherwise there is the risk of runtime exceptions.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic interface IMyInterface\r\n{\r\n  void DoStuff();\r\n}\r\n\r\npublic class MyClass1 : IMyInterface\r\n{\r\n  public int Data { get { return new Random().Next(); } }\r\n\r\n  public void DoStuff()\r\n  {\r\n    // TODO...\r\n  }\r\n}\r\n\r\npublic static class DowncastExampleProgram\r\n{\r\n  static void EntryPoint(IMyInterface interfaceRef)\r\n  {\r\n    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant\r\n    int privateData = class1.Data;\r\n\r\n    class1 = interfaceRef as MyClass1;  // Noncompliant\r\n    if (class1 != null)\r\n    {\r\n      // ...\r\n    }\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "design"
          ]
        }
      ]
    },
    {
      "key": "S2486",
      "title": "Exceptions should not be ignored",
      "tags": [
        "cwe",
        "error-handling",
        "security"
      ],
      "implementations": [
        {
          "key": "S2486",
          "language": "C#",
          "title": "Exceptions should not be ignored",
          "description": "<p>\r\nWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nstring text = \"\";\r\ntry\r\n{\r\n  text = File.ReadAllText(fileName);\r\n}\r\ncatch (Exception exc) // Noncompliant\r\n{\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nstring text = \"\";\r\ntry\r\n{\r\n  text = File.ReadAllText(fileName);\r\n}\r\ncatch (Exception exc)\r\n{\r\n  logger.Log(exc);\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "cwe",
            "error-handling",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2737",
      "title": "\"catch\" clauses should do more than rethrow",
      "tags": [
        "clumsy",
        "unused"
      ],
      "implementations": [
        {
          "key": "S2737",
          "language": "C#",
          "title": "\"catch\" clauses should do more than rethrow",
          "description": "<p>\r\nA <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads.\r\nSuch clauses should either be eliminated or populated with the appropriate logic.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nstring s = \"\";\r\ntry\r\n{\r\n  s = File.ReadAllText(fileName);\r\n}\r\ncatch (Exception e) // Noncompliant\r\n{\r\n  throw;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nstring s = \"\";\r\ntry\r\n{\r\n  s = File.ReadAllText(fileName);\r\n}\r\ncatch (Exception e)\r\n{\r\n  logger.LogError(e);\r\n  throw;\r\n}\r\n</pre>\r\nor\r\n<pre>\r\nstring s = File.ReadAllText(fileName);\r\n</pre><h2>Code Fixes</h2><ul><li>Remove redundant catch</li></ul>",
          "severity": "Major",
          "tags": [
            "clumsy",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S101",
      "title": "Class names should comply with a naming convention",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S101",
          "language": "C#",
          "title": "Class names should comply with a naming convention",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the class names against.</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^([A-HJ-Z][a-zA-Z0-9]+|I[a-z0-9][a-zA-Z0-9]*)$</span></dd></dl><p>\r\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\r\nThis rule allows to check that all class names match a provided regular expression.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<p>With default provided regular expression <code>^([A-HJ-Z][a-zA-Z0-9]+|I[a-z0-9][a-zA-Z0-9]*)$</code>:</p>\r\n<pre>\r\n    class my_class {...}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\n    class MyClass {...}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S1694",
      "title": "An abstract class should have both abstract and concrete methods",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S1694",
          "language": "C#",
          "title": "An abstract class should have both abstract and concrete methods",
          "description": "<p>\r\n    The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be\r\n    implemented by sub-classes.\r\n</p>\r\n<p>\r\n    A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a\r\n    concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.\r\n</p>\r\n<p>\r\n    A class with only abstract methods and no inheritable behavior should be converted to an interface.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic abstract class Animal //Noncompliant; should be an interface\r\n{\r\n  abstract void Move();\r\n  abstract void Feed();\r\n}\r\n\r\npublic abstract class Color //Noncompliant; should be concrete with a private constructor\r\n{\r\n  private int red = 0;\r\n  private int green = 0;\r\n  private int blue = 0;\r\n\r\n  public int GetRed()\r\n  {\r\n    return red;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic interface Animal\r\n{\r\n  void Move();\r\n  void Feed();\r\n}\r\n\r\npublic class Color\r\n{\r\n  private int red = 0;\r\n  private int green = 0;\r\n  private int blue = 0;\r\n\r\n  private Color()\r\n  {}\r\n\r\n  public int GetRed()\r\n  {\r\n    return red;\r\n  }\r\n}\r\n\r\npublic abstract class Lamp\r\n{\r\n  private bool switchLamp = false;\r\n\r\n  public abstract void Glow();\r\n\r\n  public void FlipSwitch()\r\n  {\r\n    switchLamp = !switchLamp;\r\n    if (switchLamp)\r\n    {\r\n      Glow();\r\n    }\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S1118",
      "title": "Utility classes should not have public constructors",
      "tags": [
        "design"
      ],
      "implementations": [
        {
          "key": "S1118",
          "language": "C#",
          "title": "Utility classes should not have public constructors",
          "description": "<p>\r\n    Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even\r\n    <code>abstract</code> utility classes, which can be extended, should not have <code>public</code> constructors.\r\n</p>\r\n<p>\r\n    C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at\r\n    least one <code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the\r\n    <code>static</code> keyword should be added to the class declaration to prevent subclassing.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class StringUtils // Noncompliant\r\n{\r\n  public static string Concatenate(string s1, string s2)\r\n  {\r\n    return s1 + s2;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic static class StringUtils\r\n{\r\n  public static string Concatenate(string s1, string s2)\r\n  {\r\n    return s1 + s2;\r\n  }\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class StringUtils\r\n{\r\n  protected StringUtils()\r\n  {\r\n  }\r\n  public static string Concatenate(string s1, string s2)\r\n  {\r\n    return s1 + s2;\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "design"
          ]
        }
      ]
    },
    {
      "key": "S1155",
      "title": "\"Any()\" should be used to test for emptiness",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S1155",
          "language": "C#",
          "title": "\"Any()\" should be used to test for emptiness",
          "description": "<p>\r\n    Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer,\r\n    and the code more readable.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\r\n{\r\n  return strings.Count() > 0; // Noncompliant\r\n}\r\nprivate static bool HasContent2(IEnumerable&lt;string&gt; strings)\r\n{\r\n  return strings.Count() >= 1; // Noncompliant\r\n}\r\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\r\n{\r\n  return strings.Count() == 0; // Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\r\n{\r\n  return strings.Any();\r\n}\r\n\r\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\r\n{\r\n  return !strings.Any();\r\n}\r\n</pre>",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S2971",
      "title": "\"IEnumerable\" LINQs should be simplified",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2971",
          "language": "C#",
          "title": "\"IEnumerable\" LINQs should be simplified",
          "description": "<p>\r\n    In the interests of readability, code that can be simplified should be simplified. To that end, there are several\r\n    ways <code>IEnumerable LINQ</code>s can be simplified\r\n</p>\r\n<ul>\r\n    <li>Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then\r\n    null-checking in a query expression to choose elements based on type.</li>\r\n    <li>Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast\r\n    in a <code>Select</code></li>\r\n    <li>Use an expression in <code>Any</code> instead of <code>Where(element => [expression]).Any()</code>.</li>\r\n</ul>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nseq1.Select(element => element as T).Any(element => element != null);  // Noncompliant; use OfType\r\nseq2.Select(element => element as T).Any(element => element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType\r\nseq3.Where(element => element is T).Select(element => element as T); // Noncompliant; use OfType\r\nseq4.Where(element => element is T).Select(element => (T)element); // Noncompliant; use OfType\r\nseq.Where(element => [expression]).Any();  // Noncompliant; use Any([expression])\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nseq1.OfType&lt;T&gt;().Any();\r\nseq2.OfType&lt;T&gt;().Any(element => CheckCondition(element));\r\nseq3.OfType&lt;T&gt;();\r\nseq4.OfType&lt;T&gt;();\r\nseq.Any(element => [expression])\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S125",
      "title": "Sections of code should not be \"commented out\"",
      "tags": [
        "misra",
        "unused"
      ],
      "implementations": [
        {
          "key": "S125",
          "language": "C#",
          "title": "Sections of code should not be \"commented out\"",
          "description": "<p>\r\n    Programmers should not comment out code as it bloats programs and reduces readability.\r\n    Unused code should be deleted and can be retrieved from source control history if required.\r\n</p>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\r\n    <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\r\n    <li>MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.</li>\r\n    <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "misra",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S124",
      "title": "Comments matching a regular expression should be handled",
      "tags": [],
      "implementations": [
        {
          "key": "S124",
          "language": "C#",
          "title": "Comments matching a regular expression should be handled",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">regularExpression</dt><dd><span class=\"param-description\">The regular expression</span><span class=\"param-type\">STRING</span><span class=\"param-default\"></span></dd><dt class=\"param-key\">message</dt><dd><span class=\"param-description\">The issue message</span><span class=\"param-type\">STRING</span><span class=\"param-default\">The regular expression matches this comment.</span></dd></dl><p>\r\n    This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.\r\n    For example, one can create a rule with the regular expression <code>.*TODO.*</code> to match all comment\r\n    containing \"TODO\".\r\n</p>\r\n\r\n<p>\r\n    Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier can be prepended to the\r\n    expression, as in <code>(?i).*TODO.*</code>.\r\n</p>\r\n",
          "severity": "Major",
          "tags": []
        }
      ]
    },
    {
      "key": "S3240",
      "title": "The simplest possible condition syntax should be used",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S3240",
          "language": "C#",
          "title": "The simplest possible condition syntax should be used",
          "description": "<p>\r\n    In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means using\r\n    the <code>??</code> operator for an assign-if-not-null operator, and using the ternary operator <code>?:</code> for\r\n    assignment to a single variable.\r\n</p>\r\n\r\n<h2>Noncompliant Code Sample</h2>\r\n<pre>\r\nobject a = null, b = null, x;\r\n\r\nif (a != null) // Noncompliant; needlessly verbose\r\n{\r\n  x = a;\r\n}\r\nelse\r\n{\r\n  x = b;\r\n}\r\n\r\nx = a != null ? a : b; // Noncompliant; better but could still be simplified\r\n\r\nx = (a == null) ? new object() : a; // Noncompliant\r\n\r\nif (condition) // Noncompliant\r\n{\r\n  x = a;\r\n}\r\nelse\r\n{\r\n  x = b;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nobject x;\r\n\r\nx = a ?? b;\r\nx = a ?? b;\r\nx = a ?? new object();\r\nx = condition ? a : b;\r\n</pre><h2>Code Fixes</h2><ul><li>Simplify condition</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1862",
      "title": "Related \"if/else if\" statements should not have the same condition",
      "tags": [
        "bug",
        "cert",
        "pitfall",
        "unused"
      ],
      "implementations": [
        {
          "key": "S1862",
          "language": "C#",
          "title": "Related \"if/else if\" statements should not have the same condition",
          "description": "<p>\r\nA chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.\r\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce\r\nfurther bugs as the code is maintained, and obviously it could lead to unexpected behavior.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (param == 1)\r\n  openWindow();\r\nelse if (param == 2)\r\n  closeWindow();\r\nelse if (param == 1)  // Noncompliant\r\n  moveWindowToTheBackground();\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (param == 1)\r\n  openWindow();\r\nelse if (param == 2)\r\n  closeWindow();\r\nelse if (param == 3)\r\n  moveWindowToTheBackground();\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\r\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "bug",
            "cert",
            "pitfall",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S1871",
      "title": "Two branches in the same conditional structure should not have exactly the same implementation",
      "tags": [
        "design",
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S1871",
          "language": "C#",
          "title": "Two branches in the same conditional structure should not have exactly the same implementation",
          "description": "<p>\r\n    Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure\r\n    with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for\r\n    both instances, then in an <code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall\r\n    through to the other.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nswitch (i)\r\n{\r\n  case 1:\r\n    doSomething();\r\n    break;\r\n  case 2:\r\n    doSomethingDifferent();\r\n    break;\r\n  case 3:  // Noncompliant; duplicates case 1's implementation\r\n    doSomething();\r\n    break;\r\n  default:\r\n    doTheRest();\r\n}\r\n\r\nif (a >= 0 &amp;&amp; a < 10)\r\n{\r\n  doTheThing();\r\n}\r\nelse if (a >= 10 &amp;&amp; a < 20)\r\n{\r\n  doTheOtherThing();\r\n}\r\nelse if (a >= 20 &amp;&amp; a < 50)\r\n{\r\n  doTheThing();  // Noncompliant; duplicates first condition\r\n}\r\nelse\r\n{\r\n  doTheRest();\r\n}\r\n\r\nif (b == 0)\r\n{\r\n  doOneMoreThing();\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nswitch (i) {\r\n  case 1:\r\n  case 3:\r\n    doSomething();\r\n    break;\r\n  case 2:\r\n    doSomethingDifferent();\r\n    break;\r\n  default:\r\n    doTheRest();\r\n}\r\n\r\nif ((a >= 0 &amp;&amp; a < 10) || (a >= 20 &amp;&amp; a < 50))\r\n{\r\n  doTheThing();\r\n}\r\nelse if (a >= 10 &amp;&amp; a < 20)\r\n{\r\n  doTheOtherThing();\r\n}\r\nelse\r\n{\r\n  doTheRest();\r\n}\r\n\r\ndoOneMoreThing();\r\n</pre>\r\nor\r\n<pre>\r\nswitch (i)\r\n{\r\n  case 1:\r\n    doSomething();\r\n    break;\r\n  case 2:\r\n    doSomethingDifferent();\r\n    break;\r\n  case 3:\r\n    doThirdThing();\r\n    break;\r\n  default:\r\n    doTheRest();\r\n}\r\n\r\nif (a >= 0 &amp;&amp; a < 10)\r\n{\r\n  doTheThing();\r\n}\r\nelse if (a >= 10 &amp;&amp; a < 20)\r\n{\r\n  doTheOtherThing();\r\n}\r\nelse if (a >= 20 &amp;&amp; a < 50)\r\n{\r\n  doTheThirdThing();\r\n}\r\nelse\r\n{\r\n  doTheRest();\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "design",
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S2760",
      "title": "Sequential tests should not check the same condition",
      "tags": [
        "clumsy",
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S2760",
          "language": "C#",
          "title": "Sequential tests should not check the same condition",
          "description": "<p>\r\n    When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition\r\n    should have been checked in the second test.\r\n</p>\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (a == b)\r\n{\r\n  doTheThing(b);\r\n}\r\nif (a == b) // Noncompliant; is this really what was intended?\r\n{\r\n  doTheThing(c);\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (a == b)\r\n{\r\n  doTheThing(b);\r\n  doTheThing(c);\r\n}\r\n</pre>\r\n\r\nor\r\n\r\n<pre>\r\nif (a == b)\r\n{\r\n  doTheThing(b);\r\n}\r\nif (b == c)\r\n{\r\n  doTheThing(c);\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.\r\n</p>",
          "severity": "Major",
          "tags": [
            "clumsy",
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S2228",
      "title": "Console logging should not be used",
      "tags": [
        "security",
        "owasp-a6"
      ],
      "implementations": [
        {
          "key": "S2228",
          "language": "C#",
          "title": "Console logging should not be used",
          "description": "<p>\r\n    Debug statements are always useful during development. But include them in production code - particularly\r\n    in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nprivate void DoSomething ()\r\n{\r\n  // ...\r\n  Console.WriteLine (\"so far, so good...\"); // Noncompliant\r\n  // ...\r\n}\r\n</pre>\r\n\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "security",
            "owasp-a6"
          ]
        }
      ]
    },
    {
      "key": "S1699",
      "title": "Constructors should only call non-overridable methods",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S1699",
          "language": "C#",
          "title": "Constructors should only call non-overridable methods",
          "description": "<p>\r\n    Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.\r\n</p>\r\n<p>\r\n    For example:\r\n</p>\r\n<ul>\r\n    <li>The subclass class constructor starts by calling the parent class constructor.</li>\r\n    <li>The parent class constructor calls the method, which has been overridden in the child class.</li>\r\n    <li>\r\n        If the behavior of the child class method depends on fields that are initialized in the child class constructor,\r\n        unexpected behavior (like a <code>NullReferenceException</code>) can result, because the fields aren't initialized yet.\r\n    </li>\r\n</ul>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Parent\r\n{\r\n  public Parent()\r\n  {\r\n    DoSomething();  // Noncompliant\r\n  }\r\n\r\n  public virtual void DoSomething() // can be overridden\r\n  {\r\n    ...\r\n  }\r\n}\r\n\r\npublic class Child : Parent\r\n{\r\n  private string foo;\r\n\r\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\r\n  {\r\n    this.foo = foo;\r\n  }\r\n\r\n  public override void DoSomething()\r\n  {\r\n    Console.WriteLine(this.foo.Length);\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1854",
      "title": "Dead stores should be removed",
      "tags": [
        "suspicious",
        "cert",
        "cwe",
        "unused"
      ],
      "implementations": [
        {
          "key": "S1854",
          "language": "C#",
          "title": "Dead stores should be removed",
          "description": "<p>\r\n    A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction.\r\n    Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in\r\n    the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvoid calculateRate(int a, int b)\r\n{\r\n  int i;\r\n\r\n  i = a + b; // Noncompliant; calculation result not used before value is overwritten\r\n  i = doSomething();  // Noncompliant; retrieved value not used\r\n  for (i = 0; i &lt; 10; i++)\r\n  {\r\n    //  ...\r\n  }\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvoid calculateRate(int a, int b)\r\n{\r\n  int i;\r\n\r\n  i = doSomething();\r\n  i += a + b;\r\n  storeI(i)\r\n\r\n  for (i = 0; i &lt; 10; i++)\r\n  {\r\n    //  ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C</a> - Detect and remove unused values</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "suspicious",
            "cert",
            "cwe",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S3253",
      "title": "\"base()\" constructor calls should not be explicitly made",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S3253",
          "language": "C#",
          "title": "\"base()\" constructor calls should not be explicitly made",
          "description": "<p>\r\n    Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Doing so just clutters the code.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass X\r\n{\r\n  public X()\r\n  {\r\n    /* ... */\r\n  }\r\n}\r\n\r\nclass Y : X\r\n{\r\n  public Y(int parameter) : base() // Noncompliant\r\n  {\r\n    /* does something with the parameter */\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass X\r\n{\r\n  public X()\r\n  {\r\n    /* ... */\r\n  }\r\n}\r\n\r\nclass Y : X\r\n{\r\n  public Y(int parameter)\r\n  {\r\n    /* does something with the parameter */\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant \"base()\" call</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S3172",
      "title": "Delegates should not be subtracted",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S3172",
          "language": "C#",
          "title": "Delegates should not be subtracted",
          "description": "<p>\r\n    In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.\r\n</p>\r\n<p>\r\n    Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nMyDelegate first, second, third, fourth;\r\nfirst = () => Console.Write(\"1\");\r\nsecond = () => Console.Write(\"2\");\r\nthird = () => Console.Write(\"3\");\r\nfourth = () => Console.Write(\"4\");\r\n\r\nMyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = \"1234\"\r\nMyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = \"12\"\r\n\r\n// The chain sequence of \"chain23\" will be \"1234\" instead of \"23\"!\r\n// Indeed, the sequence \"1234\" does not contain the subsequence \"14\", so nothing is subtracted\r\n// (but note that \"1234\" contains both the \"1\" and \"4\" subsequences)\r\nMyDelegate chain23 = chain1234 - (first + fourth); // Noncompliant\r\n\r\nchain23(); // will print \"1234\"!\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nMyDelegate chain23 = chain1234 - first - fourth; // Compliant - \"1\" is first removed, followed by \"4\"\r\n\r\nchain23(); // will print \"23\"\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2931",
      "title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
      "tags": [
        "bug",
        "cwe",
        "denial-of-service",
        "security"
      ],
      "implementations": [
        {
          "key": "S2931",
          "language": "C#",
          "title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
          "description": "<p>\r\n    Classes with <code>IDisposable</code> members are responsible for cleaning up those members by calling\r\n    their <code>Dispose</code> methods. The best practice here is for the owning class to itself implement\r\n    <code>IDisposable</code> and call its members' <code>Dispose</code> methods from its own\r\n    <code>Dispose</code> method.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class ResourceHolder   // Noncompliant; doesn't implement IDisposable\r\n{\r\n  private FileStream fs;  // This member is never Dispose'd\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class ResourceHolder : IDisposable\r\n{\r\n  private FileStream fs;\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n  public void Dispose()\r\n  {\r\n    this.fs.Dispose();\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup</li>\r\n</ul>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "cwe",
            "denial-of-service",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2930",
      "title": "\"IDisposables\" should be disposed",
      "tags": [
        "bug",
        "cwe",
        "denial-of-service",
        "security"
      ],
      "implementations": [
        {
          "key": "S2930",
          "language": "C#",
          "title": "\"IDisposables\" should be disposed",
          "description": "<p>\r\n    You can't rely on garbage collection to clean up everything. Specifically, you can't count on\r\n    it to release non-memory resources such as <code>File</code>s. For that, there's the <code>IDisposable</code>\r\n    interface, and the contract that <code>Dispose</code> will always be called on such objects.\r\n</p>\r\n<p>\r\n    When an <code>IDisposable</code> is a class member, then it's up to that class to call <code>Dispose</code>\r\n    on it, ideally in its own <code>Dispose</code> method. If it's a local variable, then it should be instantiated\r\n    with a <code>using</code> clause to prompt automatic cleanup when it goes out of scope.\r\n</p>\r\n<p>\r\n    This rule raises issues on members that are never <code>Dispose</code>d.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class ResourceHolder\r\n{\r\n  private FileStream fs;  // Noncompliant; Dispose is never called\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n  public void WriteToFile(string path, string text)\r\n  {\r\n    var fs = new FileStream(path, FileMode.Open);  // Noncompliant\r\n    var bytes = Encoding.UTF8.GetBytes(text);\r\n    fs.Write(bytes, 0, bytes.Length);\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class ResourceHolder : IDisposable\r\n{\r\n  private FileStream fs;\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n\r\n  public void Dispose()\r\n  {\r\n    this.fs.Dispose();\r\n  }\r\n\r\n  public void WriteToFile(string path, string text)\r\n  {\r\n    using (var fs = new FileStream(path, FileMode.Open))\r\n    {\r\n      var bytes = Encoding.UTF8.GetBytes(text);\r\n      fs.Write(bytes, 0, bytes.Length);\r\n    }\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\nLocal <code>IDisposable</code>s returned from methods are ignored, as are local <code>IDisposable</code>s that are\r\ninitialized with non-local <code>IDisposable</code>s.\r\n<pre>\r\n  public Stream WriteToFile(string path, string text)\r\n  {\r\n    var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned\r\n    var bytes = Encoding.UTF8.GetBytes(text);\r\n    fs.Write(bytes, 0, bytes.Length);\r\n    return fs;\r\n  }\r\n\r\n  public void ReadFromStream(Stream s)\r\n  {\r\n    var sr = new StreamReader(s); // Compliant as it would close the underlying stream.\r\n    // ...\r\n  }\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup</li>\r\n</ul>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "cwe",
            "denial-of-service",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2997",
      "title": "\"IDisposables\" created in a \"using\" statement should not be returned",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2997",
          "language": "C#",
          "title": "\"IDisposables\" created in a \"using\" statement should not be returned",
          "description": "<p>\r\n    Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger\r\n    disposal of the object when control passes out of the block's scope. The exception to this rule is when your\r\n    method returns that <code>IDisposable</code>. In that case <code>using</code> disposes of the object before the\r\n    caller can make use of it, likely causing exceptions at runtime. So you should either remove <code>using</code> or\r\n    avoid returning the <code>IDisposable</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic FileStream WriteToFile(string path, string text)\r\n{\r\n  using (var fs = File.Create(path)) // Noncompliant\r\n  {\r\n    var bytes = Encoding.UTF8.GetBytes(text);\r\n    fs.Write(bytes, 0, bytes.Length);\r\n    return fs;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic FileStream WriteToFile(string path, string text)\r\n{\r\n  var fs = File.Create(path);\r\n  var bytes = Encoding.UTF8.GetBytes(text);\r\n  fs.Write(bytes, 0, bytes.Length);\r\n  return fs;\r\n}\r\n</pre>\r\n",
          "severity": "Blocker",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2952",
      "title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
      "tags": [
        "bug",
        "cwe",
        "denial-of-service",
        "security"
      ],
      "implementations": [
        {
          "key": "S2952",
          "language": "C#",
          "title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
          "description": "<p>\r\n    It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the\r\n    contract of <code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some\r\n    other method, and you risk resource leaks.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class ResourceHolder : IDisposable\r\n{\r\n  private FileStream fs;\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n\r\n  public void CleanUp()\r\n  {\r\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method\r\n  }\r\n\r\n  public void Dispose()\r\n  {\r\n    // method added to satisfy demands of interface\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class ResourceHolder : IDisposable\r\n{\r\n  private FileStream fs;\r\n  public void OpenResource(string path)\r\n  {\r\n    this.fs = new FileStream(path, FileMode.Open);\r\n  }\r\n  public void CloseResource()\r\n  {\r\n    this.fs.Close();\r\n  }\r\n\r\n  public void Dispose()\r\n  {\r\n    this.fs.Dispose();\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup</li>\r\n</ul>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "cwe",
            "denial-of-service",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2953",
      "title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2953",
          "language": "C#",
          "title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
          "description": "<p>\r\n    <code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent\r\n    any confusion.\r\n</p>\r\n<p>\r\n    It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and\r\n    likely lead to problems in production.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class GarbageDisposal\r\n{\r\n  private int Dispose()  // Noncompliant\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class GarbageDisposal : IDisposable\r\n{\r\n  public void Dispose()\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class GarbageDisposal\r\n{\r\n  private int Grind()\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.\r\n</p>\r\n<pre>\r\npublic class GarbageDisposal : IDisposable\r\n{\r\n  protected virtual void Dispose(bool disposing)\r\n  {\r\n    //...\r\n  }\r\n  public void Dispose()\r\n  {\r\n    Dispose(true);\r\n    GC.SuppressFinalize(this);\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1186",
      "title": "Methods should not be empty",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S1186",
          "language": "C#",
          "title": "Methods should not be empty",
          "description": "<p>\r\nThere are several reasons for a method not to have a method body:\r\n  <ul>\r\n    <li>It is an unintentional omission, and should be fixed.</li>\r\n    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>\r\n    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\r\n  </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic override void DoSomething()\r\n{\r\n}\r\n\r\npublic override void doSomethingElse()\r\n{\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic override void DoSomething()\r\n{\r\n  // Do nothing because of X and Y.\r\n}\r\n\r\npublic override void doSomethingElse()\r\n{\r\n  throw new NotSupportedException();\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>An abstract class' may have empty methods, in order to provide default implementations for child classes.</p>\r\n<pre>\r\nabstract class Animal\r\n{\r\n  public void Speak()\r\n  {\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Throw NotSupportedException</li><li>Add comment</li></ul>",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S108",
      "title": "Nested blocks of code should not be left empty",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S108",
          "language": "C#",
          "title": "Nested blocks of code should not be left empty",
          "description": "<p>\r\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nfor (int i = 0; i < 42; i++) {}  // Empty on purpose or missing piece of code ?\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    When a block contains a comment, this block is not considered to be empty.\r\n</p>\r\n",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S1116",
      "title": "Empty statements should be removed",
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "implementations": [
        {
          "key": "S1116",
          "language": "C#",
          "title": "Empty statements should be removed",
          "description": "<p>\r\n  Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:\r\n  <ul>\r\n    <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\r\n    <li>There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>\r\n  </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvoid doSomething()\r\n{\r\n  ; // Noncompliant - was used as a kind of TODO marker\r\n}\r\n\r\nvoid doSomethingElse()\r\n{\r\n  Console.WriteLine(\"Hello, world!\");;  // Noncompliant - double ;\r\n  ...\r\n  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\r\n  // have side-effects outside of the loop body\r\n  for (int i = 0; i < 3; Console.WriteLine(i), i++); // Noncompliant\r\n  ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvoid doSomething()\r\n{\r\n}\r\n\r\nvoid doSomethingElse()\r\n{\r\n  Console.WriteLine(\"Hello, world!\");\r\n  ...\r\n  for (int i = 0; i < 3; i++)\r\n  {\r\n    Console.WriteLine(i);\r\n   }\r\n  ...\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>\r\n    <li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\r\n</ul><h2>Code Fixes</h2><ul><li>Remove empty statement</li></ul>",
          "severity": "Minor",
          "tags": [
            "cert",
            "misra",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S2344",
      "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S2344",
          "language": "C#",
          "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
          "description": "<p>\r\n    The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nenum FooFlags // Noncompliant\r\n{\r\n    Foo = 1\r\n    Bar = 2\r\n    Baz = 4\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nenum Foo\r\n{\r\n    Foo = 1\r\n    Bar = 2\r\n    Baz = 4\r\n}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S2344",
          "language": "VB.NET",
          "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
          "description": "<p>\r\n    The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nEnum FooFlags ' Noncompliant\r\n    Foo = 1\r\n    Bar = 2\r\n    Baz = 4\r\nEnd Enum\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nEnum Foo      ' Compliant\r\n    Foo = 1\r\n    Bar = 2\r\n    Baz = 4\r\nEnd Enum\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S1244",
      "title": "Floating point numbers should not be tested for equality",
      "tags": [
        "bug",
        "misra"
      ],
      "implementations": [
        {
          "key": "S1244",
          "language": "C#",
          "title": "Floating point numbers should not be tested for equality",
          "description": "<p>\r\n    Floating point math is imprecise because of the challenges of storing such values in a binary\r\n    representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code>\r\n    through a series of simple mathematical operations and the answer will be different based on\r\n    the order of those operation because of the rounding that takes place at each step.\r\n</p>\r\n<p>\r\n    Even simple floating point assignments are not simple:\r\n</p>\r\n<pre>\r\nfloat f = 0.1f; // 0.100000001490116119384765625\r\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\r\n</pre>\r\n\r\n<p>\r\n    (Results will vary based on compiler and compiler settings)\r\n</p>\r\n<p>\r\n    Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on\r\n    <code>float</code> or <code>double</code> values is almost always an error.\r\n</p>\r\n<p>\r\n    This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.\r\n</p>\r\n\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nfloat myNumber = 3.146f;\r\nif ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\r\n{\r\n  // ...\r\n}\r\n\r\nif (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test\r\n{\r\n  // ...\r\n}\r\n\r\nif (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test\r\n{\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.</li>\r\n    <li>MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality</li>\r\n</ul>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S2197",
      "title": "Modulus results should not be checked for direct equality",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S2197",
          "language": "C#",
          "title": "Modulus results should not be checked for direct equality",
          "description": "<p>\r\n    When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus\r\n    of a variable for equality with a positive number (or a negative one) could result in unexpected results.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic boo IsOdd(int x)\r\n{\r\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic bool IsOdd(int x)\r\n{\r\n  return x % 2 != 0;\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic bool IsOdd(uint x)\r\n{\r\n  return x % 2 == 1;\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S1067",
      "title": "Expressions should not be too complex",
      "tags": [
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S1067",
          "language": "C#",
          "title": "Expressions should not be too complex",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum number of allowed conditional operators in an expression</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">3</span></dd></dl><p>\r\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.<br/>\r\nA single expression's complexity should not become too high to keep the code readable.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<p>With the default threshold value 3</p>\r\n<pre>\r\nif (((condition1 && condition2) || (condition3 && condition4)) && condition5) { ... }\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif ( (myFirstCondition() || mySecondCondition()) && myLastCondition()) { ... }\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S3052",
      "title": "Fields should not be initialized to default values",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S3052",
          "language": "C#",
          "title": "Fields should not be initialized to default values",
          "description": "<p>\r\n    The compiler automatically initializes class fields to their default values before setting them with any initialization\r\n    values, so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code\r\n    is better code, it's considered poor style to do so.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass X\r\n{\r\n  public int field = 0; // Noncompliant; defaults to 0. Reinitializing incurs minor performance penalty\r\n  public object o = null; //Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass X\r\n{\r\n  public int field;\r\n  public object o;\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<code>const</code> fields are ignored.\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2387",
      "title": "Child class members should not shadow parent class members",
      "tags": [
        "confusing"
      ],
      "implementations": [
        {
          "key": "S2387",
          "language": "C#",
          "title": "Child class members should not shadow parent class members",
          "description": "<p>\r\n    Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy\r\n    and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from\r\n    the name of a parent class only by case.\r\n</p>\r\n<p>\r\n    This rule ignores <code>private</code> parent class members, but in all other such cases, the child class field should\r\n    be renamed.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Fruit\r\n{\r\n  protected Season ripe;\r\n  protected Color flesh;\r\n\r\n  // ...\r\n}\r\n\r\npublic class Raspberry : Fruit\r\n{\r\n  private bool ripe;  // Noncompliant\r\n  private static Color FLESH; // Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Fruit\r\n{\r\n  protected Season ripe;\r\n  protected Color flesh;\r\n\r\n  // ...\r\n}\r\n\r\npublic class Raspberry : Fruit\r\n{\r\n  private bool ripened;\r\n  private static Color FLESH_COLOR;\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "confusing"
          ]
        }
      ]
    },
    {
      "key": "S2933",
      "title": "Fields that are only assigned in the constructor should be \"readonly\"",
      "tags": [
        "confusing"
      ],
      "implementations": [
        {
          "key": "S2933",
          "language": "C#",
          "title": "Fields that are only assigned in the constructor should be \"readonly\"",
          "description": "<p>\r\n    <code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's\r\n    not marked <code>readonly</code> but is only set in the constructor, it could cause confusion about the\r\n    field's intended use. To avoid confusion, such fields should be marked <code>readonly</code> to make their\r\n    intended use explicit, and to prevent future maintainers from inadvertently changing their use.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass Person\r\n{\r\n  int _birthYear;  // Noncompliant\r\n  Person(int birthYear)\r\n  {\r\n    _birthYear = birthYear;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass Person\r\n{\r\n  readonly int _birthYear;\r\n  Person(int birthYear)\r\n  {\r\n    _birthYear = birthYear;\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Add \"readonly\" keyword</li></ul>",
          "severity": "Major",
          "tags": [
            "confusing"
          ]
        }
      ]
    },
    {
      "key": "S2357",
      "title": "Fields should be private",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2357",
          "language": "C#",
          "title": "Fields should be private",
          "description": "<p>\r\n    Fields should not be part of an API, and therefore should always be private. Indeed, they\r\n    cannot be added to an interface for instance, and validation cannot be added later on without\r\n    breaking backward compatiblity. Instead, developers should encapsulate their fields into\r\n    properties. Explicit property getters and setters can be introduced for validation purposes\r\n    or to smooth the transition to a newer system.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Foo\r\n{\r\n  public int MagicNumber = 42;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Foo\r\n{\r\n  public int MagicNumber\r\n  {\r\n    get { return 42; }\r\n  }\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class Foo\r\n{\r\n  private int MagicNumber = 42;\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    <code>static</code> and <code>const</code> fields are ignored.\r\n</p>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        },
        {
          "key": "S2357",
          "language": "VB.NET",
          "title": "Fields should be private",
          "description": "<p>\r\n    Fields should not be part of an API, and therefore should always be private. Indeed, they\r\n    cannot be added to an interface for instance, and validation cannot be added later on without\r\n    breaking backward compatiblity. Instead, developers should encapsulate their fields into\r\n    properties. Explicit property getters and setters can be introduced for validation purposes\r\n    or to smooth the transition to a newer system.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nClass Foo\r\n    Public Foo = 42          ' Non-Compliant\r\nEnd Class\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nClass Foo\r\n    Public Property Foo = 42 ' Compliant\r\nEnd Class\r\n</pre>\r\nor\r\n<pre>\r\npublic class Foo\r\n{\r\n  private int MagicNumber = 42;\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    <code>Shared </code> and <code>Const</code> fields are ignored.\r\n</p>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S104",
      "title": "Files should not have too many lines",
      "tags": [
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S104",
          "language": "C#",
          "title": "Files should not have too many lines",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFileLocThreshold</dt><dd><span class=\"param-description\">Maximum authorized lines in a file.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">1000</span></dd></dl><p>\r\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\r\nAbove a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.\r\nThose smaller files will not only be easier to understand but also probably easier to test.\r\n</p>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S2345",
      "title": "Flags enumerations should explicitly initialize all their members",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2345",
          "language": "C#",
          "title": "Flags enumerations should explicitly initialize all their members",
          "description": "<p>\r\n    Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization\r\n    will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does\r\n    not allow members to be combined using the bitwise or operator.\r\n</p>\r\n<p>\r\n    Instead, powers of two, i.e. 1, 2, 4, 8, 16, etc. should be used to explicitly initialize all the members.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n[Flags]\r\nenum FruitType    // Non-Compliant\r\n{\r\n    Banana,\r\n    Orange,\r\n    Strawberry\r\n}\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\r\n        // Will display only Strawberry!\r\n        Console.WriteLine(bananaAndStrawberry.ToString());\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\n[Flags]\r\nenum FruitType    // Non-Compliant\r\n{\r\n    Banana = 1,\r\n    Orange = 2,\r\n    Strawberry = 4\r\n}\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\r\n        // Will display Banana and Strawberry, as expected.\r\n        Console.WriteLine(bananaAndStrawberry.ToString());\r\n    }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        },
        {
          "key": "S2345",
          "language": "VB.NET",
          "title": "Flags enumerations should explicitly initialize all their members",
          "description": "<p>\r\n    Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization\r\n    will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does\r\n    not allow members to be combined using the bitwise or operator.\r\n</p>\r\n<p>\r\n    Instead, powers of two, i.e. 1, 2, 4, 8, 16, etc. should be used to explicitly initialize all the members.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n&lt;Flags()&gt;\r\nEnum FruitType    ' Non-Compliant\r\n    Banana\r\n    Orange\r\n    Strawberry\r\nEnd Enum\r\n\r\nModule Module1\r\n    Sub Main()\r\n        Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\r\n\r\n        ' Will display only Strawberry!\r\n        Console.WriteLine(bananaAndStrawberry.ToString())\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\n&lt;Flags()&gt;\r\nEnum FruitType    ' Compliant\r\n    Banana = 1\r\n    Orange = 2\r\n    Strawberry = 4\r\nEnd Enum\r\n\r\nModule Module1\r\n    Sub Main()\r\n        Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\r\n\r\n        ' Will display Banana and Strawberry, as expected.\r\n        Console.WriteLine(bananaAndStrawberry.ToString())\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2346",
      "title": "Flags enumerations zero-value members should be named \"None\"",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S2346",
          "language": "C#",
          "title": "Flags enumerations zero-value members should be named \"None\"",
          "description": "<p>\r\n    Consisitent use of \"None\" in flags enumerations indicates that all flag values are cleared.\r\n    The value 0 should not be used to indicate any other state, since there is no way to check that the bit <code>0</code> is set.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n[Flags]\r\nenum FruitType\r\n{\r\n    Void = 0,       // Non-Compliant\r\n    Banana = 1,\r\n    Orange = 2,\r\n    Strawberry = 4\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\n[Flags]\r\nenum FruitType\r\n{\r\n    None = 0,       // Compliant\r\n    Banana = 1,\r\n    Orange = 2,\r\n    Strawberry = 4\r\n}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S2346",
          "language": "VB.NET",
          "title": "Flags enumerations zero-value members should be named \"None\"",
          "description": "<p>\r\n    Consisitent use of \"None\" in flags enumerations indicates that all flag values are cleared.\r\n    The value 0 should not be used to indicate any other state, since there is no way to check that the bit <code>0</code> is set.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n&lt;Flags()&gt;\r\nEnum FruitType\r\n    Void = 0        ' Non-Compliant\r\n    Banana = 1\r\n    Orange = 2\r\n    Strawberry = 4\r\nEnd Enum\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\n&lt;Flags()&gt;\r\nEnum FruitType\r\n    None = 0        ' Compliant\r\n    Banana = 1\r\n    Orange = 2\r\n    Strawberry = 4\r\nEnd Enum\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S3217",
      "title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S3217",
          "language": "C#",
          "title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
          "description": "<p>\r\n    The <code>foreach</code> statement was introduced in the C# language prior to generics. To make it easier to work with\r\n    non-generic collections available at that time such as <code>ArrayList</code>, the <code>foreach</code> statements allows\r\n    to downcast the collection's element of type <code>Object</code> into any other type. The problem is that, to achieve that,\r\n    the <code>foreach</code> statements silently performs <code>explicit</code> type conversion, which at runtime can result in\r\n    an <code>InvalidCastException</code> to be thrown.\r\n</p>\r\n<p>\r\n    New C# code should use generics and not rely on <code>foreach</code> statement's silent <code>explicit</code> conversions.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nArrayList list = new ArrayList();\r\nlist.Add(0);\r\nlist.Add(1);\r\n// list.Add(\"surprise!\"); // uncommenting this line will make both foreach below throw an InvalidCastException\r\n\r\nforeach (object elementObject in list)\r\n{\r\n  int element = (int)elementObject; // This \"explicit\" conversion is hidden within the foreach loop\r\n  Console.WriteLine(element);\r\n}\r\n\r\n// can be written in an equivalent but shorter way:\r\n\r\nforeach (int element in list) // Noncompliant\r\n{\r\n  Console.WriteLine(element);\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nList&lt;int&gt; list = new List&lt;int&gt;();\r\nlist.Add(0);\r\nlist.Add(1);\r\n// list.Add(\"surprise!\"); // uncommenting this line won't compile\r\n\r\nforeach (int element in list)\r\n{\r\n  Console.WriteLine(element);\r\n}\r\n</pre>\r\nor\r\n<pre>\r\nArrayList list = new ArrayList();\r\nlist.Add(0);\r\nlist.Add(1);\r\nlist.Add(\"surprise!\");\r\n\r\nforeach (int element in list.OfType&lt;int&gt;())\r\n{\r\n  Console.WriteLine(element);\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Filter collection for the expected type</li></ul>",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S127",
      "title": "\"for\" loop stop conditions should be invariant",
      "tags": [
        "misra",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S127",
          "language": "C#",
          "title": "\"for\" loop stop conditions should be invariant",
          "description": "<p>\r\n    <code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\r\n</p>\r\n<p>\r\n    Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.\r\n</p>\r\n<p>\r\n    This rule tracks three types of non-invariant stop conditions:\r\n    <ul>\r\n        <li>When the loop counters are updated in the body of the <code>for</code> loop</li>\r\n        <li>When the stop condition depend upon a method call</li>\r\n        <li>When the stop condition depends on an object property, since such properties could change during the execution of the loop.</li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass Foo\r\n{\r\n    static void Main()\r\n    {\r\n        for (int i = 1; i &lt;= 5; i++)\r\n        {\r\n            Console.WriteLine(i);\r\n            if (condition)\r\n            {\r\n               i = 20;\r\n           }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass Foo\r\n{\r\n    static void Main()\r\n    {\r\n        for (int i = 1; i &lt;= 5; i++)\r\n        {\r\n            Console.WriteLine(i);\r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 13.6 - Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.</li>\r\n    <li>MISRA C++:2008, 6-5-3 - The loop-counter shall not be modified within condition or statement.</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "misra",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1994",
      "title": "\"for\" loop incrementers should modify the variable being tested in the loop's stop condition",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S1994",
          "language": "C#",
          "title": "\"for\" loop incrementers should modify the variable being tested in the loop's stop condition",
          "description": "<p>\r\nIt is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nfor (i = 0; i < 10; j++) // Noncompliant\r\n{\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nfor (i = 0; i < 10; i++)\r\n{\r\n  // ...\r\n}\r\n</pre>",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S1541",
      "title": "Methods should not be too complex",
      "tags": [
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S1541",
          "language": "C#",
          "title": "Methods should not be too complex",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumFunctionComplexityThreshold</dt><dd><span class=\"param-description\">The maximum authorized complexity in function</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">10</span></dd></dl><p>The cyclomatic complexity of a function should not exceed a defined threshold.</p>\r\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S2934",
      "title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2934",
          "language": "C#",
          "title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
          "description": "<p>\r\n    While the properties of a <code>readonly</code> reference type field can still be changed after initialization,\r\n    those of a <code>readonly</code> value field, such as a <code>struct</code>, cannot.\r\n</p>\r\n<p>\r\n    If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties\r\n    could be unreliable, working sometimes but not others.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\ninterface IPoint\r\n{\r\n  int X { get; set; }\r\n  int Y { get; set; }\r\n}\r\n\r\nclass PointManager&lt;T&gt; where T: IPoint\r\n{\r\n  readonly T point;  // this could be a struct\r\n  public PointManager(T point)\r\n  {\r\n    this.point = point;\r\n  }\r\n\r\n  public void MovePointVertically(int newX)\r\n  {\r\n    point.X = newX; //Noncompliant; if point is a struct, then nothing happened\r\n    Console.WriteLine(point.X);\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ninterface IPoint\r\n{\r\n  int X { get; set; }\r\n  int Y { get; set; }\r\n}\r\n\r\nclass PointManager&lt;T&gt; where T : IPoint\r\n{\r\n  readonly T point;  // this could be a struct\r\n  public PointManager(T point)\r\n  {\r\n    this.point = point;\r\n  }\r\n\r\n  public void MovePointVertically(int newX) // assignment has been removed\r\n  {\r\n    Console.WriteLine(point.X);\r\n  }\r\n}\r\n</pre>\r\nor\r\n<pre>\r\ninterface IPoint\r\n{\r\n  int X { get; set; }\r\n  int Y { get; set; }\r\n}\r\n\r\nclass PointManager&lt;T&gt; where T : class, IPoint\r\n{\r\n  readonly T point;  // this can only be a class\r\n  public PointManager(T point)\r\n  {\r\n    this.point = point;\r\n  }\r\n\r\n  public void MovePointVertically(int newX)\r\n  {\r\n    point.X = newX;  // this assignment is guaranteed to work\r\n    Console.WriteLine(point.X);\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove assignment</li><li>Add reference type constraint</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2955",
      "title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2955",
          "language": "C#",
          "title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
          "description": "<p>\r\n    When constraints have not been applied to restrict a generic type parameter to be a reference type,\r\n    then a value type, such as a <code>struct</code>, could also be passed. In such cases, comparing the\r\n    type parameter to <code>null</code> would always be false, because a <code>struct</code> can\r\n    be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use\r\n    <code>default()</code>. If it's not, then constraints should be added so that no value type can be\r\n    passed.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nprivate bool IsDefault&lt;T&gt;(T value)\r\n{\r\n  if (value == null) // Noncompliant\r\n  {\r\n    // ...\r\n  }\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nprivate bool IsDefault&lt;T&gt;(T value)\r\n{\r\n  if(object.Equals(value, default(T)))\r\n  {\r\n    // ...\r\n  }\r\n  // ...\r\n}\r\n</pre>\r\nor\r\n<pre>\r\nprivate bool IsDefault&lt;T&gt;(T value) where T : class\r\n{\r\n  if (value == null)\r\n  {\r\n    // ...\r\n  }\r\n  // ...\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Change null checking</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S3246",
      "title": "Generic type parameters should be co/contravariant when possible",
      "tags": [
        "api-design"
      ],
      "implementations": [
        {
          "key": "S3246",
          "language": "C#",
          "title": "Generic type parameters should be co/contravariant when possible",
          "description": "<p>\r\n    In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the\r\n    <code>out</code> and <code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant,\r\n    respectively.\r\n</p>\r\n<p>\r\n    The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate.\r\n    Doing so makes the parameter covariant, and allows interface and delegate instances created with a sub-type to be used as\r\n    instances created with a base type. The most notable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows\r\n    the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to an <code>IEnumerable&lt;object&gt;</code> variable,\r\n    for instance.\r\n</p>\r\n<p>\r\n    The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a\r\n    parameter in the delegate. Doing so makes the parameter contravariant, and allows interface and delegate instances created\r\n    with a base type to be used as instances created with a sub-type. I.e. this is the inversion of covariance. The most notable\r\n    example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows the assignment of an\r\n    <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\ninterface IConsumer&lt;T&gt;  // Noncompliant\r\n{\r\n    bool Eat(T fruit);\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ninterface IConsumer&lt;in T&gt;\r\n{\r\n    bool Eat(T fruit);\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "api-design"
          ]
        }
      ]
    },
    {
      "key": "S2326",
      "title": "Unused type parameters should be removed",
      "tags": [
        "unused"
      ],
      "implementations": [
        {
          "key": "S2326",
          "language": "C#",
          "title": "Unused type parameters should be removed",
          "description": "<p>\r\n    Type parameters that aren't used are dead code, which can only distract and possibly confuse\r\n    developers during maintenance. Therefore, unused type parameters should be removed.\r\n</p>\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class MoreMath&lt;T&gt; // Noncompliant; &lt;T&gt;is ignored\r\n{\r\n  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored\r\n  {\r\n    return a + b;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class MoreMath\r\n{\r\n  public int Add (int a, int b)\r\n  {\r\n    return a + b;\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S3249",
      "title": "Classes directly  extending \"Object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S3249",
          "language": "C#",
          "title": "Classes directly  extending \"Object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
          "description": "<p>\r\n    Making a <code>base</code> call in an overridden method is generally a good idea, but not in <code>GetHashCode</code> and\r\n    <code>Equals</code> for classes that directly extend <code>Object</code> because those methods are based on the object reference.\r\n    Meaning that no two <code>Objects</code> that use those <code>base</code> methods will ever be equal or have the same hash.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Point\r\n{\r\n  private readonly int x;\r\n  public MyClass(int x)\r\n  {\r\n    this.x = x;\r\n  }\r\n  public override int GetHashCode()\r\n  {\r\n    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Point\r\n{\r\n  private readonly int x;\r\n  public MyClass(int x)\r\n  {\r\n    this.x = x;\r\n  }\r\n  public override int GetHashCode()\r\n  {\r\n    return x.GetHashCode();\r\n  }\r\n}\r\n</pre>\r\n\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2328",
      "title": "\"GetHashCode\" should not reference mutable fields",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2328",
          "language": "C#",
          "title": "\"GetHashCode\" should not reference mutable fields",
          "description": "<p>\r\n    <code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>.\r\n    If <code>GetHashCode</code> uses non-<code>readonly</code> fields and those fields change after the object\r\n    is stored, the object immediately becomes mis-filed in the <code>Hashtable</code>. Any subsequent test to\r\n    see if the object is in the <code>Hashtable</code> will return a false negative.\r\n</p>\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Person\r\n{\r\n  public int age;\r\n  public string name;\r\n\r\n  public override int GetHashCode()\r\n  {\r\n    int hash = 12;\r\n    hash += this.age.GetHashCode(); // Noncompliant\r\n    hash += this.name.GetHashCode(); // Noncompliant\r\n    return hash;\r\n  }\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Person\r\n{\r\n  public readonly DateTime birthday;\r\n  public string name;\r\n\r\n  public override int GetHashCode()\r\n  {\r\n    int hash = 12;\r\n    hash += this.birthday.GetHashCode();\r\n    return hash;\r\n  }\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Make field \"readonly\"</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2219",
      "title": "\"Type.IsAssignableFrom()\" should not be used to check object type",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2219",
          "language": "C#",
          "title": "\"Type.IsAssignableFrom()\" should not be used to check object type",
          "description": "<p>\r\n    To check the type of an object there are at least three options:\r\n    <ul>\r\n        <li>The simplest and shortest one uses the <code>expr is SomeType</code> operator</li>\r\n        <li>The slightly longer <code>typeInstance.IsInstanceOfType(expr)</code></li>\r\n        <li>The cumbersome and error-prone one uses <code>expr1.GetType().IsAssignableFrom(expr2.GetType())</code></li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nA expr1;\r\nB expr2;\r\nif (expr2.GetType().IsAssignableFrom(expr1.GetType())) { /* ... */ } // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nA expr;\r\nif (expr is MyType) { /* ... */ }\r\n</pre>\r\n\r\nor, when the type is not known at compile time:\r\n\r\n<pre>\r\nA expr;\r\nType myType;\r\nif (myType.IsInstanceOfType(expr)) { /* ... */ }\r\n</pre><h2>Code Fixes</h2><ul><li>Simplify type checking</li></ul>",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S907",
      "title": "\"goto\" statement should not be used",
      "tags": [
        "brain-overload",
        "misra"
      ],
      "implementations": [
        {
          "key": "S907",
          "language": "C#",
          "title": "\"goto\" statement should not be used",
          "description": "<p>\r\n    <code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable.\r\n    Structured control flow statements such as <code>if</code>, <code>for</code>, <code>while</code>,\r\n    <code>continue</code> or <code>break</code> should be used instead.\r\n</p>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\r\n    <li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload",
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S1313",
      "title": "IP addresses should not be hardcoded",
      "tags": [
        "cert",
        "security"
      ],
      "implementations": [
        {
          "key": "S1313",
          "language": "C#",
          "title": "IP addresses should not be hardcoded",
          "description": "<p>\r\n    Hardcoding an IP address into source code is a bad idea for several reasons:\r\n    <ul>\r\n        <li>\r\n            a recompile is required if the address changes\r\n        </li>\r\n        <li>\r\n            it forces the same address to be used in every environment (dev, sys, qa, prod)\r\n        </li>\r\n        <li>\r\n            it places the responsibility of setting the value to use in production on the shoulders of the developer\r\n        </li>\r\n        <li>\r\n            it allows attackers to decompile the code and thereby discover a potentially sensitive address\r\n        </li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvar ip = \"127.0.0.1\";\r\nvar address = IPAddress.Parse(ip);\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvar ip = ConfigurationManager.AppSettings[\"myapplication.ip\"];\r\nvar address = IPAddress.Parse(ip);\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Although \"::\" is a valid IPv6 address, the rule doesn't report on it.\r\n</p>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J</a> - Never hard code sensitive information</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "cert",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S126",
      "title": "\"if ... else if\" constructs should end with \"else\" clause",
      "tags": [
        "cert",
        "misra"
      ],
      "implementations": [
        {
          "key": "S126",
          "language": "C#",
          "title": "\"if ... else if\" constructs should end with \"else\" clause",
          "description": "<p>\r\n  This rule applies whenever an <code>if</code> statement is followed by one or\r\n  more <code>else if</code> statements, the final <code>else if</code> should be\r\n  followed by an <code>else</code> statement.\r\n</p>\r\n\r\n<p>\r\nThe requirement for a final <code>else</code> statement is defensive programming.\r\nThe <code>else</code> statement should either take appropriate action or contain\r\na suitable comment as to why no action is taken. This is consistent with the\r\nrequirement to have a final <code>default</code> clause in a <code>switch</code>\r\nstatement.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (x == 0)\r\n{\r\n  doSomething();\r\n} else if (x == 1)\r\n{\r\n  doSomethingElse();\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (x == 0)\r\n{\r\n  doSomething();\r\n} else if (x == 1)\r\n{\r\n  doSomethingElse();\r\n} else\r\n{\r\n  throw new IllegalStateException();\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>\r\n    <li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>\r\n    <li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC64-Java</a> - Strive for logical completeness</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "cert",
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S1066",
      "title": "Collapsible \"if\" statements should be merged",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S1066",
          "language": "C#",
          "title": "Collapsible \"if\" statements should be merged",
          "description": "<p>\r\n    Merging collapsible <code>if</code> statements increases the code's readability.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (condition1)\r\n{\r\n  if (condition2)\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (condition1 &amp;&amp; condition2)\r\n{\r\n  ...\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1145",
      "title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
      "tags": [
        "bug",
        "cwe",
        "misra",
        "security"
      ],
      "implementations": [
        {
          "key": "S1145",
          "language": "C#",
          "title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
          "description": "<p>\r\n  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.\r\n</p>\r\n<p>\r\nIn either case, unconditional <code>if</code> statements should be removed.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (true)\r\n{\r\n  doSomething();\r\n}\r\n...\r\nif (false)\r\n{\r\n  doSomethingElse();\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ndoSomething();\r\n...\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove useless \"if\" statement</li></ul>",
          "severity": "Major",
          "tags": [
            "bug",
            "cwe",
            "misra",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2692",
      "title": "\"IndexOf\" checks should not be for positive numbers",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2692",
          "language": "C#",
          "title": "\"IndexOf\" checks should not be for positive numbers",
          "description": "<p>\r\n    Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for\r\n    values <code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a\r\n    value in a <code>string</code>, <code>List</code>, or an array, consider using the <code>Contains</code> method instead.\r\n</p>\r\n<p>\r\n    This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>,\r\n    or array is tested against <code>&gt;0</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nstring color = \"blue\";\r\nstring name = \"ishmael\";\r\n\r\nList&lt;string&gt; strings = new List&lt;string&gt; ();\r\nstrings.add(color);\r\nstrings.add(name);\r\nstring[] stringArray = strings.ToArray();\r\n\r\nif (strings.IndexOf(color) &gt; 0) // Noncompliant\r\n{\r\n  // ...\r\n}\r\nif (name.IndexOf(\"ish\") &gt; 0) // Noncompliant\r\n{\r\n  // ...\r\n}\r\nif (name.IndexOf(\"ae\") &gt; 0) // Noncompliant\r\n{\r\n  // ...\r\n}\r\nif (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant\r\n{\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nstring color = \"blue\";\r\nstring name = \"ishmael\";\r\nList&lt;string&gt; strings = new List&lt;string&gt; ();\r\nstrings.add(color);\r\nstrings.add(name);\r\nstring[] stringArray = strings.ToArray();\r\nif (strings.IndexOf(color) &gt; -1)\r\n{\r\n  // ...\r\n}\r\nif (name.IndexOf(\"ish\") &gt;= 0)\r\n{\r\n  // ...\r\n}\r\nif (name.Contains(\"ae\")\r\n{\r\n  // ...\r\n}\r\nif (Array.IndexOf(stringArray, color) &gt;= 0)\r\n{\r\n  // ...\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2278",
      "title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
      "tags": [
        "cwe",
        "owasp-a6",
        "security"
      ],
      "implementations": [
        {
          "key": "S2278",
          "language": "C#",
          "title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
          "description": "<p>\r\n    According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer\r\n    considered secure:\r\n</p>\r\n<blockquote>\r\n    <p>\r\n        Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn\r\n        because it no longer provides the security that is needed to protect federal government information.\r\n    </p>\r\n    <p>\r\n        Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS\r\n        197 in 2001.\r\n    </p>\r\n</blockquote>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nusing (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant\r\n{\r\n  //...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nusing (var aes = new AesCryptoServiceProvider())\r\n{\r\n  //...\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE CWE-326</a> - Inadequate Encryption Strength</li>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\r\n    <li><a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\r\n    <li>Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a></li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "cwe",
            "owasp-a6",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S2070",
      "title": "SHA-1 and Message-Digest hash algorithms should not be used",
      "tags": [
        "cwe",
        "owasp-a6",
        "sans-top25-porous",
        "security"
      ],
      "implementations": [
        {
          "key": "S2070",
          "language": "C#",
          "title": "SHA-1 and Message-Digest hash algorithms should not be used",
          "description": "<p>\r\n    The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to\r\n    create hash collisions with them. That is, it takes too little computational effort to come up with a\r\n    different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an\r\n    attacker the same access as if he had the originally-hashed value. This applies as well to the other\r\n    Message-Digest algorithms: MD2, MD4, MD6.\r\n</p>\r\n\r\n<p>\r\n    This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and <code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvar hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant\r\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(\"MD5\"); //Noncompliant\r\nvar hashProvider3 = new SHA1Managed(); //Noncompliant\r\nvar hashProvider4 = HashAlgorithm.Create(\"SHA1\"); //Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvar hashProvider1 = new SHA256Managed();\r\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(\"SHA256Managed\");\r\nvar hashProvider3 = HashAlgorithm.Create(\"SHA256Managed\");\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash</li>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\r\n    <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\r\n    <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses</li>\r\n    <li>Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST\">MessageDigest Is Weak</a></li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous",
            "security"
          ]
        }
      ]
    },
    {
      "key": "S103",
      "title": "Lines should not be too long",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S103",
          "language": "C#",
          "title": "Lines should not be too long",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximumLineLength</dt><dd><span class=\"param-description\">The maximum authorized line length.</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">200</span></dd></dl><p>\r\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\r\n</p>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S818",
      "title": "Literal suffixes should be upper case",
      "tags": [
        "cert",
        "convention",
        "misra",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S818",
          "language": "C#",
          "title": "Literal suffixes should be upper case",
          "description": "<p>\r\n    Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nconst uint a = 0u;      // Noncompliant\r\nconst long b = 0l;      // Noncompliant\r\nconst ulong c = 0Ul;     // Noncompliant\r\nconst ulong d = 0uL;     // Noncompliant\r\nconst decimal e = 1.2m;  // Noncompliant\r\nconst float f = 1.2f;    // Noncompliant\r\nconst double g = 1.2d;    // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nconst uint a = 0U;\r\nconst long b = 0L;\r\nconst ulong c = 0UL;\r\nconst ulong d = 0UL;\r\nconst decimal e = 1.2M;\r\nconst float f = 1.2F;\r\nconst double g = 1.2D;\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case</li>\r\n    <li>MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C</a> - Use \"L,\" not \"l,\" to indicate a long value</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\">CERT DCL16-CPP</a> - Use \"L,\" not \"l,\" to indicate a long value</li>\r\n</ul>\r\n<h2>Code Fixes</h2><ul><li>Make literal suffix upper case</li></ul>",
          "severity": "Minor",
          "tags": [
            "cert",
            "convention",
            "misra",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2551",
      "title": "Types and \"this\" should not be used for locking",
      "tags": [
        "bug",
        "multi-threading"
      ],
      "implementations": [
        {
          "key": "S2551",
          "language": "C#",
          "title": "Types and \"this\" should not be used for locking",
          "description": "<p>\r\n    Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance\r\n    of deadlocks because any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose.\r\n</p>\r\n<p>\r\n    Instead, a new, private <code>object</code> should be created and used for the lock.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic void MyLockingMethod()\r\n{\r\n  lock (this) // Noncompliant\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nobject lockObj = new object();\r\n\r\npublic void MyLockingMethod()\r\n{\r\n  lock (lockObj)\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "multi-threading"
          ]
        }
      ]
    },
    {
      "key": "S3218",
      "title": "Inner class members should not shadow outer class \"static\" or type members",
      "tags": [
        "design",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S3218",
          "language": "C#",
          "title": "Inner class members should not shadow outer class \"static\" or type members",
          "description": "<p>\r\n    It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class -\r\n    possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the\r\n    inner class' members should be renamed and all the references updated.\r\n</p>\r\n\r\n<h2>Noncompliant Code Sample</h2>\r\n<pre>\r\nclass Outer\r\n{\r\n  public static int A;\r\n\r\n  public class Inner\r\n  {\r\n    public int A; //Noncompliant\r\n    public int MyProp\r\n    {\r\n      get { return A; }  // Returns inner A. Was that intended?\r\n    }\r\n  }\r\n}\r\n</pre>\r\nAfter a rename\r\n<pre>\r\nclass Outer\r\n{\r\n  public static int A;\r\n\r\n  public class Inner\r\n  {\r\n    public int B;\r\n    public int MyProp\r\n    {\r\n      get { return A; }  // Still compiles and runs but functionality has changed\r\n    }\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass Outer\r\n{\r\n  public static int A;\r\n\r\n  public class Inner\r\n  {\r\n    public int InnerA;\r\n    public int MyProp\r\n    {\r\n      get { return InnerA; }\r\n    }\r\n  }\r\n}\r\n</pre>",
          "severity": "Major",
          "tags": [
            "design",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S100",
      "title": "Method name should comply with a naming convention",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S100",
          "language": "C#",
          "title": "Method name should comply with a naming convention",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">format</dt><dd><span class=\"param-description\">Regular expression used to check the method names against</span><span class=\"param-type\">STRING</span><span class=\"param-default\">^[A-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$</span></dd></dl><p>\r\n    Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided\r\n    regular expression.\r\n</p>\r\n\r\n<p>The following code:</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$</code>:</p>\r\n<pre>\r\npublic int doSomething(){...}\r\n</pre>\r\n\r\n<p>should be refactored into:</p>\r\n\r\n<pre>\r\npublic int DoSomething(){...}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S3262",
      "title": "\"params\" should be used on overrides",
      "tags": [
        "confusing"
      ],
      "implementations": [
        {
          "key": "S3262",
          "language": "C#",
          "title": "\"params\" should be used on overrides",
          "description": "<p>\r\n    Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in\r\n    the overriding method as well.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass Base\r\n{\r\n  public virtual void Method(params int[] numbers)\r\n  {\r\n    ...\r\n  }\r\n}\r\nclass Derived : Base\r\n{\r\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass Base\r\n{\r\n  public virtual void Method(params int[] numbers)\r\n  {\r\n    ...\r\n  }\r\n}\r\nclass Derived : Base\r\n{\r\n  public override void Method(params int[] numbers)\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Add the \"params\" modifier</li></ul>",
          "severity": "Minor",
          "tags": [
            "confusing"
          ]
        }
      ]
    },
    {
      "key": "S1172",
      "title": "Unused method parameters should be removed",
      "tags": [
        "misra",
        "unused"
      ],
      "implementations": [
        {
          "key": "S1172",
          "language": "C#",
          "title": "Unused method parameters should be removed",
          "description": "<p>\r\n    Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvoid DoSomething(int a, int b) // \"b\" is unused\r\n{\r\n  Compute(a);\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvoid DoSomething(int a)\r\n{\r\n  Compute(a);\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    <code>virtual</code>, <code>override</code> methods and interface implementations are ignored.\r\n</p>\r\n<pre>\r\noverride void DoSomething(int a, int b) // no issue reported on b\r\n{\r\n  Compute(a);\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C++:2008, 0-1-11</li>\r\n    <li>MISRA C:2012, 2.7</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "misra",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S2681",
      "title": "Multiline blocks should be enclosed in curly braces",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2681",
          "language": "C#",
          "title": "Multiline blocks should be enclosed in curly braces",
          "description": "<p>\r\nCurly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs.\r\nThis rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (condition)\r\n  firstActionInBlock();\r\n  secondAction();  // Noncompliant; executed unconditionally\r\nthirdAction();\r\n\r\nstring str = null;\r\nfor (int i = 0; i < array.length; i++)\r\n  str = array[i];\r\n  doTheThing(str);  // Noncompliant; executed only on last array element\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (condition)\r\n{\r\n  firstActionInBlock();\r\n  secondAction();\r\n}\r\nthirdAction();\r\n\r\nstring str = null;\r\nfor (int i = 0; i < array.length; i++)\r\n{\r\n  str = array[i];\r\n  doTheThing(str);\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S1659",
      "title": "Multiple variables should not be declared on the same line",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S1659",
          "language": "C#",
          "title": "Multiple variables should not be declared on the same line",
          "description": "<p>\r\n    Declaring multiple variable on one line is difficult to read.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  private int a, b; // Noncompliant\r\n\r\n  public void Method()\r\n  {\r\n    int c, d; // Noncompliant\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nclass MyClass\r\n{\r\n  private int a;\r\n  private int b;\r\n\r\n  public void Method()\r\n  {\r\n    int c;\r\n    int d;\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Separate declarations</li></ul>",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S1659",
          "language": "VB.NET",
          "title": "Multiple variables should not be declared on the same line",
          "description": "<p>\r\n    Declaring multiple variable on one line is difficult to read.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n  Public Const AAA As Integer = 5, BBB = 42, CCC As String = \"foo\"  ' Noncompliant\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nModule Module1\r\n  Public Const AAA As Integer = 5\r\n  Public Const BBB = 42\r\n  Public Const CCC as String = \"foo\"\r\nEnd Module\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Separate declarations</li></ul>",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S1848",
      "title": "Objects should not be created to be dropped immediately without being used",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S1848",
          "language": "C#",
          "title": "Objects should not be created to be dropped immediately without being used",
          "description": "<p>\r\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif (x < 0)\r\n  new ArgumentException(\"x must be nonnegative\");\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (x < 0)\r\n  throw new ArgumentException(\"x must be nonnegative\");\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2360",
      "title": "Optional parameters should not be used",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2360",
          "language": "C#",
          "title": "Optional parameters should not be used",
          "description": "<p>\r\n    The overloading mechanism should be used in place of optional parameters for several reasons:\r\n    <ul>\r\n        <li>Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used.</li>\r\n        <li>The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values.</li>\r\n        <li>The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior.</li>\r\n        <li>Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?</li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvoid Notify(string company, string office = \"QJZ\") // Noncompliant\r\n{\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nvoid Notify(string company)\r\n{\r\n  Notify(company, \"QJZ\");\r\n}\r\nvoid Notify(string company, string office = \"QJZ\")\r\n{\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        },
        {
          "key": "S2360",
          "language": "VB.NET",
          "title": "Optional parameters should not be used",
          "description": "<p>\r\n    The overloading mechanism should be used in place of optional parameters for several reasons:\r\n    <ul>\r\n        <li>Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used.</li>\r\n        <li>The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values.</li>\r\n        <li>The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior.</li>\r\n        <li>Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?</li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nSub Notify(ByVal Company As String, Optional ByVal Office As String = \"QJZ\") ' Noncompliant\r\n\r\nEnd Sub\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nSub Notify(ByVal Company As String)\r\n  Notify(Company, \"QJZ\")\r\nEnd Sub\r\n\r\nSub Notify(ByVal Company As String, ByVal Office As String)\r\n\r\nEnd Sub\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S3169",
      "title": "Multiple \"OrderBy\" calls should not be used",
      "tags": [
        "bug",
        "performance"
      ],
      "implementations": [
        {
          "key": "S3169",
          "language": "C#",
          "title": "Multiple \"OrderBy\" calls should not be used",
          "description": "<p>\r\n    There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result\r\n    because each subsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance\r\n    issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.\r\n</p>\r\n<p>\r\n    Instead, use <code>ThenBy</code> for each call after the first.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvar x = personList\r\n  .OrderBy(person => person.Age)\r\n  .OrderBy(person => person.Name)  // Noncompliant\r\n  .ToList();  // x is sorted by Name, not sub-sorted\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nvar x = personList\r\n  .OrderBy(person => person.Age)\r\n  .ThenBy(person => person.Name)\r\n  .ToList();\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Change \"OrderBy\" to \"ThenBy\"</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug",
            "performance"
          ]
        }
      ]
    },
    {
      "key": "S1226",
      "title": "Method parameters and caught exceptions should not be reassigned",
      "tags": [
        "misra",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S1226",
          "language": "C#",
          "title": "Method parameters and caught exceptions should not be reassigned",
          "description": "<p>\r\n    While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.\r\n    This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.\r\n    Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.\r\n    Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.\r\n    All parameters should be treated as <code>readonly</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  public string name;\r\n\r\n  public MyClass(string name)\r\n  {\r\n    name = name;                    // Noncompliant - useless identity assignment\r\n  }\r\n\r\n  public int Add(int a, int b)\r\n  {\r\n    a = a + b;                      // Noncompliant\r\n\r\n    /* additional logic */\r\n\r\n    return a;                       // Seems like the parameter is returned as is, what is the point?\r\n  }\r\n\r\n  public static void Main()\r\n  {\r\n    MyClass foo = new MyClass();\r\n    int a = 40;\r\n    int b = 2;\r\n    foo.Add(a, b);                  // Variable \"a\" will still hold 40 after this call\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  public string name;\r\n\r\n  public MyClass(string name)\r\n  {\r\n    this.name = name;               // Compliant\r\n  }\r\n\r\n  public int Add(int a, int b)\r\n  {\r\n    return a + b;                   // Compliant\r\n  }\r\n\r\n  public static void Main()\r\n  {\r\n    MyClass foo = new MyClass();\r\n    int a = 40;\r\n    int b = 2;\r\n    foo.Add(a, b);\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2012, 17.8 - A function parameter should not be modified</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "misra",
            "pitfall"
          ]
        },
        {
          "key": "S1226",
          "language": "VB.NET",
          "title": "Method parameters and caught exceptions should not be reassigned",
          "description": "<p>\r\n    While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.\r\n    This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>Me</code> was forgotten.\r\n    Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.\r\n    Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.\r\n    All parameters should be treated as <code>ReadOnly</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Foo(ByVal a As Integer)\r\n        a = 42                  ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Foo(ByVal a As Integer)\r\n        Dim tmp = a\r\n        tmp = 42                ' Compliant\r\n    End Sub\r\nEnd Module\r\n' or\r\nModule Module1\r\n    Sub Foo(ByRef a As Integer)\r\n        a = 42                  ' Compliant - it is a ByRef parameter\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2012, 17.8 - A function parameter should not be modified</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "misra",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S927",
      "title": "\"partial\" method parameter names should match",
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S927",
          "language": "C#",
          "title": "\"partial\" method parameter names should match",
          "description": "<p>\r\n    When the parameters to the implementation of a <code>partial</code> method don't match those\r\n    in the signature declaration, then confusion is almost guaranteed. Either the implementer was\r\n    confused when he renamed, swapped or mangled the parameter names in the implementation, or\r\n    callers will be confused.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npartial class Point\r\n{\r\n  partial void MoveVertically(int z);\r\n}\r\n\r\npartial class Point\r\n{\r\n  int x = 0;\r\n  int y = 0;\r\n  int z = 0;\r\n\r\n  partial void MoveVertically(int y)  // Noncompliant\r\n  {\r\n    this.y = y;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npartial class Point\r\n{\r\n  partial void MoveVertically(int z);\r\n}\r\n\r\npartial class Point\r\n{\r\n  int x = 0;\r\n  int y = 0;\r\n  int z = 0;\r\n\r\n  partial void MoveVertically(int z)\r\n  {\r\n    this.z = z;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall also be identical</li>\r\n    <li>MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical.</li>\r\n    <li>MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration.</li>\r\n    <li>MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers.</li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "cert",
            "misra",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2234",
      "title": "Parameters should be passed in the correct order",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2234",
          "language": "C#",
          "title": "Parameters should be passed in the correct order",
          "description": "<p>\r\n    When the names of parameters in a method call match the names of the method arguments,\r\n    it contributes to clearer, more readable code. However, when the names match, but are\r\n    passed in a different order than the method arguments, it indicates a mistake in the\r\n    parameter order which will likely lead to unexpected results.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic double divide(int divisor, int dividend)\r\n{\r\n  return divisor/dividend;\r\n}\r\n\r\npublic void doTheThing()\r\n{\r\n  int divisor = 15;\r\n  int dividend = 5;\r\n\r\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\r\n  //...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic double divide(int divisor, int dividend)\r\n{\r\n  return divisor/dividend;\r\n}\r\n\r\npublic void doTheThing()\r\n{\r\n  int divisor = 15;\r\n  int dividend = 5;\r\n\r\n  double result = divide(divisor, dividend);\r\n  //...\r\n}\r\n</pre>",
          "severity": "Blocker",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2372",
      "title": "Exceptions should not be thrown from property getters",
      "tags": [
        "error-handling"
      ],
      "implementations": [
        {
          "key": "S2372",
          "language": "C#",
          "title": "Exceptions should not be thrown from property getters",
          "description": "<p>\r\n    Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method.\r\n</p>\r\n<p>\r\n    It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  public int Foo\r\n  {\r\n    get\r\n    {\r\n      throw new NotImplementedException();  //Non-Compliant\r\n    }\r\n    set\r\n    {\r\n      // ... some code ...\r\n    }\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nclass MyClass\r\n{\r\n  public void SetFoo(int value)\r\n  {\r\n    // ... some code ...\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "error-handling"
          ]
        },
        {
          "key": "S2372",
          "language": "VB.NET",
          "title": "Exceptions should not be thrown from property getters",
          "description": "<p>\r\n    Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method.\r\n</p>\r\n<p>\r\n    It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Public Property Foo() As Integer\r\n        Get\r\n            Throw New NotImplementedException  ' Non-Compliant\r\n        End Get\r\n        Set(ByVal value As Integer)\r\n            ' ... some code ...\r\n        End Set\r\n    End Property\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nModule Module1\r\n    Sub SetFoo(ByVal value As Integer)         ' Compliant\r\n        ' ... some code ...\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "error-handling"
          ]
        }
      ]
    },
    {
      "key": "S2292",
      "title": "Trivial properties should be auto-implemented",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2292",
          "language": "C#",
          "title": "Trivial properties should be auto-implemented",
          "description": "<p>\r\n    Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented\r\n    properties, yielding cleaner and more readable code.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Car\r\n{\r\n  private string _make;\r\n  public string Make // Noncompliant\r\n  {\r\n    get { return _make; }\r\n    set { _make = value; }\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Car\r\n{\r\n  public string Make { get; set; }\r\n}\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S2376",
      "title": "Write-only properties should not be used",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2376",
          "language": "C#",
          "title": "Write-only properties should not be used",
          "description": "<p>\r\n    Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or\r\n    the property should be replaced with a setter method.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass Program\r\n{\r\n    public int Foo  //Non-Compliant\r\n    {\r\n        set\r\n        {\r\n            // ... some code ...\r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nclass Program\r\n{\r\n    public void SetFoo(int value)\r\n    {\r\n        // ... some code ...\r\n    }\r\n}\r\n</pre>",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        },
        {
          "key": "S2376",
          "language": "VB.NET",
          "title": "Write-only properties should not be used",
          "description": "<p>\r\n    Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or\r\n    the property should be replaced with a setter method.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    WriteOnly Property Foo() As Integer ' Non-Compliant\r\n        Set(ByVal value As Integer)\r\n            ' ... some code ...\r\n        End Set\r\n    End Property\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nModule Module1\r\n    Sub SetFoo(ByVal value As Integer)  ' Compliant\r\n        ' ... some code ...\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2339",
      "title": "Public constant members should not be used",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S2339",
          "language": "C#",
          "title": "Public constant members should not be used",
          "description": "<p>\r\n    Constant members are copied at compile time to the call sites, instead of being fetched at runtime.\r\n</p>\r\n<p>\r\n    As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a\r\n    client application linked to it. This library is then updated and <code>Version</code> is set to <code>2.0</code>.\r\n    Unfortunately, even after the old DLL is replaced by the new one, <code>Version</code> will still be <code>1.0</code>\r\n    for the client application. In order to see <code>2.0</code>, the client application would need to be rebuilt\r\n    against the new version of the library.\r\n</p>\r\n<p>\r\n    This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>.\r\n    In practice, those cases are uncommon, and therefore it is generally better to avoid constant members.\r\n</p>\r\n<p>\r\n    This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Foo\r\n{\r\n    public const double Version = 1.0;           // Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\npublic class Foo\r\n{\r\n    public static double Version\r\n    {\r\n      get { return 1.0; }\r\n    }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S2339",
          "language": "VB.NET",
          "title": "Public constant members should not be used",
          "description": "<p>\r\n    Constant members are copied at compile time to the call sites, instead of being fetched at runtime.\r\n</p>\r\n<p>\r\n    As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a\r\n    client application linked to it. This library is then updated and <code>Version</code> is set to <code>2.0</code>.\r\n    Unfortunately, even after the old DLL is replaced by the new one, <code>Version</code> will still be <code>1.0</code>\r\n    for the client application. In order to see <code>2.0</code>, the client application would need to be rebuilt\r\n    against the new version of the library.\r\n</p>\r\n<p>\r\n    This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>.\r\n    In practice, those cases are uncommon, and therefore it is generally better to avoid constant members.\r\n</p>\r\n<p>\r\n    This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nPublic Class Foo\r\n    Public Const Version = 1.0           ' Noncompliant\r\nEnd Class\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nPublic Class Foo\r\n    Public Shared ReadOnly Property Version = 1.0 ' Compliant\r\nEnd Class\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2368",
      "title": "Public methods should not have multidimensional array parameters",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2368",
          "language": "C#",
          "title": "Public methods should not have multidimensional array parameters",
          "description": "<p>\r\n    Exposing methods with multidimensional array parameters require developers to have advanced knowledge about the language in\r\n    order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods\r\n    should not be exposed, but can be used internally.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Program\r\n{\r\n    public void WriteMatrix(int[][] matrix) // Non-Compliant\r\n    {\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\npublic class Matrix\r\n{\r\n    // ...\r\n}\r\n\r\npublic class Program\r\n{\r\n    public void WriteMatrix(Matrix matrix) // Compliant\r\n    {\r\n    }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        },
        {
          "key": "S2368",
          "language": "VB.NET",
          "title": "Public methods should not have multidimensional array parameters",
          "description": "<p>\r\n    Exposing methods with multidimensional array parameters require developers to have advanced knowledge about the language in\r\n    order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods\r\n    should not be exposed, but can be used internally.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub WriteMatrix(ByVal matrix As Integer()()) ' Non-Compliant\r\n        ' ...\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nClass Matrix\r\n    ' ...\r\nEnd Class\r\n\r\nModule Module1\r\n    Sub WriteMatrix(ByVal matrix As Matrix)      ' Compliant\r\n        ' ...\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S3254",
      "title": "Default parameter values should not be passed as arguments",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S3254",
          "language": "C#",
          "title": "Default parameter values should not be passed as arguments",
          "description": "<p>\r\n    Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic void M(int x, int y = 5, int z = 7) { /* ... */ }\r\n\r\n// ...\r\nM(1, 5); //Noncompliant, y has the default value\r\nM(1, z: 7); //Noncompliant, z has the default value\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\r\n\r\n// ...\r\nM(1);\r\nM(1);\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant arguments</li><li>Remove redundant arguments with adding named arguments</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1905",
      "title": "Redundant casts should not be used",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S1905",
          "language": "C#",
          "title": "Redundant casts should not be used",
          "description": "<p>\r\n    Unnecessary casting expressions make the code harder to read and understand.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic int Example(int i)\r\n{\r\n  return (int) (i + 42); // Noncompliant\r\n}\r\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\r\n{\r\n  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic int Example(int i)\r\n{\r\n  return i + 42;\r\n}\r\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\r\n{\r\n  return coll.Reverse();\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant cast</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1939",
      "title": "Inheritance list should not be redundant",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S1939",
          "language": "C#",
          "title": "Inheritance list should not be redundant",
          "description": "<p>\r\n    An inheritance list entry is redundant if:\r\n    <ul>\r\n        <li>It is <code>Object</code> - all classes extend <code>Object</code> implicitly.</li>\r\n        <li>It is <code>int</code> for an <code>enum</code></li>\r\n        <li>It is a base class of another listed inheritance.</li>\r\n    </ul>\r\n    Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class MyClass : Object  // Noncompliant\r\n\r\nenum MyEnum : int  // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class MyClass\r\n\r\nenum MyEnum\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant declaration</li></ul>",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S2333",
      "title": "Redundant modifiers should be removed",
      "tags": [
        "unused"
      ],
      "implementations": [
        {
          "key": "S2333",
          "language": "C#",
          "title": "Redundant modifiers should be removed",
          "description": "<p>\r\n    Unnecessary keywords simply clutter the code and should be removed. Specifically:\r\n    <ul>\r\n        <li><code>virtual</code> on members of classes that are never overridden</li>\r\n        <li><code>partial</code> on type declarations that are completely defined in one place</li>\r\n        <li><code>sealed</code> on members of <code>sealed</code> classes</li>\r\n    </ul>\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\ninternal partial class MyClass // Noncompliant;\r\n{\r\n  public virtual void DoSomething()  // Noncompliant; virtual is gratuitous\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\ninternal class MyClass\r\n{\r\n  public void DoSomething()\r\n  {\r\n    // ...\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant modifier</li></ul>",
          "severity": "Minor",
          "tags": [
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S3235",
      "title": "Redundant parentheses should not be used",
      "tags": [
        "unused"
      ],
      "implementations": [
        {
          "key": "S3235",
          "language": "C#",
          "title": "Redundant parentheses should not be used",
          "description": "<p>\r\n    Redundant parentheses are simply wasted keystrokes, and should be removed.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n[MyAttribute()] //Noncompliant\r\nclass MyClass\r\n{\r\n  public int MyProperty { get; set; }\r\n  public static MyClass CreateNew(int propertyValue)\r\n  {\r\n    return new MyClass() //Noncompliant\r\n    {\r\n      MyProperty = propertyValue\r\n    };\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\n[MyAttribute]\r\nclass MyClass\r\n{\r\n  public int MyProperty { get; set; }\r\n  public static MyClass CreateNew(int propertyValue)\r\n  {\r\n    return new MyClass\r\n    {\r\n      MyProperty = propertyValue\r\n    };\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove redundant parentheses</li></ul>",
          "severity": "Minor",
          "tags": [
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S2995",
      "title": "\"Object.ReferenceEquals\" should not be used for value types",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2995",
          "language": "C#",
          "title": "\"Object.ReferenceEquals\" should not be used for value types",
          "description": "<p>\r\n    Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the\r\n    expected results most of the time because such types are passed by value, not by reference.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class MyClass\r\n{\r\n  private MyStruct myStruct;\r\n\r\n  public void DoSomething(MyStruct s1) {\r\n    int a = 1;\r\n    int b = 1;\r\n\r\n    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true\r\n    {\r\n      // ...\r\n    }\r\n    else if (Object.ReferenceEquals(a,b)) // Noncompliant\r\n    {\r\n      // ...\r\n    }\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2757",
      "title": "Reversed operators should not be used",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2757",
          "language": "C#",
          "title": "Reversed operators should not be used",
          "description": "<p>\r\n    The use of operators pairs (<code>=+</code> or <code>=-</code>) where the reversed, single operator\r\n    was meant (<code>+=</code> or <code>-=</code>) will compile and run, but not produce the expected results.\r\n</p>\r\n<p>\r\n    This rule raises an issue when <code>=+</code>, and <code>=-</code> are used, but ignores the operators\r\n    when they're spaced out: <code>= +</code>, <code>= -</code>.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nint target = -5;\r\nint num = 3;\r\n\r\ntarget =- num; // Noncompliant; target = -3. Is that really what's meant?\r\ntarget =+ num; // Noncompliant; target = 3\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nint target = -5;\r\nint num = 3;\r\n\r\ntarget = -num; // Compliant; intent to assign inverse value of num is clear\r\ntarget += num;\r\n</pre>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S1109",
      "title": "A close curly brace should be located at the beginning of a line",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S1109",
          "language": "C#",
          "title": "A close curly brace should be located at the beginning of a line",
          "description": "<p>\r\nShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif(condition)\r\n{\r\n  doSomething();}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif(condition)\r\n{\r\n  doSomething();\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>\r\n<pre>\r\nif(condition) { doSomething(); }\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S1656",
      "title": "Variables should not be self-assigned",
      "tags": [
        "bug",
        "cert"
      ],
      "implementations": [
        {
          "key": "S1656",
          "language": "C#",
          "title": "Variables should not be self-assigned",
          "description": "<p>\r\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic void setName(string name)\r\n{\r\n    name = name;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic void setName(string name)\r\n{\r\n    this.name = name;\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\r\n</ul>",
          "severity": "Critical",
          "tags": [
            "bug",
            "cert"
          ]
        }
      ]
    },
    {
      "key": "S1697",
      "title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S1697",
          "language": "C#",
          "title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
          "description": "<p>\r\nWhen either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it.\r\nUnfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.\r\n</p>\r\n\r\n<h2>Noncompliant Code Sample</h2>\r\n<pre>\r\nif (str == null &amp;&amp; str.Length == 0)\r\n{\r\n  Console.WriteLine(\"String is empty\");\r\n}\r\n\r\nif (str != null || str.Length > 0)\r\n{\r\n  Console.WriteLine(\"String is not empty\");\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (str == null || str.Length == 0)\r\n{\r\n  Console.WriteLine(\"String is empty\");\r\n}\r\n\r\nif (str != null &amp;&amp; str.Length > 0)\r\n{\r\n  Console.WriteLine(\"String is not empty\");\r\n}\r\n</pre>",
          "severity": "Blocker",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2437",
      "title": "Silly bit operations should not be performed",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S2437",
          "language": "C#",
          "title": "Silly bit operations should not be performed",
          "description": "<p>\r\n    Certain bit operations are just silly and should not be performed because their results are predictable.\r\n</p>\r\n<p>\r\n    Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will\r\n    <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.\r\n</p>\r\n<h2>Code Fixes</h2><ul><li>Remove bitwise operation</li></ul>",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S122",
      "title": "Statements should be on separate lines",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S122",
          "language": "C#",
          "title": "Statements should be on separate lines",
          "description": "<p>\r\n    For better readability, do not put more than one statement on a single line.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nif(someCondition) doSomething();\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nif(someCondition) {\r\n  doSomething();\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Anonymous functions containing a single statement are ignored. Block statements are not considered either.\r\n</p>\r\n<pre>\r\nFunc&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant\r\nFunc&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant\r\n</pre>",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S122",
          "language": "VB.NET",
          "title": "Statements should be on separate lines",
          "description": "<p>\r\n    For better readability, do not put more than one statement on a single line.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim a = 0 : Dim b = 0  ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim a = 0              ' Compliant\r\n        Dim b = 0              ' Compliant\r\n    End Sub\r\nEnd Module\r\n</pre>",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2743",
      "title": "Static fields should not be used in generic types",
      "tags": [],
      "implementations": [
        {
          "key": "S2743",
          "language": "C#",
          "title": "Static fields should not be used in generic types",
          "description": "<p>\r\n    A static field in a generic type is not shared among instances of different closed constructed types, thus <code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code>\r\n    and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will point to different objects, even though <code>instances</code> is seemingly shared among all\r\n    <code>LengthLimitedSingletonCollection&lt;&gt;</code> generic classes.\r\n</p>\r\n<p>\r\n    If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static members, then set your generic type to inherit from the base class.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class LengthLimitedSingletonCollection&lt;T&gt; where T : new()\r\n{\r\n  protected const int MaxAllowedLength = 5;\r\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant\r\n  public static T GetInstance()\r\n  {\r\n    object instance;\r\n    if (!instances.TryGetValue(typeof(T), out instance))\r\n    {\r\n      if (instances.Count >= MaxAllowedLength)\r\n      {\r\n        throw new Exception();\r\n      }\r\n      instance = new T();\r\n      instances.Add(typeof(T), instance);\r\n    }\r\n    return (T)instance;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class SingletonCollectionBase\r\n{\r\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();\r\n}\r\npublic class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()\r\n{\r\n  protected const int MaxAllowedLength = 5;\r\n  public static T GetInstance()\r\n  {\r\n    object instance;\r\n    if (!instances.TryGetValue(typeof(T), out instance))\r\n    {\r\n      if (instances.Count >= MaxAllowedLength)\r\n      {\r\n        throw new Exception();\r\n      }\r\n      instance = new T();\r\n      instances.Add(typeof(T), instance);\r\n    }\r\n    return (T)instance;\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Exception</h2>\r\n<p>\r\n    If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the closed constructed types.\r\n</p>\r\n<pre>\r\npublic class Cache&lt;T&gt;\r\n{\r\n  private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": []
        }
      ]
    },
    {
      "key": "S3263",
      "title": "Static fields should appear in the order they must be initialized",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S3263",
          "language": "C#",
          "title": "Static fields should appear in the order they must be initialized",
          "description": "<p>\r\n    Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus,\r\n    placing a static field in a class above the field or fields required for its initialization will yield unexpected\r\n    results.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\r\n  public static int Y = 42;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nclass MyClass\r\n{\r\n  public static int Y = 42;\r\n  public static int X = Y;\r\n}\r\n</pre>\r\nor\r\n<pre>\r\nclass MyClass\r\n{\r\n  public static int X;\r\n  public static int Y = 42;\r\n\r\n  static MyClass()\r\n  {\r\n    X = Y;\r\n  }\r\n}\r\n</pre>",
          "severity": "Blocker",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2223",
      "title": "Non-constant static fields should not be visible",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2223",
          "language": "C#",
          "title": "Non-constant static fields should not be visible",
          "description": "<p>\r\n    A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing\r\n    these fields from different threads needs synchronization with <code>lock</code>s. Improper synchronization\r\n    may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing\r\n    data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or\r\n    converted to a constant.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Math\r\n{\r\n  public static double Pi = 3.14;  // Noncompliant\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class Shape\r\n{\r\n  public static Shape Empty = new EmptyShape();  // Noncompliant\r\n\r\n  private class EmptyShape : Shape\r\n  {\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Math\r\n{\r\n  public const double Pi = 3.14;\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class Shape\r\n{\r\n  public static readonly Shape Empty = new EmptyShape();\r\n\r\n  private class EmptyShape : Shape\r\n  {\r\n  }\r\n}\r\n</pre>",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2696",
      "title": "Instance members should not write to \"static\" fields",
      "tags": [
        "bug",
        "multi-threading"
      ],
      "implementations": [
        {
          "key": "S2696",
          "language": "C#",
          "title": "Instance members should not write to \"static\" fields",
          "description": "<p>\r\n    Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to\r\n    bugs if there are multiple class instances and/or multiple threads in play.\r\n</p>\r\n<p>\r\n    This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class MyClass\r\n{\r\n  private static int count = 0;\r\n\r\n  public void DoSomething()\r\n  {\r\n    //...\r\n    count++;  // Noncompliant\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "multi-threading"
          ]
        }
      ]
    },
    {
      "key": "S1643",
      "title": "Strings should not be concatenated using \"+\" in a loop",
      "tags": [
        "performance"
      ],
      "implementations": [
        {
          "key": "S1643",
          "language": "C#",
          "title": "Strings should not be concatenated using \"+\" in a loop",
          "description": "<p>\r\n    <code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nstring str = \"\";\r\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\r\n{\r\n  str = str + arrayOfStrings[i];\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nStringBuilder bld = new StringBuilder();\r\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\r\n{\r\n  bld.Append(arrayOfStrings[i]);\r\n}\r\nstring str = bld.ToString();\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "performance"
          ]
        },
        {
          "key": "S1643",
          "language": "VB.NET",
          "title": "Strings should not be concatenated using \"+\" in a loop",
          "description": "<p>\r\n    <code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo = \"\"\r\n        foo &amp;= \"Result: \"       ' Compliant - outside of loop\r\n\r\n        For i = 1 To 9\r\n            foo &amp;= i            ' Noncompliant\r\n        Next\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo = New System.Text.StringBuilder\r\n        foo.Append(\"Result: \")  ' Compliant\r\n\r\n        For i = 1 To 9\r\n            foo.Append(i)       ' Compliant\r\n        Next\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "performance"
          ]
        }
      ]
    },
    {
      "key": "S2275",
      "title": "Format strings should be passed the correct number of arguments",
      "tags": [
        "bug",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2275",
          "language": "C#",
          "title": "Format strings should be passed the correct number of arguments",
          "description": "<p>\r\n    Use fewer arguments than are expected in your format string, and you'll get an error at runtime. Use more arguments than are\r\n    expected, and you probably won't get the output you expect. Either way, it's a bug.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nvar s1 = string.Format(\"{0} {1} {2}\", 1, 2); // Noncompliant; too few arguments\r\nvar s2 = string.Format(\"{0}\", 10, 11); // Noncompliant; too many arguments\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\n// Pass the expected number of arguments\r\nvar s1 = string.Format(\"{0} {1} {2}\", 1, 2, 3);\r\nvar s2 = string.Format(\"{0}\", 10);\r\n</pre>\r\nor\r\n<pre>\r\n// Fix the format string\r\nvar s1 = string.Format(\"{0} {1}\", 1, 2);\r\nvar s2 = string.Format(\"{0} {1}\", 10, 11);\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S3234",
      "title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
      "tags": [
        "confusing",
        "unused"
      ],
      "implementations": [
        {
          "key": "S3234",
          "language": "C#",
          "title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
          "description": "<p>\r\n    <code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when\r\n    implementing the dispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it\r\n    has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.\r\n</p>\r\n<p>\r\n    This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nsealed class MyClass\r\n{\r\n  public void Method()\r\n  {\r\n    ...\r\n    GC.SuppressFinalize(this); //Noncompliant\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nsealed class MyClass\r\n{\r\n  public void Method()\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove useless \"SuppressFinalize\" call</li></ul>",
          "severity": "Minor",
          "tags": [
            "confusing",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S1301",
      "title": "\"switch\" statements should have at least 3 \"case\" clauses",
      "tags": [
        "misra"
      ],
      "implementations": [
        {
          "key": "S1301",
          "language": "C#",
          "title": "\"switch\" statements should have at least 3 \"case\" clauses",
          "description": "<p>\r\n    <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\r\n</p>\r\n<p>\r\n    For just one or two cases however, the code will be more readable with <code>if</code> statements.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nswitch (variable)\r\n{\r\n  case 0:\r\n    doSomething();\r\n    break;\r\n  default:\r\n    doSomethingElse();\r\n    break;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (variable == 0)\r\n{\r\n  doSomething();\r\n} else\r\n{\r\n  doSomethingElse();\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n<ul>\r\n    <li>MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\r\n    <li>MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\r\n    <li>MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\r\n</ul>",
          "severity": "Minor",
          "tags": [
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S131",
      "title": "\"switch/Select\" statements should end with a \"default/Case Else\" clause",
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "implementations": [
        {
          "key": "S131",
          "language": "C#",
          "title": "\"switch/Select\" statements should end with a \"default/Case Else\" clause",
          "description": "<p>\r\n    The requirement for a final <code>default</code> clause is defensive programming. The clause should either take\r\n    appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code>\r\n    covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is\r\n    no guarantee that the <code>enum</code> won't be extended.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nint foo = 42;\r\nswitch (foo) // Noncompliant\r\n{\r\n  case 0:\r\n    Console.WriteLine(\"foo = 0\");\r\n    break;\r\n  case 42:\r\n    Console.WriteLine(\"foo = 42\");\r\n    break;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nint foo = 42;\r\nswitch (foo) // Compliant\r\n{\r\n  case 0:\r\n    Console.WriteLine(\"foo = 0\");\r\n    break;\r\n  case 42:\r\n    Console.WriteLine(\"foo = 42\");\r\n    break;\r\n  default:\r\n    throw new InvalidOperationException(\"Unexpected value foo = \" + foo);\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 15.0 - The MISRA C switch syntax shall be used.</li>\r\n    <li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\r\n    <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\r\n    <li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\r\n    <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\r\n    <li>MISRA C:2012, 16.4 - Every switch statement shall have a default label</li>\r\n    <li>MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement</li>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "cert",
            "cwe",
            "misra"
          ]
        },
        {
          "key": "S131",
          "language": "VB.NET",
          "title": "\"switch/Select\" statements should end with a \"default/Case Else\" clause",
          "description": "<p>\r\n    The requirement for a final <code>Case Else</code> clause is defensive programming. The clause should either take\r\n    appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>Select</code>\r\n    covers all current values of an <code>Enum</code>, a <code>Case Else</code> case should still be used because there is\r\n    no guarantee that the <code>Enum</code> won't be extended.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nSelect Case param ' Noncompliant - Case Else clause is missing\r\n  Case 0\r\n    DoSomething()\r\n  Case 1\r\n    DoSomethingElse()\r\nEnd Select\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nSelect Case param\r\n  Case 0\r\n    DoSomething()\r\n  Case 1\r\n    DoSomethingElse()\r\n  Case Else ' Compliant\r\n    DoSomethingElse()\r\nEnd Select\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 15.0 - The MISRA C switch syntax shall be used.</li>\r\n    <li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\r\n    <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\r\n    <li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\r\n    <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\r\n    <li>MISRA C:2012, 16.4 - Every switch statement shall have a default label</li>\r\n    <li>MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement</li>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness</li>\r\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\r\n</ul>",
          "severity": "Major",
          "tags": [
            "cert",
            "cwe",
            "misra"
          ]
        }
      ]
    },
    {
      "key": "S105",
      "title": "Tabulation characters should not be used",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S105",
          "language": "C#",
          "title": "Tabulation characters should not be used",
          "description": "<p>\r\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\r\nSo the use of tabulation character must be banned.\r\n</p>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        },
        {
          "key": "S105",
          "language": "VB.NET",
          "title": "Tabulation characters should not be used",
          "description": "<p>\r\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\r\nSo the use of tabulation character must be banned.\r\n</p>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2758",
      "title": "The ternary operator should not return the same value regardless of the condition",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2758",
          "language": "C#",
          "title": "The ternary operator should not return the same value regardless of the condition",
          "description": "<p>\r\n    When the second and third operands of a ternary operator are the same, the operator will always\r\n    return the same value regardless of the condition. Either the operator itself is pointless, or a\r\n    mistake was made in coding it.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic boolean canVote(Person person)\r\n{\r\n  return person.getAge > 18 ? true : true; // Noncompliant; is this what was intended?\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic boolean canVote(Person person)\r\n{\r\n  return person.getAge > 18 ? true : false;\r\n}\r\n</pre><h2>Code Fixes</h2><ul><li>Remove the ternary operator</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S3005",
      "title": "\"ThreadStatic\" should not be used on non-static fields",
      "tags": [
        "bug",
        "unused"
      ],
      "implementations": [
        {
          "key": "S3005",
          "language": "C#",
          "title": "\"ThreadStatic\" should not be used on non-static fields",
          "description": "<p>\r\n    When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the\r\n    field can have different values for different calling threads, but that's not the case, since the <code>ThreadStatic</code>\r\n    attribute is simply ignored on non-<code>static</code> fields.\r\n</p>\r\n<p>\r\n    So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class,\r\n    which gives a similar behavior for non-<code>static</code> fields.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class MyClass\r\n{\r\n  [ThreadStatic]  // Noncompliant\r\n  private int count = 0;\r\n\r\n  // ...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class MyClass\r\n{\r\n  private int count = 0;\r\n\r\n  // ...\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic class MyClass\r\n{\r\n  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();\r\n  public int Count\r\n  {\r\n    get { return count.Value; }\r\n    set { count.Value = value; }\r\n  }\r\n  // ...\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove \"ThreadStatic\" attribute</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug",
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S2996",
      "title": "\"ThreadStatic\" fields should not be initialized",
      "tags": [
        "bug",
        "multi-threading"
      ],
      "implementations": [
        {
          "key": "S2996",
          "language": "C#",
          "title": "\"ThreadStatic\" fields should not be initialized",
          "description": "<p>\r\n    When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread,\r\n    but unique across threads. Since a class' static initializer is only invoked for the\r\n    first thread created, it also means that only the first thread will have the expected initial values.\r\n</p>\r\n<p>\r\n    Instead, allow such fields to be initialized to their default values or make the initialization lazy.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic class Foo\r\n{\r\n  [ThreadStatic]\r\n  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic class Foo\r\n{\r\n  [ThreadStatic]\r\n  public static object _perThreadObject;\r\n  public static object PerThreadObject\r\n  {\r\n    get\r\n    {\r\n      if (_perThreadObject == null)\r\n      {\r\n        _perThreadObject = new object();\r\n      }\r\n      return _perThreadObject;\r\n    }\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "multi-threading"
          ]
        }
      ]
    },
    {
      "key": "S1479",
      "title": "\"switch\" statements should not have too many \"case\" clauses",
      "tags": [
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S1479",
          "language": "C#",
          "title": "\"switch\" statements should not have too many \"case\" clauses",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">maximum</dt><dd><span class=\"param-description\">Maximum number of case</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">30</span></dd></dl><p>\r\n  When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.\r\n</p>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S107",
      "title": "Methods should not have too many parameters",
      "tags": [
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S107",
          "language": "C#",
          "title": "Methods should not have too many parameters",
          "description": "<h2 class=\"param-header\">Parameters</h2><dl><dt class=\"param-key\">max</dt><dd><span class=\"param-description\">Maximum authorized number of parameters</span><span class=\"param-type\">INTEGER</span><span class=\"param-default\">7</span></dd></dl><p>\r\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>\r\n<pre>\r\npublic void doSomething(int param1, int param2, int param3, string param4, long param5)\r\n{\r\n...\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic void doSomething(int param1, int param2, int param3, string param4)\r\n{\r\n...\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S2225",
      "title": "\"ToString()\" method should not return null",
      "tags": [
        "bug",
        "cwe"
      ],
      "implementations": [
        {
          "key": "S2225",
          "language": "C#",
          "title": "\"ToString()\" method should not return null",
          "description": "<p>\r\n    Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit contract.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic override string ToString ()\r\n{\r\n  if (this.collection.Count == 0)\r\n  {\r\n    return null; // Noncompliant\r\n  }\r\n  else\r\n  {\r\n    // ...\r\n\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic override string ToString ()\r\n{\r\n  if (this.collection.Count == 0)\r\n  {\r\n    return \"\";\r\n  }\r\n  else\r\n  {\r\n    // ...\r\n\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference</li>\r\n</ul>\r\n",
          "severity": "Critical",
          "tags": [
            "bug",
            "cwe"
          ]
        }
      ]
    },
    {
      "key": "S2761",
      "title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2761",
          "language": "C#",
          "title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
          "description": "<p>\r\n    Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first.\r\n    Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.\r\n</p>\r\n<p>\r\n    Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nint v1 = 0;\r\nbool v2 = false;\r\n\r\nvar v3 = !!v1; // Noncompliant\r\nvar v4 = ~~v2; // Noncompliant\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nint v1 = 0;\r\nbool v2 = false;\r\n\r\nvar v3 = !v1;\r\nvar v4 = ~v2;\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove repeated prefix operator(s)</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S121",
      "title": "Control structures should use curly braces",
      "tags": [
        "cert",
        "cwe",
        "misra",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S121",
          "language": "C#",
          "title": "Control structures should use curly braces",
          "description": "<p>\r\n  While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\r\nif (condition)\r\n  executeSomething();\r\n  checkSomething();\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nif (condition)\r\n{\r\n  executeSomething();\r\n  checkSomething();\r\n}\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li>MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\r\n    <li>MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\r\n    <li>MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\r\n    <li>MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\r\n    <li>MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\r\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>\r\n    <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "cert",
            "cwe",
            "misra",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S3237",
      "title": "\"value\" parameters should be used",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S3237",
          "language": "C#",
          "title": "\"value\" parameters should be used",
          "description": "<p>\r\n    In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit\r\n    <code>value</code> parameter holds the value the accessor was called with. Not using the <code>value</code> means that the\r\n    accessor ignores the caller's intent which could cause unexpected results at runtime.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nprivate int count;\r\npublic int Count\r\n{\r\n  get { return count; }\r\n  set { count = 42; } // Noncompliant\r\n}\r\n</pre>\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nprivate int count;\r\npublic int Count\r\n{\r\n  get { return count; }\r\n  set { count = value; }\r\n}\r\n</pre>\r\nor\r\n<pre>\r\npublic int Count\r\n{\r\n  get { return count; }\r\n  set { throw new InvalidOperationException(); }\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2123",
      "title": "Values should not be uselessly incremented",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2123",
          "language": "C#",
          "title": "Values should not be uselessly incremented",
          "description": "<p>\r\n    A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic int pickNumber()\r\n{\r\n  int i = 0;\r\n  int j = 0;\r\n\r\n  i = i++; // Noncompliant; i is still zero\r\n\r\n  return j++; // Noncompliant; 0 returned\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic int pickNumber()\r\n{\r\n  int i = 0;\r\n  int j = 0;\r\n\r\n  i++;\r\n  return ++j;\r\n}\r\n</pre>\r\n",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S1117",
      "title": "Local variables should not shadow class fields",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S1117",
          "language": "C#",
          "title": "Local variables should not shadow class fields",
          "description": "<p>\r\n    Shadowing fields with a local variable or with a method parameter is a bad practice that\r\n    reduces code readability: It makes it confusing to know whether the field or the variable\r\n    is being used.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nclass Foo\r\n{\r\n  public int myField;\r\n\r\n  public void doSomething()\r\n  {\r\n    int myField = 0;\r\n    ...\r\n  }\r\n\r\n  public void doSomethingElse(int myField)\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Constructors are exceptions; it is common practice to name arguments for the fields the\r\n    values will be assigned to. Static methods are also excepted.\r\n</p>\r\n\r\n<pre>\r\nclass Foo {\r\n  public int myField;\r\n\r\n  public Foo(int myField)\r\n  {\r\n    this.myField = myField;\r\n  }\r\n\r\n  public static Foo build(int myField)\r\n  {\r\n    ...\r\n  }\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S1481",
      "title": "Unused local variables should be removed",
      "tags": [
        "unused"
      ],
      "implementations": [
        {
          "key": "S1481",
          "language": "C#",
          "title": "Unused local variables should be removed",
          "description": "<p>\r\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\npublic int numberOfMinutes(int hours)\r\n{\r\n  int seconds = 0;   // seconds is never used\r\n  return hours * 60;\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\npublic int numberOfMinutes(int hours)\r\n{\r\n  return hours * 60;\r\n}\r\n</pre>\r\n\r\n<h2>Exceptions</h2>\r\n<p>\r\n    Unused locally created resources in a <code>using</code> statement are not reported.\r\n</p>\r\n<pre>\r\nusing(var t = new Timer()) // t never used, but compliant.\r\n{\r\n  //...\r\n}\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "unused"
          ]
        }
      ]
    },
    {
      "key": "S2290",
      "title": "Field-like events should not be virtual",
      "tags": [
        "bug"
      ],
      "implementations": [
        {
          "key": "S2290",
          "language": "C#",
          "title": "Field-like events should not be virtual",
          "description": "<p>\r\n    Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler\r\n    generates a <code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit\r\n    <code>add</code> and <code>remove</code> methods.\r\n</p>\r\n<p>\r\n    When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>,\r\n    the behavior of the C# compiler is to generate a new <code>private</code> <code>delegate</code> field in the derived\r\n    class, separate from the parent's field. This results in multiple and separate events being created, which is rarely\r\n    what's actually intended.\r\n</p>\r\n<p>\r\n    To prevent this, remove the <code>virtual</code> designation from the parent class event.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nabstract class Car\r\n{\r\n  public virtual event EventHandler OnRefueled; // Noncompliant\r\n\r\n  public void Refuel()\r\n  {\r\n    // This OnRefueld will always be null\r\n     if (OnRefueled != null)\r\n     {\r\n       OnRefueled(this, null);\r\n     }\r\n  }\r\n}\r\n\r\nclass R2 : Car\r\n{\r\n  public override event EventHandler OnRefueled;\r\n}\r\n\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n    var r2 = new R2();\r\n    r2.OnRefueled += new EventHandler((o, a) =>\r\n    {\r\n      Console.WriteLine(\"This event will never be called\");\r\n    });\r\n    r2.Refuel();\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nabstract class Car\r\n{\r\n  public event EventHandler OnRefueled; // Compliant\r\n\r\n  public void Refuel()\r\n  {\r\n    if (OnRefueled != null)\r\n    {\r\n      OnRefueled(this, null);\r\n    }\r\n  }\r\n}\r\n\r\nclass R2 : Car {}\r\n\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n    var r2 = new R2();\r\n    r2.OnRefueled += new EventHandler((o, a) =>\r\n    {\r\n      Console.WriteLine(\"This event will be called\");\r\n    });\r\n    r2.Refuel();\r\n  }\r\n}\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Remove \"virtual\" keyword</li></ul>",
          "severity": "Critical",
          "tags": [
            "bug"
          ]
        }
      ]
    },
    {
      "key": "S2355",
      "title": "Array literals should be used instead of array creation expressions",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2355",
          "language": "VB.NET",
          "title": "Array literals should be used instead of array creation expressions",
          "description": "<p>\r\n    Array literals are more compact than array creation expressions.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo = New String() {\"a\", \"b\", \"c\"} ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo = {\"a\", \"b\", \"c\"}              ' Compliant\r\n    End Sub\r\nEnd Module\r\n</pre><h2>Code Fixes</h2><ul><li>Use an array literal</li></ul>",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1197",
      "title": "Array designators \"()\" should be on the type, not the variable",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S1197",
          "language": "VB.NET",
          "title": "Array designators \"()\" should be on the type, not the variable",
          "description": "<p>\r\n    Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the\r\n    type and the variable name to know whether or not a variable is an array.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo() As String ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo As String() ' Compliant\r\n    End Sub\r\nEnd Module\r\n</pre><h2>Code Fixes</h2><ul><li>Move the array designator to the type</li></ul>",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2351",
      "title": "Arrays should be initialized using the \"... = {}\" syntax",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2351",
          "language": "VB.NET",
          "title": "Arrays should be initialized using the \"... = {}\" syntax",
          "description": "<p>\r\n    The <code>... = {}</code> syntax is more compact, more readable and less error-prone.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo(1) As String      ' Noncompliant\r\n        foo(0) = \"foo\"\r\n        foo(1) = \"bar\"\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo = {\"foo\", \"bar\"}  ' Compliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1147",
      "title": "\"End\" statements should not be used",
      "tags": [
        "cwe",
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S1147",
          "language": "VB.NET",
          "title": "\"End\" statements should not be used",
          "description": "<p>\r\n    <code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code\r\n    execution immediately without executing <code>Dispose</code> or <code>Finalize</code> methods, or executing\r\n    <code>Finally</code> blocks. Therefore, it should be avoided.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Print(ByVal str As String)\r\n       Try\r\n            ...\r\n            End       ' Noncompliant\r\n        Finally\r\n            ' do something important here\r\n            ...\r\n        End Try\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>See</h2>\r\n\r\n<ul>\r\n    <li><a href=\"http://cwe.mitre.org/data/definitions/382\">MITRE, CWE-382</a> - J2EE Bad Practices: Use of System.exit()</li>\r\n</ul>\r\n",
          "severity": "Major",
          "tags": [
            "cwe",
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2349",
      "title": "Event names should not have \"Before\" or \"After\" as a prefix or suffix",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S2349",
          "language": "VB.NET",
          "title": "Event names should not have \"Before\" or \"After\" as a prefix or suffix",
          "description": "<p>\r\n    \"After\" and \"Before\" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and\r\n    after should be given to events using the present and past tense.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nClass Foo\r\n    Event BeforeClose() ' Noncompliant\r\n    Event AfterClose()  ' Noncompliant\r\nEnd Class\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nClass Foo\r\n    Event Closing()     ' Compliant\r\n    Event Closed()      ' Compliant\r\nEnd Class\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S3385",
      "title": "\"Exit\" statements should not be used",
      "tags": [
        "bad-practice",
        "brain-overload"
      ],
      "implementations": [
        {
          "key": "S3385",
          "language": "VB.NET",
          "title": "\"Exit\" statements should not be used",
          "description": "<p>\r\n    Other than <code>Exit Select</code>, using an <code>Exit</code> statement is never a good idea.\r\n</p>\r\n<p>\r\n    <code>Exit Do</code>, <code>Exit For</code>, <code>Exit Try</code>, and <code>Exit While</code> will all result in unstructured control flow,\r\n    i.e. spaghetti code.\r\n</p>\r\n<p>\r\n    <code>Exit Function</code>, <code>Exit Property</code>, and <code>Exit Sub</code> are all poor, less-readable substitutes for a simple\r\n    return, and if used with code that should return a value (<code>Exit Function</code> and in some cases Exit <code>Property</code>) they\r\n    could result in a <code>NullReferenceException</code>.\r\n</p>\r\n<p>\r\n    This rule raises an issue for all uses of <code>Exit</code> except <code>Exit Select</code>and <code>Exit Do</code> statements in loops\r\n    without condition.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nPublic Class Sample\r\n  Dim condition As Boolean\r\n  Public Sub MySub()\r\n    If condition Then\r\n      Exit Sub                  ' Noncompliant\r\n    End If\r\n    For index = 1 To 10\r\n      If index = 5 Then\r\n          Exit For               ' Noncompliant\r\n      End If\r\n      ' ...\r\n    Next\r\n  End Sub\r\n  Function MyFunction() As Object\r\n    ' ...\r\n    MyFunction = 42\r\n    Exit Function              ' Noncompliant\r\n  End Function\r\nEnd Class\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nPublic Class Sample\r\n  Dim condition As Boolean\r\n\r\n  Public Sub MySub()\r\n    If condition Then\r\n        Return\r\n    End If\r\n\r\n    For index = 1 To 4\r\n        ' ...\r\n    Next\r\n  End Sub\r\n  Function MyFunction() As Object\r\n    ' ...\r\n    Return 42\r\n  End Function\r\nEnd Class\r\n</pre>",
          "severity": "Major",
          "tags": [
            "bad-practice",
            "brain-overload"
          ]
        }
      ]
    },
    {
      "key": "S2352",
      "title": "Indexed properties with more than one parameter should not be used",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2352",
          "language": "VB.NET",
          "title": "Indexed properties with more than one parameter should not be used",
          "description": "<p>\r\n    Indexed properties are meant to represent access to a logical collection. When multiple parameters are required,\r\n    this design guideline may be violated, and refactoring the property into a method is preferable.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) ' Non-Compliant\r\n        Get\r\n            Return a + b\r\n        End Get\r\n    End Property\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Function Sum(ByVal a As Integer, ByVal b As Integer)          ' Compliant\r\n        Return a + b\r\n    End Function\r\nEnd Module\r\n</pre>\r\n\r\n",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S2354",
      "title": "Line continuations should not be used",
      "tags": [
        "convention"
      ],
      "implementations": [
        {
          "key": "S2354",
          "language": "VB.NET",
          "title": "Line continuations should not be used",
          "description": "<p>\r\n    To improve the code readability, the explicit line continuation character, <code>_</code>, should not be used. Instead, it is\r\n    better to break lines after an operator.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        ' Noncompliant\r\n        Console.WriteLine(\"Hello\" _\r\n                          &amp; \"world\")\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n\r\n        Console.WriteLine(\"Hello\" &amp;\r\n                          \"world\")\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "convention"
          ]
        }
      ]
    },
    {
      "key": "S2358",
      "title": "\"IsNot\" should be used instead of \"Not ... Is ...\"",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2358",
          "language": "VB.NET",
          "title": "\"IsNot\" should be used instead of \"Not ... Is ...\"",
          "description": "<p>\r\n    The <code>... IsNot ...</code> syntax is more compact and more readable than the <code>Not ... Is ...</code> syntax.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim a = Not \"a\" Is Nothing ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim a = \"a\" IsNot Nothing  ' Compliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Replace \"Not...Is...\" with \"IsNot\".</li></ul>",
          "severity": "Major",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S2359",
      "title": "\"On Error\" statements should not be used",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2359",
          "language": "VB.NET",
          "title": "\"On Error\" statements should not be used",
          "description": "<p>\r\n    Prefer the use of <code>Try ... Catch</code> blocks instead of <code>On Error</code> statements.\r\n</p>\r\n<p>\r\n    Visual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable\r\n    alternative to On Error Goto error handling, which is available in previous versions of Microsoft Visual Basic.\r\n    Structured exception handling is more powerful because it allows you to nest error handlers inside other error handlers\r\n    within the same procedure. Furthermore, structured exception handling uses a block syntax similar to the\r\n    <code>If...Else...End If</code> statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and\r\n    easier to maintain.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nSub DivideByZero()\r\n  On Error GoTo nextstep\r\n  Dim result As Integer\r\n  Dim num As Integer\r\n  num = 100\r\n  result = num / 0\r\nnextstep:\r\n  System.Console.WriteLine(\"Error\")\r\nEnd Sub\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n\r\n<pre>\r\nSub DivideByZero()\r\n  Try\r\n    Dim result As Integer\r\n    Dim num As Integer\r\n    num = 100\r\n    result = num / 0\r\n  Catch\r\n    System.Console.WriteLine(\"Error\")\r\n  End Try\r\nEnd Sub\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2365",
      "title": "Properties should not be based on arrays",
      "tags": [
        "performance"
      ],
      "implementations": [
        {
          "key": "S2365",
          "language": "VB.NET",
          "title": "Properties should not be based on arrays",
          "description": "<p>\r\n    Most developers expect property access to be as efficient as field access. However, if a property returns an array, it must return a\r\n    deep copy of the original array or risk having the object's internal state altered unexpectedly.\r\n</p>\r\n<p>\r\n    However, making a deep copy, especially when the array is large, is much slower than a simple field access. Therefore, such properties\r\n    should be refactored into methods.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    ' Internal state\r\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\r\n\r\n    ReadOnly Property Foo() As String() ' Noncompliant\r\n        Get\r\n            Dim copy = array.Clone      ' Expensive call\r\n            Return copy\r\n        End Get\r\n    End Property\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    ' Internal state\r\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\r\n\r\n    Function GetFoo() As String()       ' Compliant\r\n        Dim copy = array.Clone\r\n        Return copy\r\n    End Function\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "performance"
          ]
        }
      ]
    },
    {
      "key": "S2350",
      "title": "\"Exit Select\" statements should not be used redundantly",
      "tags": [
        "clumsy"
      ],
      "implementations": [
        {
          "key": "S2350",
          "language": "VB.NET",
          "title": "\"Exit Select\" statements should not be used redundantly",
          "description": "<p>\r\n    Visual Basic .NET, unlike many other programming languages, has no \"fall-through\" for its <code>Select</code> cases. Each case\r\n    already has an implicit <code>Exit Select</code> as its last instruction. It therefore is redundant to explicitly add one.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim x = 0\r\n        Select Case x\r\n            Case 0\r\n                Console.WriteLine(\"0\")\r\n                Exit Select                ' Noncompliant\r\n            Case Else\r\n                Console.WriteLine(\"Not 0\")\r\n                Exit Select                ' Noncompliant\r\n        End Select\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim x = 0\r\n        Select Case x\r\n            Case 0                         ' Compliant\r\n                Console.WriteLine(\"0\")\r\n            Case Else                      ' Compliant\r\n                Console.WriteLine(\"Not 0\")\r\n        End Select\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Minor",
          "tags": [
            "clumsy"
          ]
        }
      ]
    },
    {
      "key": "S1645",
      "title": "The \"&\" operator should be used to concatenate strings",
      "tags": [
        "suspicious"
      ],
      "implementations": [
        {
          "key": "S1645",
          "language": "VB.NET",
          "title": "The \"&\" operator should be used to concatenate strings",
          "description": "<p>\r\n    Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.\r\n    <code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.\r\n    <code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Console.WriteLine(\"1\" + 2) ' Noncompliant - will display \"3\"\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Console.WriteLine(1 &amp; 2)   ' Compliant - will display \"12\"\r\n        Console.WriteLine(1 + 2)   ' Compliant - but will display \"3\"\r\n        Console.WriteLine(\"1\" &amp; 2) ' Compliant - will display \"12\"\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n<h2>Code Fixes</h2><ul><li>Change to \"&\"</li></ul>",
          "severity": "Major",
          "tags": [
            "suspicious"
          ]
        }
      ]
    },
    {
      "key": "S2374",
      "title": "Signed types should be preferred to unsigned ones",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2374",
          "language": "VB.NET",
          "title": "Signed types should be preferred to unsigned ones",
          "description": "<p>\r\n    Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand.\r\n    Therefore, signed types should be preferred where possible.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo1 As UShort   ' Noncompliant\r\n        Dim foo2 As UInteger ' Noncompliant\r\n        Dim foo3 As ULong    ' Noncompliant\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim foo1 As Short\r\n        Dim foo2 As Integer\r\n        Dim foo3 As Long\r\n    End Sub\r\nEnd Module\r\n</pre>",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    },
    {
      "key": "S2340",
      "title": "\"Do\" loops should not be used without a \"While\" or \"Until\" condition",
      "tags": [
        "pitfall"
      ],
      "implementations": [
        {
          "key": "S2340",
          "language": "VB.NET",
          "title": "\"Do\" loops should not be used without a \"While\" or \"Until\" condition",
          "description": "<p>\r\n    A <code>Do ... Loop</code> without a <code>While</code> or <code>Until</code> condition must be terminated by an\r\n    unstructured <code>Exit Do</code> statement. It is safer and more readable to use structured loops instead.\r\n</p>\r\n\r\n<h2>Noncompliant Code Example</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        Dim i = 1\r\n\r\n        Do                        ' Non-Compliant\r\n            If i = 10 Then\r\n                Exit Do\r\n            End If\r\n\r\n            Console.WriteLine(i)\r\n\r\n            i = i + 1\r\n        Loop\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n\r\n<h2>Compliant Solution</h2>\r\n<pre>\r\nModule Module1\r\n    Sub Main()\r\n        For i = 1 To 9            ' Compliant\r\n            Console.WriteLine(i)\r\n        Next\r\n    End Sub\r\nEnd Module\r\n</pre>\r\n",
          "severity": "Major",
          "tags": [
            "pitfall"
          ]
        }
      ]
    }
  ]
}
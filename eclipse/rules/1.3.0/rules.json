{"version": "1.3.0","rules": [{"key": "ArrayAndObjectConstructors","title": "Array and Object constructors should not be used","tags": ["bug"],"implementations": [{"key": "javascript:ArrayAndObjectConstructors","language": "JavaScript","title": "Array and Object constructors should not be used","description": "<p>\n  Array and Object literals should always be preferred to Array and Object constructors.\n<\/p>\n\n<p>\n  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:\n<\/p>\n\n<ul>\n    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.<\/li>\n    <li>If the argument is a number, but not a natural number an exception will be thrown.<\/li>\n    <li>Otherwise the array will have one element with the argument as its value.<\/li>\n<\/ul>\n\n<p>\n  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.\n<\/p>\n\n<p>\n  Object constructors don't have the same problems, but for readability and consistency object literals should be used.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a3 = new Array(x1); \/\/ Noncompliant and variable in results\nvar a4 = new Array();  \/\/ Noncompliant. Results in 0-element array.\nvar a1 = new Array(x1, x2, x3);  \/\/ Noncompliant. Results in 3-element array.\n\nvar o = new Object(); \/\/ Noncompliant\n\nvar o2 = new Object(); \/\/ Noncompliant\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];\n\nvar o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "AssignmentInSubExpressionCheck","title": "Assignments should not be made from within sub-expressions","tags": ["cwe","bug","misra"],"implementations": [{"key": "squid:AssignmentInSubExpressionCheck","language": "Java","title": "Assignments should not be made from within sub-expressions","description": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.<\/p>\n<p>It is also a common mistake to write <code>=<\/code> when <code>==<\/code> was meant.<\/p>\n<p>Ideally, expressions should not have side-effects.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ndoSomething(i = 42);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ni = 42;\ndoSomething(i);   \n<\/pre>\n<p>or<\/p>\n<pre>\ndoSomething(i == 42);  \/\/ Perhaps in fact the assignment operator was expected\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Assignments in <code>while<\/code> statement conditions, and assignments enclosed in relational expressions are allowed.<\/p>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value<\/li>\n<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions<\/li>\n<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/481.html\">MITRE, CWE-481<\/a> - Assigning instead of Comparing<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cwe","misra"]}]},{"key": "BitwiseOperators","title": "Bitwise operators should not be used","tags": ["pitfall"],"implementations": [{"key": "javascript:BitwiseOperators","language": "JavaScript","title": "Bitwise operators should not be used","description": "<p>JavaScript does not have an integer type, but it does have bitwise operators <code>&lt;&lt;<\/code>, <code>&gt;&gt;<\/code>, <code>&gt;&gt;&gt;<\/code>, <code>~<\/code>, <code>&amp;<\/code>, <code>|<\/code>. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (a &amp; b) { ... } \/\/ Noncompliant; &amp; used in error\nvar oppositeSigns = ((x ^ y) &lt; 0); \/\/ Noncompliant; there's a clearer way to test for this\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (a &amp;&amp; b) { ... }\nvar oppositeSigns = false;\nif ( (x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0) ) {\n  oppositeSigns = true;\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "BoundOrAssignedEvalOrArguments","title": "\"eval\" and \"arguments\" should not be bound or assigned","tags": ["bug"],"implementations": [{"key": "javascript:BoundOrAssignedEvalOrArguments","language": "JavaScript","title": "\"eval\" and \"arguments\" should not be bound or assigned","description": "<p>In JavaScript, <code>eval<\/code> is used to evaluate a string as JavaScript code, and <code>arguments<\/code> is used to access function arguments through indexed properties.\n  As a consequence, <code>eval<\/code> and <code>arguments<\/code> should not be bound or assigned, because doing so would overwrite the original definitions of those two reserved words. <\/p>\n\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\neval = 17; \/\/ Noncompliant\narguments++; \/\/ Noncompliant\n++eval; \/\/ Noncompliant\nvar obj = { set p(arguments) { } }; \/\/ Noncompliant\nvar eval; \/\/ Noncompliant\ntry { } catch (arguments) { } \/\/ Noncompliant\nfunction x(eval) { } \/\/ Noncompliant\nfunction arguments() { } \/\/ Noncompliant\nvar y = function eval() { }; \/\/ Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); \/\/ Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { \/\/ Compliant\n    \/\/ do something\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { } \nvar y = function fun() { }; \nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "ClassVariableVisibilityCheck","title": "Class variable fields should not have public accessibility","tags": ["cwe"],"implementations": [{"key": "squid:ClassVariableVisibilityCheck","language": "Java","title": "Class variable fields should not have public accessibility","description": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:<\/p>\n<ul>\n<li> Additional behavior such as validation cannot be added.<\/li>\n<li> The internal representation is exposed, and cannot be changed afterwards.<\/li>\n<li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions.<\/li>\n<\/ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     \/\/ Compliant - constants are not checked\n\n  public String firstName;                       \/\/ Noncompliant\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     \/\/ Compliant - constants are not checked\n\n  private String firstName;                      \/\/ Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n<p>Because they are not modifiable, this rule ignores <code>public final<\/code> fields.<\/p>\n\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/493.html\">MITRE, CWE-493<\/a> - Critical Public Variable Without Final Modifier<\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "CollapsibleIfStatements","title": "Collapsible \"if\" statements should be merged","tags": ["clumsy"],"implementations": [{"key": "javascript:CollapsibleIfStatements","language": "JavaScript","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (x != undefined) {\n  if (x === 2) {\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (x != undefined &amp;&amp; x === 2) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "CommentedCode","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "javascript:CommentedCode","language": "JavaScript","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".<\/li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.<\/li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.<\/li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "CommentedOutCodeLine","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "squid:CommentedOutCodeLine","language": "Java","title": "Sections of code should not be \"commented out\"","description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<\/p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.<\/p>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".<\/li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.<\/li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.<\/li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "ConditionalComment","title": "Internet Explorer's conditional comments should not be used","tags": ["cross-browser"],"implementations": [{"key": "javascript:ConditionalComment","language": "JavaScript","title": "Internet Explorer's conditional comments should not be used","description": "<p>\n  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to Internet Explorer and won't work for other browsers.\n<\/p>\n\n<\/p>\n  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.\n  The following code snippet illustrates the use of conditional comments:\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/*@cc_on\n  @if (@_jscript_version >= 5.5)\n    document.write(\"You are using IE5.5 or newer\");\n  @else\n    document.write(\"You are using IE5 or older\");\n  @end\n  @*\/\n<\/pre>","severity": "Major","tags": ["cross-browser"]}]},{"key": "ConstructorFunctionsForSideEffects","title": "Constructor functions should not be called purely for side-effects","tags": ["pitfall"],"implementations": [{"key": "javascript:ConstructorFunctionsForSideEffects","language": "JavaScript","title": "Constructor functions should not be called purely for side-effects","description": "<p>Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the <code>new<\/code> operator creates isn't used anywhere. Therefore this misleading syntax should be avoided.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nnew MyConstructor(); \/\/ Non-Compliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar something = new MyConstructor();  \/\/ Compliant\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "DebuggerStatement","title": "Debugger statements should not be used","tags": ["cwe","security","user-experience"],"implementations": [{"key": "javascript:DebuggerStatement","language": "JavaScript","title": "Debugger statements should not be used","description": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  \/\/ Wait for user to resume.\n  debugger;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  \/\/ Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","security","user-experience"]}]},{"key": "DuplicateFunctionArgument","title": "Function argument names should be unique","tags": ["pitfall"],"implementations": [{"key": "javascript:DuplicateFunctionArgument","language": "JavaScript","title": "Function argument names should be unique","description": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfunction compute(a, a, c) { \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfunction compute(a, b, c) { \/\/ Compliant\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "DuplicatePropertyName","title": "Property names should not be duplicated within an object literal","tags": ["bug","pitfall"],"implementations": [{"key": "javascript:DuplicatePropertyName","language": "JavaScript","title": "Property names should not be duplicated within an object literal","description": "<p>\n  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.\n<\/p>\n\n<p>\n  What's more, using duplicate property names will generate an error in JavaScript strict mode code.\n  The following code snippet illustrates this rule :\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  'key': \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  key: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", \/\/ Noncompliant - duplicate of \"key\"\n  1: \"value\" \/\/ Noncompliant - duplicate of \"1\"\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n<\/pre>","severity": "Critical","tags": ["bug","pitfall"]}]},{"key": "EmptyBlock","title": "Nested blocks of code should not be left empty","tags": ["bug"],"implementations": [{"key": "javascript:EmptyBlock","language": "JavaScript","title": "Nested blocks of code should not be left empty","description": "<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i < length; i++) {}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>\n  When a block contains a comment, this block is not considered to be empty.\n<\/p>","severity": "Major","tags": ["bug"]}]},{"key": "EqEqEq","title": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"","tags": ["bug"],"implementations": [{"key": "javascript:EqEqEq","language": "JavaScript","title": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"","description": "<p>The <code>==<\/code> and <code>!=<\/code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0<\/code> as <code>true<\/code>.<\/p>\n<p>It is best to always use the side-effect-less <code>===<\/code> and <code>!==<\/code> operators instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (var == 'howdy') {...} \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (var === 'howdy') {...}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==<\/code> or <code>!=<\/code> is tolerated in such context. In the following case, if <code>foo<\/code> hasn't been initialized, its default value is not <code>null<\/code> but <code>undefined<\/code>. Nevertheless <code>undefined == null<\/code>, so JavaScript developers get the expected behavior.<\/p>\n<pre>\nif(foo == null) {...}\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "Eval","title": "Code should not be dynamically injected and executed to prevent Eval Injection vulnerability","tags": ["cwe","security","owasp-a3"],"implementations": [{"key": "javascript:Eval","language": "JavaScript","title": "Code should not be dynamically injected and executed to prevent Eval Injection vulnerability","description": "<p>The <code>eval<\/code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\neval(code_to_be_dynamically_executed)\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting (XSS)<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3","security"]}]},{"key": "ExcessiveParameterList","title": "Functions should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "javascript:ExcessiveParameterList","language": "JavaScript","title": "Functions should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\nThe following code snippet illustrates this rule with a maximum number of 4 parameters:\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) { \n...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "ForIn","title": "\"for...in\" loops should filter properties before acting on them","tags": ["bug"],"implementations": [{"key": "javascript:ForIn","language": "JavaScript","title": "\"for...in\" loops should filter properties before acting on them","description": "<p>The <code>for...in<\/code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don't take this into account can fail.<\/p>\n<p>Therefore, the body of every <code>for...in<\/code> statement should be wrapped in an <code>if<\/code> statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfor (name in object) {\n    doSomething(name);  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "ForLoopCounterChangedCheck","title": "\"for\" loop stop conditions should be invariant","tags": ["misra","pitfall"],"implementations": [{"key": "squid:ForLoopCounterChangedCheck","language": "Java","title": "\"for\" loop stop conditions should be invariant","description": "<p><code>for<\/code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. <\/p>\n<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.<\/p>\n<p>This rule tracks three types of non-invariant stop conditions:<\/p>\n<ul>\n<li> When the loop counters are updated in the body of the <code>for<\/code> loop\n<\/li><li> When the stop condition depend upon a method call\n<\/li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.\n<\/li><\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; \/\/ Noncompliant; counter updated in the body of the loop\n  ...\n} \n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {...} \n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for<\/em> loop for iteration counting shall not be modified in the body of the loop.\n<\/li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter<\/em> shall not be modified within <em>condition<\/em> or <em>statement<\/em>.\n<\/li><\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "FunctionComplexity","title": "Functions should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "javascript:FunctionComplexity","language": "JavaScript","title": "Functions should not be too complex","description": "<p>The cyclomatic complexity of functions should not exceed a defined threshold.<\/p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "FunctionDeclarationsWithinBlocks","title": "Function declarations should not be made within blocks","tags": ["cross-browser","user-experience"],"implementations": [{"key": "javascript:FunctionDeclarationsWithinBlocks","language": "JavaScript","title": "Function declarations should not be made within blocks","description": "<p>\n  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n<\/pre>","severity": "Major","tags": ["cross-browser","user-experience"]}]},{"key": "FunctionDefinitionInsideLoop","title": "Functions should not be defined inside loops","tags": ["bug"],"implementations": [{"key": "javascript:FunctionDefinitionInsideLoop","language": "JavaScript","title": "Functions should not be defined inside loops","description": "<p>\n  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function's variables. Instead, the function should be returned.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i < 13; i++) {\n  funs[i] = function() { \/\/ Non-Compliant\n    return i;\n  };\n}\nprint(funs[0]()); \/\/ 13 instead of 0\nprint(funs[1]()); \/\/ 13 instead of 1\nprint(funs[2]()); \/\/ 13 instead of 2\nprint(funs[3]()); \/\/ 13 instead of 3\n...\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "FutureReservedWords","title": "\"future reserved words\" should not be used as identifiers","tags": ["lock-in","pitfall"],"implementations": [{"key": "javascript:FutureReservedWords","language": "JavaScript","title": "\"future reserved words\" should not be used as identifiers","description": "<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:<\/p>\n<ul>\n<li> <code>await<\/code><\/li>\n<li> <code>class<\/code><\/li>\n<li> <code>const<\/code><\/li>\n<li> <code>enum<\/code><\/li>\n<li> <code>exports<\/code><\/li>\n<li> <code>extends<\/code><\/li>\n<li> <code>implements<\/code><\/li>\n<li> <code>import<\/code><\/li>\n<li> <code>interface<\/code><\/li>\n<li> <code>let<\/code><\/li>\n<li> <code>package<\/code><\/li>\n<li> <code>private<\/code><\/li>\n<li> <code>protected<\/code><\/li>\n<li> <code>public<\/code><\/li>\n<li> <code>static<\/code><\/li>\n<li> <code>super<\/code><\/li>\n<li> <code>yield<\/code><\/li>\n<\/ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict<\/code> mode code.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar package = document.getElementsByName(\"foo\"); \/\/ Noncompliant\nvar someData = { package: true };                 \/\/ Compliant, as it is not used as an identifier here\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar elements = document.getElementsByName(\"foo\"); \/\/ Compliant\n<\/pre>","severity": "Critical","tags": ["lock-in","pitfall"]}]},{"key": "HiddenFieldCheck","title": "Local variables should not shadow class fields","tags": ["pitfall"],"implementations": [{"key": "squid:HiddenFieldCheck","language": "Java","title": "Local variables should not shadow class fields","description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "HtmlComments","title": "HTML-style comments should not be used","tags": ["bug"],"implementations": [{"key": "javascript:HtmlComments","language": "JavaScript","title": "HTML-style comments should not be used","description": "<p>\n  HTML-style comments are not part of EcmaScript specification, and should not be used.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n&lt;!-- Noncompliant -->\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ Compliant\n\/* Compliant *\/\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "LabelPlacement","title": "Only \"while\", \"do\" and \"for\" statements should be labelled","tags": ["pitfall"],"implementations": [{"key": "javascript:LabelPlacement","language": "JavaScript","title": "Only \"while\", \"do\" and \"for\" statements should be labelled","description": "<p>Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nmyLabel:if (i % 2 == 0) {  \/\/ Noncompliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   \/\/ Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "LabelsShouldNotBeUsedCheck","title": "Labels should not be used","tags": ["confusing"],"implementations": [{"key": "squid:LabelsShouldNotBeUsedCheck","language": "Java","title": "Labels should not be used","description": "<p>\nLabels are not commonly used in Java, and many developers do not understand how they work.\nMoreover, their usage make the control flow harder to follow, which reduces the code's readability.\n<\/p>\n\n<p>\nThe following code:\n<\/p>\n\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row < matrix.length; row++) {   \/\/ Noncompliant\n  for (int col = 0; col < matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                \/\/ Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n<\/pre>\n\n<p>\nshould be refactored into:\n<\/p>\n\n<pre>\nfor (int row = 1; row < matrix.length; row++) {          \/\/ Compliant\n  for (int col = 0; col < row; col++) {\n    System.out.println(matrix[row][col]);                \/\/ Also prints 4, 7 and 8\n  }\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "LowerCaseLongSuffixCheck","title": "Long suffix \"L\" should be upper case","tags": [],"implementations": [{"key": "squid:LowerCaseLongSuffixCheck","language": "Java","title": "Long suffix \"L\" should be upper case","description": "<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.<\/p>\n<p>The following code:<\/p>\n<pre>\nlong n = 10l;  \/\/ Noncompliant - easily confused with one zero one\n<\/pre>\n<p>should be refactored into:<\/p>\n<pre>\nlong n = 10L;  \/\/ Compliant\n<\/pre>","severity": "Minor","tags": []}]},{"key": "MaximumInheritanceDepth","title": "Inheritance tree of classes should not be too deep","tags": ["design"],"implementations": [{"key": "squid:MaximumInheritanceDepth","language": "Java","title": "Inheritance tree of classes should not be too deep","description": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming.<\/p>\n<p>It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes.<\/p>\n<p>But abusing of this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code.<\/p>\n<p>Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when 'composition' would suit better.<\/p>","severity": "Major","tags": ["design"]}]},{"key": "MethodCyclomaticComplexity","title": "Methods should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "squid:MethodCyclomaticComplexity","language": "Java","title": "Methods should not be too complex","description": "<p>\n  The cyclomatic complexity of methods should not exceed a defined threshold.\n  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "MissingDeprecatedCheck","title": "Deprecated elements should have both the annotation and the Javadoc tag","tags": ["obsolete","bad-practice"],"implementations": [{"key": "squid:MissingDeprecatedCheck","language": "Java","title": "Deprecated elements should have both the annotation and the Javadoc tag","description": "<p>Deprecation should be marked with both the <code>@Deprecated<\/code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  \/**\n    * @deprecated\n    *\/\n  public void foo2() {    \/\/ Noncompliant\n  }\n\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  \/**\n    * @deprecated (when, why, refactoring advice...)\n    *\/\n  @Deprecated\n  public void foo1() {\n  }\n\n  \/**\n    * @deprecated (when, why, refactoring advice...)\n    *\/\n  @Deprecated\n  public void foo2() {\n  }\n\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.<\/p>\n\n<pre>\n\/**\n * @deprecated (when, why, etc...)\n *\/\n@Deprecated\nclass Qix  {\n\n  public void foo() {} \/\/ Compliant; class is deprecated\n\n}\n\n\/**\n * @deprecated (when, why, etc...)\n *\/\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n<\/pre>","severity": "Major","tags": ["bad-practice","obsolete"]}]},{"key": "ModifiersOrderCheck","title": "Modifiers should be declared in the correct order","tags": ["convention"],"implementations": [{"key": "squid:ModifiersOrderCheck","language": "Java","title": "Modifiers should be declared in the correct order","description": "<p>The Java Language Specification recommends listing modifiers in the following order:<\/p>\n<p>1. Annotations<\/p>\n<p>2. public<\/p>\n<p>3. protected<\/p>\n<p>4. private<\/p>\n<p>5. abstract<\/p>\n<p>6. static<\/p>\n<p>7. final<\/p>\n<p>8. transient<\/p>\n<p>9. volatile<\/p>\n<p>10. synchronized<\/p>\n<p>11. native<\/p>\n<p>12. strictfp<\/p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard order.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nstatic public void main(String[] args) {   \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic static void main(String[] args) {   \/\/ Compliant\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "MultilineStringLiterals","title": "Multiline string literals should not be used","tags": ["bad-practice"],"implementations": [{"key": "javascript:MultilineStringLiterals","language": "JavaScript","title": "Multiline string literals should not be used","description": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "NamedFunctionExpression","title": "Named function expressions should not be used","tags": ["cross-browser","user-experience"],"implementations": [{"key": "javascript:NamedFunctionExpression","language": "JavaScript","title": "Named function expressions should not be used","description": "<p>\n  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nf = function fun(){}; \/\/ Non-Compliant;  named function expression\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfun = function(){}; \/\/ Compliant; function expression\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>ECMAScript 6 generator functions are excluded from this rule.<\/p>\n<pre>\nfunction* f() {} \/\/ Compliant; generator function.\n<\/pre>","severity": "Major","tags": ["cross-browser","user-experience"]}]},{"key": "NestedIfDepth","title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","tags": ["brain-overload"],"implementations": [{"key": "javascript:NestedIfDepth","language": "JavaScript","title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","description": "<p>\n  Nested <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>switch<\/code> and <code>try<\/code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n  Such code is hard to read, refactor and therefore maintain.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>\n  The following code snippet illustrates this rule with the default threshold of 3.\n<\/p>\n\n<pre>\n  if (condition1) {                  \/\/ Compliant - depth = 1\n    \/* ... *\/\n    if (condition2) {                \/\/ Compliant - depth = 2\n      \/* ... *\/\n      for(int i = 0; i < 10; i++) {  \/\/ Compliant - depth = 3, not exceeding the limit\n        \/* ... *\/\n        if (condition4) {            \/\/ Non-Compliant - depth = 4\n          if (condition5) {          \/\/ Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            \/* ... *\/\n          }\n          return;\n        }\n      }\n    }\n  }\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "NonEmptyCaseWithoutBreak","title": "Switch cases should end with an unconditional \"break\" statement","tags": ["cwe","misra","cert","pitfall"],"implementations": [{"key": "javascript:NonEmptyCaseWithoutBreak","language": "JavaScript","title": "Switch cases should end with an unconditional \"break\" statement","description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  \/\/ Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>This rule is relaxed in the following cases:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0:                                \/\/ Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                \/\/ Use of return statement\n    return;\n  case 3:                                \/\/ Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                \/\/ Use of continue statement\n    continue;\n  default:                               \/\/ For the last case, use of break statement is optional \n    doSomethingElse();\n}\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.<\/li>\n<li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause<\/li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n<li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause<\/li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n<li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/484.html\">MITRE, CWE-484<\/a> - Omitted Break Statement in Switch<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YIFLAQ\">CERT, MSC17-C<\/a> - Finish every set of statements associated with a case label with a break statement<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZoFLAQ\">CERT, MSC18-CPP<\/a> - Finish every set of statements associated with a case label with a break statement<\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","misra","pitfall"]}]},{"key": "ObjectFinalizeCheck","title": "The Object.finalize() method should not be called","tags": ["cwe","security","cert"],"implementations": [{"key": "squid:ObjectFinalizeCheck","language": "Java","title": "The Object.finalize() method should not be called","description": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       \/\/ Noncompliant\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/586.html\">MITRE, CWE-586<\/a> - Explicit Call to Finalize()<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J<\/a> - Do not use finalizers<\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","security"]}]},{"key": "ObjectFinalizeOverridenCallsSuperFinalizeCheck","title": "super.finalize() should be called at the end of Object.finalize() implementations","tags": ["cwe","bug","cert"],"implementations": [{"key": "squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck","language": "Java","title": "super.finalize() should be called at the end of Object.finalize() implementations","description": "<p>Overriding the <code>Object.finalize()<\/code> method must be done with caution to dispose some system resources.<\/p>\n<p>Calling the <code>super.finalize()<\/code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nprotected void finalize() {   \/\/ Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  \/\/ Noncompliant; this call should come last\n  releaseSomeResources();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();    \n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/568.html\">MITRE, CWE-568<\/a> - finalize() Method Without super.finalize()<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J<\/a> - Do not use finalizers<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cert","cwe"]}]},{"key": "ObjectFinalizeOverridenCheck","title": "The Object.finalize() method should not be overriden","tags": ["unpredictable","cert"],"implementations": [{"key": "squid:ObjectFinalizeOverridenCheck","language": "Java","title": "The Object.finalize() method should not be overriden","description": "<p>This Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be few microseconds to few minutes later. So when some system resources need to be disposed by an object, it's better to not rely on this asynchronous mechanism to dispose them.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    \/\/ Noncompliant\n  }\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> CERT Java Secure Coding, MET12-J - Do not use finalizers<\/li>\n<\/ul>","severity": "Major","tags": ["cert","unpredictable"]}]},{"key": "OctalNumber","title": "Octal values should not be used","tags": ["misra","cert","pitfall"],"implementations": [{"key": "javascript:OctalNumber","language": "JavaScript","title": "Octal values should not be used","description": "<p>\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar myNumber = 010;   \/\/ myNumber will hold 8, not 10 - was this really expected?\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar myNumber = 8;\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants shall not be used<\/li>\n<li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used<\/li>\n<li> MISRA C:2012, 7.1 - Octal constants shall not be used<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/_QC7AQ\">CERT DCL18-C<\/a> - Do not begin integer constants with 0 when specifying a decimal value<\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra","pitfall"]}]},{"key": "OneStatementPerLine","title": "Statements should be on separate lines","tags": ["convention"],"implementations": [{"key": "javascript:OneStatementPerLine","language": "JavaScript","title": "Statements should be on separate lines","description": "<p>For better readability, do not put more than one statement on a single line.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif(someCondition) doSomething();\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Anonymous functions containing a single statement are ignored.<\/p>\n\n<pre>\nonEvent(function() { doSomething(); });               \/\/ Compliant\nonEvent(function(p) { doSomething(); return p %2 ;}); \/\/ Noncompliant\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "PrimitiveWrappers","title": "Wrapper objects should not be used for primitive types","tags": ["pitfall"],"implementations": [{"key": "javascript:PrimitiveWrappers","language": "JavaScript","title": "Wrapper objects should not be used for primitive types","description": "<p>\n  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = new Boolean(false);\nif (x) {\n  alert('hi');  \/\/ Shows 'hi'.\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = false;\nif (x) {\n  alert('hi');\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "RedundantThrowsDeclarationCheck","title": "Throws declarations should not be superfluous","tags": ["unused","clumsy"],"implementations": [{"key": "squid:RedundantThrowsDeclarationCheck","language": "Java","title": "Throws declarations should not be superfluous","description": "<p>\nAn exception in a <code>throws<\/code> declaration in Java is superfluous if it is:\n<\/p>\n\n<ul>\n  <li>listed multiple times<\/li>\n  <li>a subclass of another listed exception<\/li>\n  <li>a <code>RuntimeException<\/code>, or one of its descendants<\/li>\n  <li>completely unnecessary because the declared exception type cannot actually be thrown<\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvoid foo() throws MyException, MyException {}  \/\/ Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  \/\/ Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  \/\/ Noncompliant; RuntimeException can always be thrown\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n<\/pre>","severity": "Minor","tags": ["clumsy","unused"]}]},{"key": "S00100","title": "Method names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00100","language": "Java","title": "Method names should comply with a naming convention","description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic int DoSomething(){...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic int doSomething(){...}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Overriding methods are excluded. <\/p>\n<pre>\n@Override\npublic int Do_Something(){...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00101","title": "Class names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00101","language": "Java","title": "Class names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass my_class {...}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00107","title": "Methods should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "squid:S00107","language": "Java","title": "Methods should not have too many parameters","description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With a maximum number of 4 parameters:<\/p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S00108","title": "Nested blocks of code should not be left empty","tags": ["suspicious"],"implementations": [{"key": "squid:S00108","language": "Java","title": "Nested blocks of code should not be left empty","description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized<\/code> block. <code>synchronized<\/code> blocks are still considered empty even with comments because they can still affect program flow.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "S00112","title": "Generic exceptions should never be thrown","tags": ["cwe","error-handling","security"],"implementations": [{"key": "squid:S00112","language": "Java","title": "Generic exceptions should never be thrown","description": "<p>Using such generic exceptions as <code>Error<\/code>, <code>RuntimeException<\/code>, <code>Throwable<\/code>, and <code>Exception<\/code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void foo(String bar) throws Throwable {  \/\/ Noncompliant\n  throw new RuntimeException(\"My Message\");     \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\"); \n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Generic exceptions in the signatures of overriding methods are ignored.<\/p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/397.html\">MITRE, CWE-397<\/a> - Declaration of Throws for Generic Exception<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","error-handling","security"]}]},{"key": "S00114","title": "Interface names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00114","language": "Java","title": "Interface names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic interface myInterface {...} \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic interface MyInterface {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00115","title": "Constant names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00115","language": "Java","title": "Constant names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$<\/code>:<\/p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1; \n}\n\npublic enum MyEnum {\n  FIRST;\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00116","title": "Field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00116","language": "Java","title": "Field names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n   private int myField;\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00117","title": "Local variable and method parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00117","language": "Java","title": "Local variable and method parameter names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic void doSomething(int my_param) { \n  int LOCAL;    \n  ...             \n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void doSomething(int myParam) { \n  int local;  \n  ...               \n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Loop counters are ignored by this rule.<\/p>\n\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  \/\/ Compliant\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00119","title": "Type parameter names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00119","language": "Java","title": "Type parameter names should comply with a naming convention","description": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.<\/p>\n\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { \/\/ Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { \/\/ Noncompliant\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00120","title": "Package names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S00120","language": "Java","title": "Package names should comply with a naming convention","description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$<\/code>:<\/p>\n<pre>\npackage org.exAmple; \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npackage org.example; \n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S00122","title": "Statements should be on separate lines","tags": ["convention"],"implementations": [{"key": "squid:S00122","language": "Java","title": "Statements should be on separate lines","description": "<p>For better readability, do not put more than one statement on a single line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif(someCondition) doSomething();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S100","title": "Function names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "javascript:S100","language": "JavaScript","title": "Function names should comply with a naming convention","description": "<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction DoSomething(){...}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething(){...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S101","title": "Class names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S101","language": "PHP","title": "Class names should comply with a naming convention","description": "<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>With default provided regular expression:<\/p>\n<pre>\nclass my_class {...}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {...}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S104","title": "Files should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "javascript:S104","language": "JavaScript","title": "Files should not have too many lines","description": "<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.<\/br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.<\/br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n<\/p>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S104","language": "PHP","title": "Files should not have too many lines","description": "<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.<\/br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.<\/br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S105","title": "Tabulation characters should not be used","tags": ["convention","psr2"],"implementations": [{"key": "php:S105","language": "PHP","title": "Tabulation characters should not be used","description": "<p>\n  Developers should not need to configure the tab width of their text editors in order to be able to read source code.<\/br>\n  So the use of tabulation character must be banned.\n<\/p>","severity": "Minor","tags": ["convention","psr2"]}]},{"key": "S106","title": "Standard outputs should not be used directly to log anything","tags": ["bad-practice"],"implementations": [{"key": "squid:S106","language": "Java","title": "Standard outputs should not be used directly to log anything","description": "<p>When logging a message there are two important requirements which must be fulfilled:<\/p>\n<ul>\n  <li> The user must be able to easily retrieve the logs<\/li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log<\/li>\n<\/ul>\n\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a dedicated logger is highly recommended.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nSystem.out.println(\"My Message\");  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nlogger.log(\"My Message\");\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S1065","title": "Unused labels should be removed","tags": ["misra","unused"],"implementations": [{"key": "squid:S1065","language": "Java","title": "Unused labels should be removed","description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.<\/p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvoid foo() {\n  outer: \/\/label is not used.\n  for(int i = 0; i<10; i++) {\n    break;\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i<10; i++) {\n    break;\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2012, 2.6 - A function should not contain unused label declarations<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "S1066","title": "Collapsible \"if\" statements should be merged","tags": ["clumsy"],"implementations": [{"key": "squid:S1066","language": "Java","title": "Collapsible \"if\" statements should be merged","description": "<p>Merging collapsible <code>if<\/code> statements increases the code's readability.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  \/* ... *\/\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]},{"key": "php:S1066","language": "PHP","title": "Collapsible \"if\" statements should be merged","description": "<p>\n  Merging collapsible <code>if<\/code> statements increases the code's readability.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition1 && condition2) {\n  ...\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1067","title": "Expressions should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "squid:S1067","language": "Java","title": "Expressions should not be too complex","description": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;<\/code>, <code>||<\/code> and <code>condition ? ifTrue : ifFalse<\/code> operators it contains.<\/p>\n<p>A single expression's complexity should not become too high to keep the code readable.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default threshold value of 3:<\/p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... } \n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }     \n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "javascript:S1067","language": "JavaScript","title": "Expressions should not be too complex","description": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;<\/code>, <code>||<\/code> and <code>condition ? ifTrue : ifFalse<\/code> operators it contains.<\/p>\n<p>A single expression's complexity should not become too high to keep the code readable.<\/p>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S1067","language": "PHP","title": "Expressions should not be too complex","description": "<p>\n  The complexity of an expression is defined by the number of <code>&&<\/code>, <code>||<\/code> and <code>condition ? ifTrue : ifFalse<\/code> operators it contains.<\/br>\n  A single expression's complexity should not become too high to keep the code readable.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold value of 3<\/p>\n<pre>\nif ((($condition1 && $condition2) || ($condition3 && $condition4)) && $condition5) { ... }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) && my_last_condition()) { ... }\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1068","title": "Unused private fields should be removed","tags": ["unused"],"implementations": [{"key": "squid:S1068","language": "Java","title": "Unused private fields should be removed","description": "<p>\nIf a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>\nThe Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID<\/code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.\nA serializable class can declare its own <code>serialVersionUID<\/code> explicitly by declaring a field named <code>serialVersionUID<\/code> that must be static, final, and of type long. By definition those <code>serialVersionUID<\/code> fields should not be reported by this rule:\n<\/p>\n\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n<\/pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.<\/p>","severity": "Major","tags": ["unused"]},{"key": "php:S1068","language": "PHP","title": "Unused private fields should be removed","description": "<p>\n  If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       \/\/foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S107","title": "Functions should not have too many parameters","tags": ["brain-overload"],"implementations": [{"key": "php:S107","language": "PHP","title": "Functions should not have too many parameters","description": "<p>\n  A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:<\/p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S108","title": "Nested blocks of code should not be left empty","tags": ["bug"],"implementations": [{"key": "php:S108","language": "PHP","title": "Nested blocks of code should not be left empty","description": "<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i < 42; $i++){}  \/\/ Empty on purpose or missing piece of code ?\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>When a block contains a comment, this block is not considered to be empty.<\/p>","severity": "Major","tags": ["bug"]}]},{"key": "S1109","title": "A close curly brace should be located at the beginning of a line","tags": ["convention"],"implementations": [{"key": "php:S1109","language": "PHP","title": "A close curly brace should be located at the beginning of a line","description": "<p>\n  Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(condition) {\n  doSomething();}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.<\/p>\n<pre>\nif(condition) {doSomething();}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1116","title": "Empty statements should be removed","tags": ["misra","cert","unused"],"implementations": [{"key": "php:S1116","language": "PHP","title": "Empty statements should be removed","description": "<p>\n  Empty statements, i.e. <code>;<\/code>, are usually introduced by mistake, for example because:\n<ul>\n  <li>It was meant to be replaced by an actual statement, but this was forgotten.<\/li>\n  <li>There was a typo which lead the semicolon to be doubled, i.e. <code>;;<\/code>.<\/li>\n<\/ul>\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  ;                                              \/\/ Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                      \/\/ Noncompliant - double ;\n}\n\nfor ($i = 1; $i <= 10; doSomething($i), $i++);   \/\/ Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i <= 10; $i++) {\n    doSomething($i);\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n    <ul>\n      <li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.<\/li>\n      <li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.<\/li>\n      <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n      <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n    <\/ul>","severity": "Minor","tags": ["cert","misra","unused"]}]},{"key": "S1118","title": "Utility classes should not have public constructors","tags": ["design"],"implementations": [{"key": "squid:S1118","language": "Java","title": "Utility classes should not have public constructors","description": "<p>\nUtility classes, which are a collection of static members, are not meant to be instantiated.\nEven abstract utility classes, which can be extended, should not have public constructors.\n<\/p>\n\n<p>\nJava adds an implicit public constructor to every class which does not define at least one explicitly.\nHence, at least one non-public constructor should be defined.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass StringUtils { \/\/ Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass StringUtils { \/\/ Compliant\n\n  private StringUtils() {\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n<\/pre>","severity": "Major","tags": ["design"]}]},{"key": "S112","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","tags": ["cwe","error-handling","security"],"implementations": [{"key": "php:S112","language": "PHP","title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","description": "<p>\n  If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to catch all exceptions, including unknown exceptions that they do not know how to handle.\n<\/p>\n<p>\n  Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nthrow new Exception();  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nthrow new InvalidArgumentException();\n\/\/ or\nthrow new UnexpectedValueException();\n<\/pre>\n\n\n<h2>Exceptions<\/h2>\n<p>\n  Generic exceptions in the signatures of overriding methods are ignored.\n<\/p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/397.html\">MITRE, CWE-397<\/a> - Declaration of Throws for Generic Exception<\/li>\n<\/ul>","severity": "Major","tags": ["cwe","error-handling","security"]}]},{"key": "S1125","title": "Literal boolean values should not be used in condition expressions","tags": ["clumsy"],"implementations": [{"key": "squid:S1125","language": "Java","title": "Literal boolean values should not be used in condition expressions","description": "<p>Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (booleanVariable == true) { \/* ... *\/ }\nif (booleanVariable != true) { \/* ... *\/ }\nif (booleanVariable || false) { \/* ... *\/ }\ndoSomething(!false);\n\nbooleanVariable = condition ? true : exp;\nbooleanVariable = condition ? false : exp;\nbooleanVariable = condition ?  exp : true;\nbooleanVariable = condition ?  exp : false;\nbooleanVariable = condition ?  true : false;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (booleanVariable) { \/* ... *\/ }\nif (!booleanVariable) { \/* ... *\/ }\nif (booleanVariable) { \/* ... *\/ }\ndoSomething(true);\n\nbooleanVariable = condition || exp;\nbooleanVariable = !condition &amp;&amp; exp;\nbooleanVariable = !condition ||  exp;\nbooleanVariable = condition &amp;&amp; exp;\nbooleanVariable = condition;\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "javascript:S1125","language": "JavaScript","title": "Literal boolean values should not be used in condition expressions","description": "<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (booleanVariable == true) { \/* ... *\/ }\nif (booleanVariable != true) { \/* ... *\/ }\nif (booleanVariable || false) { \/* ... *\/ }\ndoSomething(!false);\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (booleanVariable) { \/* ... *\/ }\nif (!booleanVariable) { \/* ... *\/ }\nif (booleanVariable) { \/* ... *\/ }\ndoSomething(true);\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>\n  The use of literal booleans in comparisons which use identity operators (<code>===<\/code> and <code>!==<\/code>) are ignored.\n<\/p>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1125","language": "PHP","title": "Literal boolean values should not be used in condition expressions","description": "<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ($booleanVariable == true) { \/* ... *\/ }\nif ($booleanVariable != true) { \/* ... *\/ }\nif ($booleanVariable || false) { \/* ... *\/ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($booleanVariable) { \/* ... *\/ }\nif (!$booleanVariable) { \/* ... *\/ }\nif ($booleanVariable) { \/* ... *\/ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition && exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition && exp;\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===<\/code> and <code>!==<\/code>) are ignored.<\/p>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1126","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","tags": ["clumsy"],"implementations": [{"key": "squid:S1126","language": "Java","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nreturn expression; \n<\/pre>\n<pre>\nreturn !!expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "javascript:S1126","language": "JavaScript","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nreturn expression; \n<\/pre>\n<pre>\nreturn !!expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1126","language": "PHP","title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","description": "<p>\n  Return of boolean literal statements wrapped into <code>if-then-else<\/code> ones should be simplified.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n<\/pre>\n\n\n<h2>Compliant Solution<\/h2>\n<pre>\nreturn expression;\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1132","title": "Strings literals should be placed on the left side when checking for equality","tags": ["bad-practice"],"implementations": [{"key": "squid:S1132","language": "Java","title": "Strings literals should be placed on the left side when checking for equality","description": "<p>\nIt is preferable to place string literals on the left-hand side of an <code>equals()<\/code> or <code>equalsIgnoreCase()<\/code> method call.\nThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\n<\/p>\n\n<p>The following code:<\/p>\n\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        \/\/ Noncompliant - will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  \/\/ Noncompliant - null check could be removed\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         \/\/ Compliant - properly deals with the null case\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S1133","title": "Deprecated code should be removed eventually","tags": ["obsolete"],"implementations": [{"key": "squid:S1133","language": "Java","title": "Deprecated code should be removed eventually","description": "<p>\nThis rule is meant to be used as a way to track code which is marked as being deprecated.\nDeprecated code should eventually be removed.\n<\/p>\n\n<p>\nThe following code illustrates this rule:\n<\/p>\n\n<pre>\nclass Foo {\n  \/**\n    * @deprecated\n    *\/\n  public void foo() {    \/\/ Noncompliant\n  }\n\n  @Deprecated            \/\/ Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    \/\/ Compliant\n  }\n}\n<\/pre>","severity": "Info","tags": ["obsolete"]}]},{"key": "S1134","title": "\"FIXME\" tags should be handled","tags": [],"implementations": [{"key": "squid:S1134","language": "Java","title": "\"FIXME\" tags should be handled","description": "<p><code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator \/ denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>","severity": "Major","tags": []},{"key": "javascript:S1134","language": "JavaScript","title": "\"FIXME\" tags should be handled","description": "<p>\n  <code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n<\/p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator \/ denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>","severity": "Major","tags": []},{"key": "php:S1134","language": "PHP","title": "\"FIXME\" tags should be handled","description": "<p>\n  <code>FIXME<\/code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<\/br>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator \/ $denominator;              \/\/ FIXME denominator value might be  0\n}\n<\/pre>","severity": "Major","tags": []}]},{"key": "S1135","title": "\"TODO\" tags should be handled","tags": [],"implementations": [{"key": "squid:S1135","language": "Java","title": "\"TODO\" tags should be handled","description": "<p><code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<\/p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.<\/p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvoid doSomething() {\n  \/\/ TODO\n}\n<\/pre>","severity": "Info","tags": []},{"key": "javascript:S1135","language": "JavaScript","title": "\"TODO\" tags should be handled","description": "<p>\n  <code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n<\/p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  \/\/ TODO\n}\n<\/pre>","severity": "Info","tags": []},{"key": "php:S1135","language": "PHP","title": "\"TODO\" tags should be handled","description": "<p>\n  <code>TODO<\/code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<\/br>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething() {\n  \/\/ TODO\n}\n<\/pre>","severity": "Info","tags": []}]},{"key": "S114","title": "Interface names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S114","language": "PHP","title": "Interface names should comply with a naming convention","description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ninterface MyFirstInterface {...} \/\/ Compliant\ninterface mySecondInterface {...} \/\/ Non-Compliant\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1141","title": "Try-catch blocks should not be nested","tags": ["confusing"],"implementations": [{"key": "squid:S1141","language": "Java","title": "Try-catch blocks should not be nested","description": "<p>Nesting <code>try<\/code>\/<code>catch<\/code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.<\/p>","severity": "Major","tags": ["confusing"]}]},{"key": "S1142","title": "Functions should not contain too many return statements","tags": ["brain-overload"],"implementations": [{"key": "php:S1142","language": "PHP","title": "Functions should not contain too many return statements","description": "<p>\n  Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3:<\/p>\n<pre>\nfunction myFunction(){ \/\/ Non-Compliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1143","title": "\"return\" statements should not occur in \"finally\" blocks","tags": ["cwe","error-handling","bug"],"implementations": [{"key": "squid:S1143","language": "Java","title": "\"return\" statements should not occur in \"finally\" blocks","description": "<p>Returning from a <code>finally<\/code> block suppresses the propagation of any unhandled <code>Throwable<\/code> which was thrown in the <code>try<\/code> or <code>catch<\/code> block.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   \/\/ incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  \/\/ this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    \/* ... *\/\n    return;      \/\/ Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  \/\/ \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/584.html\">MITRE, CWE-584<\/a> - Return Inside Finally Block<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cwe","error-handling"]}]},{"key": "S1144","title": "Unused private method should be removed","tags": ["unused"],"implementations": [{"key": "php:S1144","language": "PHP","title": "Unused private method should be removed","description": "<p>\n  Private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  \/\/ Noncompliant\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   \/\/ Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S1145","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","tags": ["cwe","security","bug","misra"],"implementations": [{"key": "javascript:S1145","language": "JavaScript","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","description": "<p><code>if<\/code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if<\/code> statements with conditions that are always true are completely redundant, and make the code less readable.<\/p>\n<p>There are three possible causes for the presence of such code: <\/p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.<\/li>\n<li> Some value was left unset.<\/li>\n<li> Some logic is not doing what the programmer thought it did.<\/li>\n<\/ul>\n<p>In any of these cases, unconditional <code>if<\/code> statements should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (true) {  \/\/ Noncompliant\n  doSomething();\n}\n...\nif (false) {  \/\/ Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  \/\/ Noncompliant; always true\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ndoSomething();\n\ndoThirdThing();\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571.html\">MITRE, CWE-571<\/a> - Expression is Always True<\/li>\n<li> MISRA C:2004, 13.7<\/li>\n<li> MISRA C:2012, 14.3<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cwe","misra","security"]},{"key": "php:S1145","language": "PHP","title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","description": "<p>\n  <code>if<\/code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if<\/code> statements with conditions that are always true are completely redundant, and make the code less readable.\n\n  <p>\n  There are three possible causes for the presence of such code:\n  <\/p>\n  <ul>\n    <li>An if statement was changed during debugging and that debug code has been committed.<\/li>\n    <li>Some value was left unset.<\/li>\n    <li>Some logic is not doing what the programmer thought it did.<\/li>\n  <\/ul>\n\n<\/p>\n<p>\nIn any of these cases, unconditional <code>if<\/code> statements should be removed.\n<\/p>\n\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (true) {  \/\/ Noncompliant\n  doSomething();\n}\n...\nif (false) {  \/\/ Noncompliant\n  doSomethingElse();\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\ndoSomething();\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571.html\">MITRE, CWE-571<\/a> - Expression is Always True<\/li>\n  <li>MISRA C:2004, 13.7<\/li>\n  <li>MISRA C:2012, 14.3<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cwe","misra","security"]}]},{"key": "S1147","title": "Exit methods should not be called","tags": ["cwe","suspicious"],"implementations": [{"key": "squid:S1147","language": "Java","title": "Exit methods should not be called","description": "<p>Calling <code>System.exit(int status)<\/code> or <code>Rutime.getRuntime().exit(int status)<\/code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)<\/code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.<\/p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>These methods are ignored inside <code>main<\/code>.<\/p>\n\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/382.html\">MITRE, CWE-382<\/a> - Use of System.exit()<\/li>\n<\/ul>","severity": "Major","tags": ["cwe","suspicious"]}]},{"key": "S1148","title": "Throwable.printStackTrace(...) should not be called","tags": ["error-handling","security"],"implementations": [{"key": "squid:S1148","language": "Java","title": "Throwable.printStackTrace(...) should not be called","description": "<p>\n<code>Throwable.printStackTrace(...)<\/code> prints a throwable and its stack trace to some stream.\n<\/p>\n\n<p>Loggers should be used instead to print throwables, as they have many advantages:<\/p>\n<ul>\n  <li>Users are able to easily retrieve the logs.<\/li>\n  <li>The format of log messages is uniform and allow users to browse the logs easily.<\/li>\n<\/ul>\n\n<p>The following code:<\/p>\n\n<pre>\ntry {\n  \/* ... *\/\n} catch(Exception e) {\n  e.printStackTrace();        \/\/ Noncompliant\n}\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\ntry {\n  \/* ... *\/\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);   \/\/ Compliant\n}\n<\/pre>","severity": "Critical","tags": ["error-handling","security"]}]},{"key": "S1149","title": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","tags": ["multi-threading","performance"],"implementations": [{"key": "squid:S1149","language": "Java","title": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","description": "<p>\nEarly classes of the Java API, such as <code>Vector<\/code>, <code>Hashtable<\/code> and <code>StringBuffer<\/code>, were synchronized to make them thread-safe.\nUnfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\n<\/p>\n\n<p>It is better to use their new unsynchronized replacements:<\/p>\n\n<ul>\n  <li><code>ArrayList<\/code> or <code>LinkedList<\/code> instead of <code>Vector<\/code><\/li>\n  <li><code>Deque<\/code> instead of <code>Stack<\/code><\/li>\n  <li><code>HashMap<\/code> instead of <code>Hashtable<\/code><\/li>\n  <li><code>StringBuilder<\/code> instead of <code>StringBuffer<\/code><\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nVector cats = new Vector();\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nArrayList cats = new ArrayList(); \n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.<\/p>\n\n<pre>\n@Override\npublic Vector getCats() {...} \n<\/pre>","severity": "Major","tags": ["multi-threading","performance"]}]},{"key": "S115","title": "Constant names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "php:S115","language": "PHP","title": "Constant names should comply with a naming convention","description": "<p>\n  Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1150","title": "Enumeration should not be implemented","tags": ["obsolete"],"implementations": [{"key": "squid:S1150","language": "Java","title": "Enumeration should not be implemented","description": "<p>From the official Oracle Javadoc:<\/p>\n<blockquote>\n<p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.<\/p>\n<\/blockquote>\n<p>The following code:<\/p>\n<pre>\npublic class MyClass implements Enumeration {  \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n<p>should be refactored into:<\/p>\n<pre>\npublic class MyClass implements Iterator {     \/\/ Compliant\n  \/* ... *\/\n}\n<\/pre>","severity": "Major","tags": ["obsolete"]}]},{"key": "S1151","title": "\"switch case\" clauses should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "squid:S1151","language": "Java","title": "\"switch case\" clauses should not have too many lines","description": "<p>\n  The <code>switch<\/code> statement should be used only to clearly define some new branches in the control flow.\n  As soon as a <code>case<\/code> clause contains too many statements this highly decreases the readability\n  of the overall control flow statement. In such case, the content of <code>case<\/code> clause should\n  be extracted in a dedicated method.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 5:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0: \/\/ 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n<\/pre> \n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 0:                  \n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S1151","language": "PHP","title": "\"switch case\" clauses should not have too many lines","description": "<p>The <code>switch<\/code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case<\/code> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <code>case<\/code> clause should be extracted in a dedicated function<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>The following code snippet illustrates this rule with the default threshold of 5:<\/p>\n<pre>\nswitch ($var) {\n  case 0:  \/\/ 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1(\"\");\n  methodCall2(\"\");\n  methodCall3(\"\");\n  methodCall4(\"\");\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1153","title": "String.valueOf() should not be appended to a String","tags": ["clumsy"],"implementations": [{"key": "squid:S1153","language": "Java","title": "String.valueOf() should not be appended to a String","description": "<p>\nAppending <code>String.valueOf()<\/code> to a <code>String<\/code> decreases the code readability.\nThe argument passed to <code>String.valueOf()<\/code> should be directly appended instead.\n<\/p>\n\n<p>The following code:<\/p>\n\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    \/\/ Noncompliant\n}\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    \/\/ Compliant\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1154","title": "Results of operations on strings should not be ignored","tags": ["bug"],"implementations": [{"key": "javascript:S1154","language": "JavaScript","title": "Results of operations on strings should not be ignored","description": "<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar str = \"...\"\nstr.toUpperCase(); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar str = \"...\"\nstr = str.toUpperCase();\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S1155","title": "Collection.isEmpty() should be used to test for emptiness","tags": ["clumsy"],"implementations": [{"key": "squid:S1155","language": "Java","title": "Collection.isEmpty() should be used to test for emptiness","description": "<p>Using <code>Collection.size()<\/code> to test for emptiness works, but using <code>Collection.isEmpty()<\/code> makes the code more readable and can be more performant. The time complexity of any <code>isEmpty()<\/code> method implementation should be <code>O(1)<\/code> whereas some implementations of <code>size()<\/code> can be <code>O\\(n)<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (myCollection.size() == 0) {  \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (myCollection.isEmpty()) {    \/\/ Compliant\n  \/* ... *\/\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1157","title": "Case insensitive string comparisons should be made without intermediate upper or lower casing","tags": ["clumsy"],"implementations": [{"key": "squid:S1157","language": "Java","title": "Case insensitive string comparisons should be made without intermediate upper or lower casing","description": "<p>\nUsing <code>toLowerCase()<\/code> or <code>toUpperCase()<\/code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String<\/code> objects.\n<\/p>\n\n<p>The following code:<\/p>\n\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             \/\/ Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             \/\/ Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); \/\/ Noncompliant\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  \/\/ Compliant\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1158","title": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","tags": ["clumsy"],"implementations": [{"key": "squid:S1158","language": "Java","title": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","description": "<p>\n  Creating temporary primitive wrapper objects only for <code>String<\/code> conversion\n  or the use of the <code>compareTo<\/code> method is inefficient.\n<\/p>\n<p>\n  Instead, the static <code>toString()<\/code> or <code>compareTo<\/code> method of\n  the primitive wrapper class should be used.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nnew Integer(myInteger).toString();  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nInteger.toString(myInteger);        \/\/ Compliant\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S1160","title": "Public methods should throw at most one checked exception","tags": ["error-handling"],"implementations": [{"key": "squid:S1160","language": "Java","title": "Public methods should throw at most one checked exception","description": "<p>\n  Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.\n  This makes those exceptions fully part of the API of the method.\n<\/p>\n\n<p>\n  To keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void delete() throws IOException, SQLException {      \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  \/* ... *\/\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>\n  Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.\n<\/p>","severity": "Major","tags": ["error-handling"]}]},{"key": "S1161","title": "\"@Override\" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one","tags": ["bad-practice"],"implementations": [{"key": "squid:S1161","language": "Java","title": "\"@Override\" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one","description": "<p>Using the <code>@Override<\/code> annotation is useful for two reasons :<\/p>\n<ul>\n  <li>It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling.<\/li>\n  <li>It improves the readability of the source code by making it obvious that methods are overridden.<\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S1163","title": "Exceptions should not be thrown in finally blocks","tags": ["error-handling"],"implementations": [{"key": "squid:S1163","language": "Java","title": "Exceptions should not be thrown in finally blocks","description": "<p>\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the <code>try<\/code> or <code>catch<\/code> block.\nThe masked's exception message and stack trace will be lost.\n<\/p>\n\n<p>The following code:<\/p>\n\n<pre>\ntry {\n  \/* some work which end up throwing an exception *\/\n  throw new IllegalArgumentException();\n} finally {\n  \/* clean up *\/\n  throw new RuntimeException();                          \/\/ Noncompliant - will mask the IllegalArgumentException\n}\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\ntry {\n  \/* some work which end up throwing an exception *\/\n  throw new IllegalArgumentException();\n} finally {\n  \/* clean up *\/                                         \/\/ Compliant\n}\n<\/pre>","severity": "Critical","tags": ["error-handling"]}]},{"key": "S1165","title": "Exception classes should be immutable","tags": ["error-handling"],"implementations": [{"key": "squid:S1165","language": "Java","title": "Exception classes should be immutable","description": "<p>Exceptions are meant to represent the application's state at which an error occurred.<\/p>\n<p>Making all fields final ensures that this state:<\/p>\n<ul>\n<li> Will be fully defined at the same time the exception is instantiated.<\/li>\n<li> Won't be updated or corrupted by some bogus error handler.<\/li>\n<\/ul>\n<p>This will enable developers to quickly understand what went wrong.<\/p>\n<p>The following code:<\/p>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               \/\/ Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n<\/pre>\n<p>should be refactored into:<\/p>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;                         \/\/ Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n<\/pre>","severity": "Major","tags": ["error-handling"]}]},{"key": "S1166","title": "Exception handlers should preserve the original exception","tags": ["error-handling"],"implementations": [{"key": "squid:S1166","language": "Java","title": "Exception handlers should preserve the original exception","description": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\n \/\/ Noncompliant - exception is lost\ntry { \/* ... *\/ } catch (Exception e) { LOGGER.info(\"context\"); }   \n\n\/\/ Noncompliant - exception is lost (only message is preserved)       \ntry { \/* ... *\/ } catch (Exception e) { LOGGER.info(e.getMessage()); }   \n\n\/\/ Noncompliant - exception is lost \ntry { \/* ... *\/ } catch (Exception e) { throw new RuntimeException(\"context\"); }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ntry { \/* ... *\/ } catch (Exception e) { LOGGER.info(e); }   \n\ntry { \/* ... *\/ } catch (Exception e) { throw new RuntimeException(e); }\n\ntry {\n  \/* ... *\/\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;\n} catch (Exception e) {\n  \/\/ Conversion into unchecked exception is also allowed\n  throw new RuntimeException(e);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p><code>InterruptedException<\/code>, <code>NumberFormatException<\/code>, <code>ParseException<\/code> and <code>MalformedURLException<\/code> exceptions are arguably used to indicate nonexceptional outcomes.<\/p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.<\/p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  \/\/ It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n\n<\/pre>","severity": "Critical","tags": ["error-handling"]}]},{"key": "S1168","title": "Empty arrays and collections should be returned instead of null","tags": ["cert"],"implementations": [{"key": "squid:S1168","language": "Java","title": "Empty arrays and collections should be returned instead of null","description": "<p>Returning <code>null<\/code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.<\/p>\n<p>Moreover, in many cases, <code>null<\/code> is used as a synonym for empty.<\/p>\n<p>The following code: <\/p>\n<pre>\npublic static Result[] getResults() {\n  return null;                             \/\/ Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  \n  if (results != null) {                   \/\/ Nullity test required to prevent NPE\n    for (Result result: results) {\n      \/* ... *\/\n    }\n  }\n}\n<\/pre>\n<p>should be refactored into:<\/p>\n<pre>\npublic static Result[] getResults() {\n  return new Result[0];                    \/\/ Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    \/* ... *\/\n  }\n}\n<\/pre>\n<p>This rule also applies to collections:<\/p>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             \/\/ Noncompliant\n}\n<\/pre>\n<p>should be refactored into:<\/p>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          \/\/ Compliant\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/AgG7AQ\">CERT, MSC19-C<\/a> - For functions that return an array, prefer returning an empty array over a null value<\/li>\n<\/ul>","severity": "Major","tags": ["cert"]}]},{"key": "S1170","title": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","tags": ["convention"],"implementations": [{"key": "squid:S1170","language": "Java","title": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","description": "<p>Making a constant just <code>final<\/code> as opposed to <code>static final<\/code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;   \n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    \/\/ Compliant\n}\n<\/pre>\n<h2>Exceptions (for Java)<\/h2>\n\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:<\/p>\n<blockquote>\n<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00A78.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00A715.28).<\/p>\n<\/blockquote>","severity": "Minor","tags": ["convention"]}]},{"key": "S1171","title": "Only static class initializers should be used","tags": ["pitfall"],"implementations": [{"key": "squid:S1171","language": "Java","title": "Only static class initializers should be used","description": "<p>Non-static initializers are rarely used, and can be confusing for most developers.<\/p>\n<p>When possible, they should be refactored into standard constructors or field initializers.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    \/\/ Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n<\/pre>\n<p>or using Guava:<\/p>\n<pre>\nclass MyClass {\n  \/\/ Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1172","title": "Unused method parameters should be removed","tags": ["misra","unused"],"implementations": [{"key": "squid:S1172","language": "Java","title": "Unused method parameters should be removed","description": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvoid doSomething(int a, int b) {     \/\/ \"b\" is unused\n  compute(a);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes<\/code>, and methods that are intended to be overridden.<\/p>\n<pre>\n@override\nvoid doSomething(int a, int b) {     \/\/ no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  \/\/ designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  \/\/open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.<\/li>\n<li> MISRA C:2012, 2.7 - There should be no unused parameters in functions<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]},{"key": "php:S1172","language": "PHP","title": "Unused function parameters should be removed","description": "<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething($a, $b) { \/\/ \"$a\" is unused\n  return compute($b);\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>Functions in classes that override a class or implement interfaces are ignored.<\/p>\n<pre>\nclass C extends B {\n\n  function doSomething($a, $b) {     \/\/ no issue reported on $b\n    compute($a);\n  }\n\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C++:2008, 0-1-11<\/li>\n  <li>MISRA C:2012, 2.7<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "S1174","title": "\"Object.finalize()\" should remain protected (versus public) when overriding","tags": ["cwe","cert"],"implementations": [{"key": "squid:S1174","language": "Java","title": "\"Object.finalize()\" should remain protected (versus public) when overriding","description": "<p>The contract of the <code>Object.finalize()<\/code> method is clear: only the Garbage Collector is supposed to call this method.<\/p>\n<p>Making this method public is misleading, because it implies that any caller can use it.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    \/\/ Noncompliant\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/583.html\">MITRE, CWE-583<\/a> - finalize() Method Declared Public<\/li>\n<li> CERT Java Secure Coding, MET12-J - Do not use finalizers<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe"]}]},{"key": "S1175","title": "The signature of \"finalize()\" should match that of \"Object.finalize()\"","tags": ["pitfall"],"implementations": [{"key": "squid:S1175","language": "Java","title": "The signature of \"finalize()\" should match that of \"Object.finalize()\"","description": "<p><code>Object.finalize()<\/code> is called by the Garbage Collector sometime after the object becomes unreferenced.<\/p>\n<p>Overloading this method is misleading:<\/p>\n<ul>\n<li> The overload will not be called by the Garbage Collector.<\/li>\n<li> Users are not expected to call <code>Object.finalize()<\/code> and will get confused.<\/li>\n<\/ul>\n<p>Another name should be picked for the method.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic int finalize(int someParameter) {        \/\/ Noncompliant\n  \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic int someBetterName(int someParameter) {  \/\/ Compliant\n  \/* ... *\/\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1181","title": "Throwable and Error should not be caught","tags": ["cwe","error-handling","security","cert"],"implementations": [{"key": "squid:S1181","language": "Java","title": "Throwable and Error should not be caught","description": "<p><code>Throwable<\/code> is the superclass of all errors and exceptions in Java.<\/p>\n<p><code>Error<\/code> is the superclass of all errors, which are not meant to be caught by applications.<\/p>\n<p>Catching either <code>Throwable<\/code> or <code>Error<\/code> will also catch <code>OutOfMemoryError<\/code> and <code>InternalError<\/code>, from which an application should not attempt to recover.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ntry { \/* ... *\/ } catch (Throwable t) { \/* ... *\/ }  \ntry { \/* ... *\/ } catch (Error e) { \/* ... *\/ }   \n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ntry { \/* ... *\/ } catch (RuntimeException e) { \/* ... *\/ }\ntry { \/* ... *\/ } catch (MyException e) { \/* ... *\/ }\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/396.html\">MITRE, CWE-396<\/a> - Declaration of Catch for Generic Exception<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/BoB3AQ\">CERT, ERR07-J<\/a> - Do not throw RuntimeException, Exception, or Throwable<\/li>\n<\/ul>","severity": "Blocker","tags": ["cert","cwe","error-handling","security"]}]},{"key": "S1182","title": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","tags": ["cwe"],"implementations": [{"key": "squid:S1182","language": "Java","title": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","description": "<p><code>Cloneable<\/code> is the marker <code>Interface<\/code> that indicates that <code>clone()<\/code> may be called on an object. Overriding <code>clone()<\/code> without implementing <code>Cloneable<\/code> can be useful if you want to control how subclasses clone themselves, but otherwise, it's probably a mistake.<\/p>\n<p>The usual convention for <code>Object.clone()<\/code> according to Oracle's Javadoc is:<\/p>\n<ol>\n<li> <code>x.clone() != x<\/code><\/li>\n<li> <code>x.clone().getClass() == x.getClass()<\/code><\/li>\n<li> <code>x.clone().equals(x)<\/code><\/li>\n<\/ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()<\/code> helps to satisfy those invariants:<\/p>\n<ol>\n<li> <code>super.clone()<\/code> returns a new object instance<\/li>\n<li> <code>super.clone()<\/code> returns an object of the same type as the one <code>clone()<\/code> was called on<\/li>\n<li> <code>Object.clone()<\/code> performs a shallow copy of the object's state<\/li>\n<\/ol>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass BaseClass {  \/\/ Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    \/\/ Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  \/* Does not override clone() *\/\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              \/\/ Throws a ClassCastException because invariant #2 is violated\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    \/\/ Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  \/* Does not override clone() *\/\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              \/\/ Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/580.html\">MITRE, CWE-580<\/a> - clone() Method Without super.clone()<\/li>\n<\/ul>","severity": "Major","tags": ["cwe"]}]},{"key": "S1185","title": "Overriding methods should do more than simply call the same method in the super class","tags": ["clumsy"],"implementations": [{"key": "squid:S1185","language": "Java","title": "Overriding methods should do more than simply call the same method in the super class","description": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time this is justified is in <code>final<\/code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such overrides of <code>equals<\/code>, <code>hashCode<\/code> and <code>toString<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void doSomething() {                \n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {      \n  return super.isLegal(action);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\n@Override\npublic boolean isLegal(Action action) {         \/\/ Compliant - not simply forwarding the call\n  return super.isLegal(new Action(\/* ... *\/));\n}\n\n@Id\n@Override\npublic int getId() {                            \/\/ Compliant - there is annotation different from @Override\n  return super.getId();\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1185","language": "PHP","title": "Overriding methods should do more than simply call the same method in the super class","description": "<p>\n  Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time this is justified is in <code>final<\/code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such overrides of <code>equals<\/code>, <code>hashCode<\/code> and <code>toString<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  \/\/ Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    \/\/ do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nclass Child extends Parent {\n  \/\/ function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    \/\/ do something\n  }\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1186","title": "Methods should not be empty","tags": ["suspicious"],"implementations": [{"key": "squid:S1186","language": "Java","title": "Methods should not be empty","description": "<p>There are several reasons for a method not to have a method body:<\/p>\n<ul>\n  <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.<\/li>\n  <li>It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException<\/code> should be thrown.<\/li>\n  <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.<\/li>\n  <li>\n    There is a desire to provide a public, no-args constructor.\n    In this case, it can simply be omitted from the code; a default constructor will automatically be generated.\n  <\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n@Override\npublic void doSomething() {\n  \/\/ Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>An abstract class may have empty methods, in order to provide default implementations for child classes.<\/p>\n<pre>\npublic abstract class Animal {\n  void speak() {\n  }\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1188","title": "Lambdas and anonymous classes should not have too many lines","tags": ["java8"],"implementations": [{"key": "squid:S1188","language": "Java","title": "Lambdas and anonymous classes should not have too many lines","description": "<p>\nAnonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.\n<\/p>","severity": "Major","tags": ["java8"]}]},{"key": "S1190","title": "Future keywords should not be used as names","tags": ["obsolete","pitfall"],"implementations": [{"key": "squid:S1190","language": "Java","title": "Future keywords should not be used as names","description": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java, it will not be under modern versions. <\/p>\n<table>\n<tr><th>Keyword<\/th><th>Added<\/th><\/tr>\n<tr><td>assert<\/td><td>1.4<\/td><\/tr>\n<tr><td>const<\/td><td>reserved<\/td><\/tr>\n<tr><td>enum<\/td><td>5.0<\/td><\/tr>\n<tr><td>goto<\/td><td>reserved<\/td><\/tr>\n<tr><td>strictfp<\/td><td>1.2<\/td><\/tr>\n<\/table>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n<\/pre>","severity": "Major","tags": ["obsolete","pitfall"]}]},{"key": "S1191","title": "Classes from \"sun.*\" packages should not be used","tags": ["lock-in","pitfall"],"implementations": [{"key": "squid:S1191","language": "Java","title": "Classes from \"sun.*\" packages should not be used","description": "<p>Classes in the <code>sun.*<\/code> or <code>com.sun.*<\/code> packages are considered implementation details, and are not part of the Java API.<\/p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause problems when moving to a different Java vendor, such as OpenJDK.<\/p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nimport com.sun.jna.Native;     \/\/ Noncompliant\nimport sun.misc.BASE64Encoder; \/\/ Noncompliant\n<\/pre>","severity": "Major","tags": ["lock-in","pitfall"]}]},{"key": "S1192","title": "String literals should not be duplicated","tags": ["design"],"implementations": [{"key": "squid:S1192","language": "Java","title": "String literals should not be duplicated","description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<\/p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default threshold of 3:<\/p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              \/\/ Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            \/\/ Compliant - annotations are excluded\nprivate void method1() { \/* ... *\/ }\n@SuppressWarning(\"all\")\nprivate void method2() { \/* ... *\/ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               \/\/ Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       \/\/ Compliant - literal \"\" has less than 5 characters and is excluded\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nprivate static final String ACTION_1 = \"action1\";  \/\/ Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               \/\/ Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.<\/p>","severity": "Minor","tags": ["design"]},{"key": "php:S1192","language": "PHP","title": "String literals should not be duplicated","description": "<p>\n  Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n<\/p>\n<p>\n  On the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction run() {\n  prepare('action1');          \/\/ Non-Compliant - 'action1' is duplicated 3 times\n  execute('action1');\n  release('action1');\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nACTION_1 = 'action1';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.<\/p>","severity": "Minor","tags": ["design"]}]},{"key": "S1193","title": "Exception types should not be tested using \"instanceof\" in catch blocks","tags": ["error-handling","security"],"implementations": [{"key": "squid:S1193","language": "Java","title": "Exception types should not be tested using \"instanceof\" in catch blocks","description": "<p>\nMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\n<\/p>\n\n<p>For example, following code:<\/p>\n\n<pre>\ntry {\n  \/* ... *\/\n} catch (Exception e) {\n  if(e instanceof IOException) { \/* ... *\/ }         \/\/ Noncompliant\n  if(e instanceof NullPointerException{ \/* ... *\/ }  \/\/ Noncompliant\n}\n<\/pre>\n\n<p>should be refactored into:<\/p>\n\n<pre>\ntry {\n  \/* ... *\/\n} catch (IOException e) { \/* ... *\/ }                \/\/ Compliant\n} catch (NullPointerException e) { \/* ... *\/ }       \/\/ Compliant\n<\/pre>","severity": "Major","tags": ["error-handling","security"]}]},{"key": "S1194","title": "\"java.lang.Error\" should not be extended","tags": ["error-handling","security"],"implementations": [{"key": "squid:S1194","language": "Java","title": "\"java.lang.Error\" should not be extended","description": "<p><code>java.lang.Error<\/code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError<\/code>, which should only be encountered by the Java Virtual Machine.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyException extends Error { \/* ... *\/ }       \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class MyException extends Exception { \/* ... *\/ }   \/\/ Compliant\n<\/pre>","severity": "Critical","tags": ["error-handling","security"]}]},{"key": "S1195","title": "Array designators \"[]\" should be located after the type in method signatures","tags": ["convention"],"implementations": [{"key": "squid:S1195","language": "Java","title": "Array designators \"[]\" should be located after the type in method signatures","description": "<p>According to the Java Language Specification: <\/p>\n<blockquote>\n<p>For compatibility with older versions of the Java SE platform,<\/p>\n<p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.<\/p>\n<p>This obsolescent syntax should not be used in new code.<\/p>\n<\/blockquote>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int getVector()[] { \/* ... *\/ }    \/\/ Noncompliant\n\npublic int[] getMatrix()[] { \/* ... *\/ }  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int[] getVector() { \/* ... *\/ }\n\npublic int[][] getMatrix() { \/* ... *\/ } \n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1197","title": "Array designators \"[]\" should be on the type, not the variable","tags": ["convention"],"implementations": [{"key": "squid:S1197","language": "Java","title": "Array designators \"[]\" should be on the type, not the variable","description": "<p>\n  Array designators should always be located on the type for better code readability.\n  Otherwise, developers must look both at the type and the variable name to know whether or\n  not a variable is an array.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint matrix[][];   \/\/ Noncompliant\nint[] matrix[];   \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nint[][] matrix;   \/\/ Compliant\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1199","title": "Nested code blocks should not be used","tags": ["bad-practice"],"implementations": [{"key": "squid:S1199","language": "Java","title": "Nested code blocks should not be used","description": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    \/* ... *\/\n    case ADD: {                                \/\/ Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    \/* ... *\/\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    \/* ... *\/\n    case ADD:                                  \/\/ Compliant\n      evaluateAdd();\n      break;\n    \/* ... *\/\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S1201","title": "Methods named \"equals\" should override Object.equals(Object)","tags": ["suspicious"],"implementations": [{"key": "squid:S1201","language": "Java","title": "Methods named \"equals\" should override Object.equals(Object)","description": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)<\/code> to prevent any confusion.<\/p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object<\/code> as parameter, to save the class comparison check. However, this will not work as expected.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {                    \/\/ Noncompliant - \"equals\" method which does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));                  \/\/ Will display \"false\" because \"o2\" is of type \"Object\" and not \"MyClass\"\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {                     \/\/ Compliant - overrides Object.equals(Object)\n    if (o == null || !(o instanceof MyClass)) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  \/* ... *\/\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S1206","title": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","tags": ["cwe","bug","cert"],"implementations": [{"key": "squid:S1206","language": "Java","title": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","description": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)<\/code> and <code>hashCode()<\/code>:<\/p>\n<blockquote>\n<p>If two objects are equal according to the <code>equals(Object)<\/code> method, then calling the <code>hashCode<\/code> method on each of the two objects must produce the same integer result. <\/p>\n<p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)<\/code> method, then calling the <code>hashCode<\/code> method on each of the two objects must produce distinct integer results.<\/p>\n<p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.<\/p>\n<\/blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass MyClass {    \/\/ Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    \/* ... *\/\n  }\n\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {    \/\/ Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    \/* ... *\/\n  }\n\n  @Override\n  public int hashCode() {\n    \/* ... *\/\n  }\n\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/581.html\">MITRE, CWE-581<\/a> - Object Model Violation: Just One of Equals and Hashcode Defined<\/li>\n<li> CERT Java Secure Coding, MET09-J - Classes that define an equals() method must also define a hashCode() method<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cert","cwe"]}]},{"key": "S121","title": "Control structures should always use curly braces","tags": ["cwe","misra","cert","pitfall"],"implementations": [{"key": "php:S121","language": "PHP","title": "Control structures should always use curly braces","description": "<p>\n  While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement<\/li>\n  <li>MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement<\/li>\n  <li>MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement<\/li>\n  <li>MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement<\/li>\n  <li>MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/1QGMAg\">CERT, EXP19-C<\/a> - Use braces for the body of an if, for, or while statement<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","pitfall"]}]},{"key": "S1210","title": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","tags": ["bug"],"implementations": [{"key": "squid:S1210","language": "Java","title": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","description": "<p>\nAccording to the Java <code>Comparable.compareTo(T o)<\/code> documentation:\n<\/p>\n\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))<\/code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\nThe recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"\n<\/blockquote>\n\n<p>\nIf this rule is violated, weird and unpredictable failures can occur.\nFor example, in Java 5 the <code>PriorityQueue.remove()<\/code> method relied on <code>compareTo()<\/code>, but since Java 6 it relies on <code>equals()<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { \/* ... *\/ }      \/\/ Noncompliant as the equals(Object obj) method is not overridden\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { \/* ... *\/ }      \/\/ Compliant\n\n  @Override\n  public boolean equals(Object obj) { \/* ... *\/ }\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S1213","title": "The members of an interface declaration or class should appear in a pre-defined order","tags": ["convention"],"implementations": [{"key": "squid:S1213","language": "Java","title": "The members of an interface declaration or class should appear in a pre-defined order","description": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order in the source files:<\/p>\n<ul>\n<li> Class and instance variables<\/li>\n<li> Constructors<\/li>\n<li> Methods<\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Foo{ \n   private int field = 0;\n   public boolean isTrue() {...}     \n   public Foo() {...}                         \/\/ Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  \/\/Noncompliant, variable defined after constructors and methods\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Foo{ \n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1214","title": "Constants should not be defined in interfaces","tags": ["bad-practice"],"implementations": [{"key": "squid:S1214","language": "Java","title": "Constants should not be defined in interfaces","description": "<p>According to Joshua Bloch, author of \"Effective Java\":<\/p>\n\n<blockquote>\n<p>\nThe constant interface pattern is a poor use of interfaces.\n<\/p>\n\n<p>\nThat a class uses some constants internally is an implementation detail.\nImplementing a constant interface causes this implementation detail to leak into the class's exported API.\nIt is of no consequence to the users of a class that the class implements a constant interface.\nIn fact, it may even confuse them.\nWorse, it represents a commitment:\nif in a future release the class is modified so that it no longer needs to use the constants,\nit still must implement the interface to ensure binary compatibility.\nIf a nonfinal class implements a constant interface,\nall of its subclasses will have their namespaces polluted by the constants in the interface.\n<\/p>\n<\/blockquote>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ninterface Status {                      \/\/ Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic enum Status {                    \/\/ Compliant\n  OPEN,\n  CLOSED;\n}\n<\/pre>\n\n<p>or<\/p>\n\n<pre>\npublic final class Status {             \/\/ Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n<\/pre>","severity": "Minor","tags": ["bad-practice"]}]},{"key": "S1215","title": "Execution of the Garbage Collector should be triggered only by the JVM","tags": ["unpredictable","bad-practice"],"implementations": [{"key": "squid:S1215","language": "Java","title": "Execution of the Garbage Collector should be triggered only by the JVM","description": "<p>\nCalling <code>System.gc()<\/code> or <code>Runtime.getRuntime().gc()<\/code> is a bad idea for a simple reason:\nthere is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\n<\/p>\n\n<ul>\n  <li>Will the whole application be frozen during the call?<\/li>\n  <li>Is the -XX:DisableExplicitGC option activated?<\/li>\n  <li>Will the JVM simply ignore the call?<\/li>\n  <li>...<\/li>\n<\/ul>\n\n<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.<\/p>\n\n<p>The task of running the garbage collector should be left exclusively to the JVM.<\/p>","severity": "Major","tags": ["bad-practice","unpredictable"]}]},{"key": "S1217","title": "Thread.run() and Runnable.run() should not be called directly","tags": ["cwe","multi-threading","bug","cert"],"implementations": [{"key": "squid:S1217","language": "Java","title": "Thread.run() and Runnable.run() should not be called directly","description": "<p>The purpose of the <code>Thread.run()<\/code> and <code>Runnable.run()<\/code> methods is to execute code in a separate, dedicated thread. Calling those methods directly doesn't make sense because it causes their code to be executed in the current thread. <\/p>\n<p>To get the expected behavior, call the <code>Thread.start()<\/code> method instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); \/\/ Compliant\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/572.html\">MITRE, CWE-572<\/a> - Call to Thread run() instead of start()<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/KQAiAg\">CERT THI00-J<\/a> - Do not invoke Thread.run()<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert","cwe","multi-threading"]}]},{"key": "S1219","title": "\"switch\" statements should not contain non-case labels","tags": ["misra","suspicious","pitfall"],"implementations": [{"key": "squid:S1219","language": "Java","title": "\"switch\" statements should not contain non-case labels","description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   \/\/ Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  \/\/ Noncompliant; the code is correct and behaves as expected but is barely readable \n         \/* ... *\/\n        break foo;  \/\/ this break statement doesn't relate to the nesting case TUESDAY\n         \/* ... *\/\n    }\n    break;\n    \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); \/\/ put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    \/* ... *\/\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.\n<\/li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n<\/li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n<\/li><\/ul>","severity": "Major","tags": ["misra","suspicious"]},{"key": "javascript:S1219","language": "JavaScript","title": "\"switch\" statements should not contain non-case labels","description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.<\/p>\n<h2>Noncompliant Code Examples<\/h2>\n\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   \/\/ instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable <\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         \/* ... *\/\n        break foo;  \/\/ this break statement doesn't relate to the nesting case TUESDAY\n         \/* ... *\/\n    }\n    break;\n    \/* ... *\/\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<p>Case 1<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n<\/pre>\n<p>Case 2<\/p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); \/\/ put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    \/* ... *\/\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.<\/li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n<\/ul>","severity": "Critical","tags": ["misra","pitfall"]}]},{"key": "S122","title": "Statements should be on separate lines","tags": ["convention","psr2"],"implementations": [{"key": "php:S122","language": "PHP","title": "Statements should be on separate lines","description": "<p>\n  For better readability, do not put more than one statement on a single line.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(someCondition) doSomething();\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>Anonymous functions containing a single statement are ignored.<\/p>\n<pre>\n$max_comparator = function ($v) { return $v > 2; };           \/\/ Compliant\n$max_comparator = function ($v) { echo $v; return $v > 2; };  \/\/ Noncompliant\n<\/pre>","severity": "Minor","tags": ["convention","psr2"]}]},{"key": "S1220","title": "The default unnamed package should not be used","tags": ["convention"],"implementations": [{"key": "squid:S1220","language": "Java","title": "The default unnamed package should not be used","description": "<p>According to the Java Language Specification:<\/p>\n\n<blockquote>\nUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.\n<\/blockquote>\n\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass { \/* ... *\/ }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ \/* ... *\/ }\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1221","title": "Methods should not be named \"hashcode\" or \"equal\"","tags": ["bug","pitfall"],"implementations": [{"key": "squid:S1221","language": "Java","title": "Methods should not be named \"hashcode\" or \"equal\"","description": "<p>Naming a method <code>hashcode()<\/code> or <code>equal<\/code> is either:<\/p>\n<ul>\n<li> A bug in the form of a typo. Overriding <code>Object.hashCode()<\/code> (note the camelCasing) or <code>Object.equals<\/code> (note the 's' on the end) was meant, and the application does not behave as expected.<\/li>\n<li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.<\/li>\n<\/ul>\n<p>In both cases, the method should be renamed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic int hashcode() { \/* ... *\/ }  \/\/ Noncompliant\n\npublic boolean equal(Object obj) { \/* ... *\/ }  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\n@Override\npublic int hashCode() { \/* ... *\/ }\n\npublic boolean equals(Object obj) { \/* ... *\/ } \n<\/pre>","severity": "Critical","tags": ["bug","pitfall"]}]},{"key": "S1223","title": "Non-constructor methods should not have the same name as the enclosing class","tags": ["pitfall"],"implementations": [{"key": "squid:S1223","language": "Java","title": "Non-constructor methods should not have the same name as the enclosing class","description": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  \/\/ Compliant\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1226","title": "Method parameters, caught exceptions and foreach variables should not be reassigned","tags": ["misra","pitfall"],"implementations": [{"key": "squid:S1226","language": "Java","title": "Method parameters, caught exceptions and foreach variables should not be reassigned","description": "<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.<\/p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this<\/code> was forgotten.<\/p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.<\/p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.<\/p>\n<p>All parameters should be treated as <code>final<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    \/\/ Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      \/\/ Noncompliant\n\n    \/* additional logic *\/\n\n    return a;                       \/\/ Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  \/\/ Variable \"a\" will still hold 40 after this call\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               \/\/ Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   \/\/ Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2012, 17.8 - A function parameter should not be modified<\/li>\n<\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "S1244","title": "Floating point numbers should not be tested for equality","tags": ["bug","misra"],"implementations": [{"key": "squid:S1244","language": "Java","title": "Floating point numbers should not be tested for equality","description": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float<\/code> or a <code>double<\/code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.<\/p>\n<p>Even simple floating point assignments are not simple:<\/p>\n<pre>\nfloat f = 0.1; \/\/ 0.100000001490116119384765625\ndouble d = 0.1; \/\/ 0.1000000000000000055511151231257827021181583404541015625\n<\/pre>\n<p>(Results will vary based on compiler and compiler settings);<\/p>\n<p>Therefore, the use of the equality (<code>==<\/code>) and inequality (<code>!=<\/code>) operators on <code>float<\/code> or <code>double<\/code> values is almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java's float-handling <code>Numbers<\/code> such as <code>BigDecimal<\/code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN<\/code> and <code>Infinity<\/code> for instance).<\/p>\n<p>This rule checks for the use of direct and indirect equality\/inequailty tests on floats and doubles.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre> \nfloat myNumber = 3.146; \nif ( myNumber == 3.146f ) { \/\/Noncompliant. Because of floating point imprecision, this will be false \n  \/\/ ... \n} \nif ( myNumber != 3.146f ) { \/\/Noncompliant. Because of floating point imprecision, this will be true \n  \/\/ ... \n} \n\nif (myNumber &lt; 4 || myNumber &gt; 4) { \/\/ Noncompliant; indirect inequality test\n  \/\/ ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  \/\/ Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfloat zeroFloat = 0.0f;\nif (Float.floatToRawIntBits(zeroFloat) == 0) { \/\/Compliant for comparisons of zero. Using bit comparison ensures we compare zero values\n}\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Since <code>NaN<\/code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { \/\/ Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.<\/li>\n<li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","misra"]}]},{"key": "S125","title": "Sections of code should not be \"commented out\"","tags": ["misra","unused"],"implementations": [{"key": "php:S125","language": "PHP","title": "Sections of code should not be \"commented out\"","description": "<p>\n  Programmers should not comment out code as it bloats programs and reduces readability.<br\/>\n  Unused code should be deleted and can be retrieved from source control history if required.\n<\/p>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".<\/li>\n  <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.<\/li>\n  <li>MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C+ comments.<\/li>\n  <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "S1264","title": "A \"while\" loop should be used instead of a \"for\" loop","tags": ["clumsy"],"implementations": [{"key": "squid:S1264","language": "Java","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>\n  When only the condition expression is defined in a <code>for<\/code> loop, but the init and increment expressions are missing,\n  a <code>while<\/code> loop should be used instead to increase readability.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;condition;) { \/*...*\/ }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile (condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "javascript:S1264","language": "JavaScript","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>When only the condition expression is defined in a <code>for<\/code> loop, but the init and increment expressions are missing, a <code>while<\/code> loop should be used instead to increase readability. <\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (;condition;) { \/*...*\/ }\n<\/pre>\n\n\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile (condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1264","language": "PHP","title": "A \"while\" loop should be used instead of a \"for\" loop","description": "<p>\n  When only the condition expression is defined in a <code>for<\/code> loop, but the init and increment expressions are missing, a <code>while<\/code> loop should be used instead to increase readability.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor(;condition;) { \/*...*\/ }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nwhile(condition) { \/*...*\/ }\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S127","title": "\"for\" loop stop conditions should be invariant","tags": ["misra","pitfall"],"implementations": [{"key": "php:S127","language": "PHP","title": "\"for\" loop stop conditions should be invariant","description": "<p>\n  <code>for<\/code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\n<\/p>\n<p>\n  Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.\n<\/p>\n<p>\n  This rule tracks three types of non-invariant stop conditions:\n<\/p>\n<ul>\n  <li>When the loop counters are updated in the body of the <code>for<\/code> loop<\/li>\n  <li>When the stop condition depend upon a method call<\/li>\n  <li>When the stop condition depends on an object property, since such properties could change during the execution of the loop.<\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor ($i = 0; $i < 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i < 10; $i++) {\n  echo $i;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 13.6 - Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.<\/li>\n  <li>MISRA C++:2008, 6-5-3 - The loop-counter shall not be modified within condition or statement.<\/li>\n<\/ul>","severity": "Major","tags": ["misra","pitfall"]}]},{"key": "S128","title": "Switch cases should end with an unconditional \"break\" statement","tags": ["cwe","misra","cert","suspicious"],"implementations": [{"key": "squid:S128","language": "Java","title": "Switch cases should end with an unconditional \"break\" statement","description": "<p>\n  When the execution is not explicitly terminated at the end of a switch case,\n  it continues to execute the statements of the following case. While this is sometimes intentional,\n  it often is a mistake which leads to unexpected behavior.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  \/\/ Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>This rule is relaxed in the following cases:<\/p>\n<pre>\nswitch (myVariable) {\n  case 0:                                \/\/ Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                \/\/ Use of return statement\n    return;\n  case 3:                                \/\/ Use of throw statement\n    throw new IllegalStateException();\n  default:                               \/\/ For the last case, use of break statement is optional\n    doSomethingElse();\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.<\/li>\n  <li>MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause<\/li>\n  <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n  <li>MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause<\/li>\n  <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n  <li>MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/484.html\">MITRE, CWE-484<\/a> - Omitted Break Statement in Switch<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YIFLAQ\">CERT, MSC17-C<\/a> - Finish every set of statements associated with a case label with a break statement<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZoFLAQ\">CERT, MSC18-CPP<\/a> - Finish every set of statements associated with a case label with a break statement<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","suspicious"]}]},{"key": "S1301","title": "\"switch\" statements should have at least 3 \"case\" clauses","tags": ["misra"],"implementations": [{"key": "squid:S1301","language": "Java","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p><code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<\/p>\n<p>For just one or two cases however, the code will be more readable with <code>if<\/code> statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.<\/li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.<\/li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses<\/li>\n<\/ul>","severity": "Minor","tags": ["misra"]},{"key": "javascript:S1301","language": "JavaScript","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p><code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<\/p>\n<p>For just one or two cases however, the code will be more readable with <code>if<\/code> statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.<\/li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.<\/li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses<\/li>\n<\/ul>","severity": "Minor","tags": ["misra"]},{"key": "php:S1301","language": "PHP","title": "\"switch\" statements should have at least 3 \"case\" clauses","description": "<p>\n  <code>switch<\/code> statements are useful when there are many different cases depending on the value of the same expression.<br\/>\n  For just one or two cases however, the code will be more readable with <code>if<\/code> statements.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.<\/li>\n  <li>MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.<\/li>\n  <li>MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses<\/li>\n<\/ul>","severity": "Minor","tags": ["misra"]}]},{"key": "S131","title": "\"switch\" statements should end with a \"case default\" clause","tags": ["cwe","misra","cert"],"implementations": [{"key": "php:S131","language": "PHP","title": "\"switch\" statements should end with a \"case default\" clause","description": "<p>\n  The requirement for a final <code>[default|OTHERS]<\/code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch<\/code> covers all current values of an <code>enum<\/code>, a <code>default<\/code> case should still be used because there is no guarantee that the <code>enum<\/code> won't be extended.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch ($param) {  \/\/missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 15.0 - The MISRA C switch syntax shall be used.<\/li>\n  <li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause<\/li>\n  <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n  <li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause<\/li>\n  <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n  <li>MISRA C:2012, 16.4 - Every switch statement shall have a default label<\/li>\n  <li>MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C<\/a>  - Strive for logical completeness<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP<\/a> - Strive for logical completeness<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra"]}]},{"key": "S1313","title": "IP addresses should not be hardcoded","tags": ["security","cert"],"implementations": [{"key": "squid:S1313","language": "Java","title": "IP addresses should not be hardcoded","description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:<\/p>\n<ul>\n<li> a recompile is required if the address changes<\/li>\n<li> it forces the same address to be used in every environment (dev, sys, qa, prod)<\/li>\n<li> it places the responsibility of setting the value to use in production on the shoulders of the developer<\/li>\n<li> it allows attackers to decompile the code and thereby discover a potentially sensitive address<\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/qQCHAQ\">CERT, MSC03-J<\/a> - Never hard code sensitive information<\/li>\n<\/ul>","severity": "Critical","tags": ["cert","security"]}]},{"key": "S1317","title": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character","tags": ["pitfall"],"implementations": [{"key": "squid:S1317","language": "Java","title": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character","description": "<p>Instantiating a <code>StringBuilder<\/code> or a <code>StringBuffer<\/code> with a character is misleading because most Java developers would expect the character to be the initial value of the <code>StringBuffer<\/code>. <\/p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nStringBuffer foo = new StringBuffer('x');   \/\/equivalent to StringBuffer foo = new StringBuffer(120);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1319","title": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","tags": ["bad-practice"],"implementations": [{"key": "squid:S1319","language": "Java","title": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","description": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.<\/p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose type is a Java Collection interface.<\/p>\n<p>This rule raises an issue when an implementation class:<\/p>\n<ul>\n<li> is returned from a <code>public<\/code> method.<\/li>\n<li> is accepted as an argument to a <code>public<\/code> method.<\/li>\n<li> is exposed as a <code>public<\/code> member.<\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  \/\/ Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       \/\/ Noncompliant\n    return employees;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      \/\/ Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           \/\/ Compliant\n    return employees;\n  }\n}\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S134","title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","tags": ["brain-overload"],"implementations": [{"key": "squid:S134","language": "Java","title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","description": "<p>\nNested <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>switch<\/code>, and <code>try<\/code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n<\/p>\n<p>Such code is hard to read, refactor and therefore maintain.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>With the default threshold of 3:<\/p>\n<pre>\nif (condition1) {                  \/\/ Compliant - depth = 1\n  \/* ... *\/\n  if (condition2) {                \/\/ Compliant - depth = 2\n    \/* ... *\/\n    for(int i = 0; i &lt; 10; i++) {  \/\/ Compliant - depth = 3, not exceeding the limit\n      \/* ... *\/\n      if (condition4) {            \/\/ Noncompliant - depth = 4\n        if (condition5) {          \/\/ Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          \/* ... *\/\n        }\n        return;\n      }\n    }\n  }\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S134","language": "PHP","title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","description": "<p>\n  Nested <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>switch<\/code> and <code>try<\/code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n<\/p>\n<p>Such code is hard to read, refactor and therefore maintain.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.<\/p>\n<pre>\n  if (condition1) {                  \/\/ Compliant - depth = 1\n    ...\n    if (condition2) {                \/\/ Compliant - depth = 2\n      ...\n      for($ = 0; $i < 10; $i++) {  \/\/ Compliant - depth = 3, not exceeding the limit\n        ...\n        if (condition4) {            \/\/ Non-Compliant - depth = 4\n          if (condition5) {          \/\/ Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            ...\n          }\n          return;\n        }\n      }\n    }\n  }\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S135","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","tags": ["brain-overload"],"implementations": [{"key": "squid:S135","language": "Java","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","description": "<p>Restricting the number of <code>break<\/code> and <code>continue<\/code> statements in a loop is done in the interest of good structured programming. <\/p>\n<p>One <code>break<\/code> and <code>continue<\/code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     \/\/ Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S138","title": "Functions should not have too many lines","tags": ["brain-overload"],"implementations": [{"key": "javascript:S138","language": "JavaScript","title": "Functions should not have too many lines","description": "<p>\n  A function that grows too large tends to aggregate too many responsibilities.<\/br>\n  Such function inevitably become harder to understand and therefore harder to maintain.\n<\/p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n<\/p>\n<p>\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n<\/p>\n\n<h2>Exceptions<\/h2>\n<p>\n  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.\n<\/p>\n<pre>\n (function () { \/\/ Ignored by this rule\n\n  function open() {  \/\/ Classic function declaration; not ignored\n    \/\/ ...\n  }\n\n  function read() {\n    \/\/ ...\n  }\n\n  function readlines() {\n    \/\/ ...\n  }\n})();\n<\/pre>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S138","language": "PHP","title": "Functions should not have too many lines","description": "<p>\n  A function that grows too large tends to aggregate too many responsibilities.\n  Such function inevitably become harder to understand and therefore harder to maintain.\n<\/p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller function which focus on well-defined tasks.\n  Those smaller function will not only be easier to understand, but also probably easier to test.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S139","title": "Comments should not be located at the end of lines of code","tags": ["convention"],"implementations": [{"key": "php:S139","language": "PHP","title": "Comments should not be located at the end of lines of code","description": "<p>\n  This rule verifies that single-line comments are not located at the end of a line of code. The main idea behind this rule is that in order to be really readable,\n  trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible)\n  but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line\n  of code, where they will always be visible and properly formatted.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$a = $b + $c; \/\/ This is a trailing comment that can be very very long\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ This very long comment is better placed before the line of code\n$a = $b + $c;\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>By default, the property \"legalTrailingCommentPattern\" allows to ignore comments containing only one word :<\/p>\n<pre>\ndoSomething(); \/\/FIXME\n<\/pre>","severity": "Info","tags": ["convention"]}]},{"key": "S1442","title": "\"alert(...)\" should not be used","tags": ["cwe","security","user-experience"],"implementations": [{"key": "javascript:S1442","language": "JavaScript","title": "\"alert(...)\" should not be used","description": "<p>alert(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n<\/ul>","severity": "Major","tags": ["cwe","security","user-experience"]}]},{"key": "S1444","title": "\"public static\" fields should be constant","tags": ["cwe","security","cert"],"implementations": [{"key": "squid:S1444","language": "Java","title": "\"public static\" fields should be constant","description": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/500.html\">MITRE, CWE-500<\/a> - Public Static Field Not Marked Final<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QQBqAQ\">CERT OBJ10-J<\/a> - Do not use public static nonfinal variables<\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","security"]}]},{"key": "S1448","title": "Classes should not have too many methods","tags": ["brain-overload"],"implementations": [{"key": "php:S1448","language": "PHP","title": "Classes should not have too many methods","description": "<p>\n  A class that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor the class\n  into smaller ones which focus on well defined topics.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1452","title": "Generic wildcard types should not be used in return parameters","tags": ["pitfall"],"implementations": [{"key": "squid:S1452","language": "Java","title": "Generic wildcard types should not be used in return parameters","description": "<p>Using a wildcard as a return type implicitly means that the return parameter should be considered as read-only but without any way to enforce this contract. <\/p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't know. The consumer of a method should not have to deal with such disruptive questions. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1472","title": "Function call arguments should not start on new line","tags": ["pitfall"],"implementations": [{"key": "javascript:S1472","language": "JavaScript","title": "Function call arguments should not start on new line","description": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could lead to errors and most likely <em>will<\/em> lead to questions for maintainers.<\/p>\n<p>What was the initial purpose of the developer ?<\/p>\n<ol>\n<li> Was it to define a function and then to execute some unrelated code inside a closure ?<\/li>\n<li> Or to pass the second function as a parameter to the first one ?<\/li>\n<\/ol>\n<p>The first option will be the one chosen by the JavaScript interpreter..<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar fn = function () {\n  \/\/...\n}\n\n(function () { \/\/ Noncompliant\n  \/\/...\n})();\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<p>Either<\/p>\n<pre>\n\/\/ define a function\nvar fn = function () {\n  \/\/...\n}; \/\/ &lt;-- semicolon added\n\n\/\/ then execute some code inside a closure\n(function () {\n  \/\/...\n})();\n<\/pre>\n<p>Or <\/p>\n<pre>\nvar fn = function () {\n  \/\/...\n}(function () { \/\/ &lt;-- start function call arguments on same line\n  \/\/...\n})();\n<\/pre>\n<p>By extension and to improve readability, any kind of function call arguments should not start on new line.<\/p>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S1479","title": "\"switch\" statements should not have too many \"case\" clauses","tags": ["brain-overload"],"implementations": [{"key": "squid:S1479","language": "Java","title": "\"switch\" statements should not have too many \"case\" clauses","description": "<p>When <code>switch<\/code> statements have a large set of <code>case<\/code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.<\/p>","severity": "Major","tags": ["brain-overload"]},{"key": "php:S1479","language": "PHP","title": "\"switch\" statements should not have too many \"case\" clauses","description": "<p>\n  When <code>switch<\/code> statements have a large set of <code>case<\/code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1481","title": "Unused local variables should be removed","tags": ["unused"],"implementations": [{"key": "squid:S1481","language": "Java","title": "Unused local variables should be removed","description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   \/\/ seconds is never used \n  return hours * 60;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Major","tags": ["unused"]},{"key": "php:S1481","language": "PHP","title": "Unused local variables should be removed","description": "<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S1488","title": "Local Variables should not be declared and then immediately returned or thrown","tags": ["clumsy"],"implementations": [{"key": "squid:S1488","language": "Java","title": "Local Variables should not be declared and then immediately returned or thrown","description": "<p>Declaring a variable only to immediately return or throw it is a bad practice.\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]},{"key": "php:S1488","language": "PHP","title": "Local variables should not be declared and then immediately returned or thrown","description": "<p>\n  Declaring a variable only to immediately return [or throw] it is a bad practice.<br\/>\n  Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1523","title": "Code should not be dynamically injected and executed to prevent Eval Injection vulnerability","tags": ["cwe","security","owasp-a3"],"implementations": [{"key": "php:S1523","language": "PHP","title": "Code should not be dynamically injected and executed to prevent Eval Injection vulnerability","description": "<p>\n  The <code>eval<\/code> function is a way to run arbitrary code at run-time.\n<\/p>\n<p>According to the PHP documentation<\/p>\n<blockquote>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it without properly validating it beforehand.<\/blockquote>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\neval($code_to_be_dynamically_executed)\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/95.html\">MITRE CWE-95<\/a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')<\/li>\n  <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3<\/a> - Cross-Site Scripting (XSS)<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a3","security"]}]},{"key": "S1536","title": "Function argument names should be unique","tags": ["pitfall"],"implementations": [{"key": "php:S1536","language": "PHP","title": "Function argument names should be unique","description": "<p>\n  Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction compute($a, $a, $c) { \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction compute($a, $b, $c) { \/\/ Compliant\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S1541","title": "Functions should not be too complex","tags": ["brain-overload"],"implementations": [{"key": "php:S1541","language": "PHP","title": "Functions should not be too complex","description": "<p>\n  The cyclomatic complexity of functions should not exceed a defined threshold.\n  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n<\/p>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1596","title": "Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET","tags": ["obsolete","pitfall"],"implementations": [{"key": "squid:S1596","language": "Java","title": "Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET","description": "<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;<\/code> instead of raw ones such as just <code>List<\/code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...<\/code> fields of the <code>Collections<\/code> class return raw types, whereas the newer <code>empty...()<\/code> methods return generic ones.<\/p>\n<p>Developers will also more easily find the <code>emptyIterator()<\/code> and <code>emptyListIterator()<\/code> methods for which there is no field equivalent if they are used to call the methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n<\/pre>","severity": "Major","tags": ["obsolete","pitfall"]}]},{"key": "S1598","title": "Package declaration should match source file directory","tags": ["pitfall"],"implementations": [{"key": "squid:S1598","language": "Java","title": "Package declaration should match source file directory","description": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at \"src\/org\/sonarqube\/Foo.java\" should have a package of \"org.sonarqube\".<\/p>\n\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the \"com.apple\" package, which could degrade the maintainability of both the class and its application.<\/p>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1599","title": "Variable variables should not be used","tags": ["brain-overload"],"implementations": [{"key": "php:S1599","language": "PHP","title": "Variable variables should not be used","description": "<p>\n  PHP's variable variables feature is temptingly powerful, but can lead to unmaintainable code.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      \/\/Noncompliant\n$$$var = 'hello';  \/\/Noncompliant\n\necho $foo; \/\/will display 'bar'\necho $bar; \/\/will display 'hello'\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1600","title": "Deprecated predefined variables should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1600","language": "PHP","title": "Deprecated predefined variables should not be used","description": "<p>\n  The following predefined variables are deprecated and should be replaced by the new versions:\n<\/p>\n<table>\n  <tr>\n    <th>Replace<\/th>\n    <th>With<\/th>\n  <\/tr>\n  <tr>\n    <td>$HTTP_SERVER_VARS<\/td>\n    <td>$_SERVER<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_GET_VARS<\/td>\n    <td>$_GET<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_POST_VARS<\/td>\n    <td>$_POST<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_POST_FILES<\/td>\n    <td>$_FILES<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_SESSION_VARS<\/td>\n    <td>$_SESSION<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_ENV_VARS<\/td>\n    <td>$_ENV<\/td>\n  <\/tr>\n  <tr>\n    <td>$HTTP_COOKIE_VARS<\/td>\n    <td>$_COOKIE<\/td>\n  <\/tr>\n<\/table>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho 'Name parameter value: ' . $HTTP_GET_VARS[\"name\"];\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\necho 'Name parameter value: ' . $_GET[\"name\"];\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1602","title": "Lamdbas containing only one statement should not nest this statement in a block","tags": ["java8"],"implementations": [{"key": "squid:S1602","language": "Java","title": "Lamdbas containing only one statement should not nest this statement in a block","description": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    \/\/For return statement, the return keyword should also be dropped\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1603","title": "PHP 4 constructor declarations should not be used","tags": ["pitfall"],"implementations": [{"key": "php:S1603","language": "PHP","title": "PHP 4 constructor declarations should not be used","description": "<p>\n  In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and the \"__construct\" method name should be used instead.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S1604","title": "Anonymous inner classes containing only one method should become lambdas","tags": ["java8"],"implementations": [{"key": "squid:S1604","language": "Java","title": "Anonymous inner classes containing only one method should become lambdas","description": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may seem unwieldy and unclear.<\/p>\n\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyCollection.map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nmyCollection.map(element -&gt; new StringBuilder(element).reverse().toString());\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1605","title": "PHP 4 style calls to parent constructors should not be used in PHP5 \"__construct\" functions","tags": ["convention"],"implementations": [{"key": "php:S1605","language": "PHP","title": "PHP 4 style calls to parent constructors should not be used in PHP5 \"__construct\" functions","description": "<p>\n  In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with the PHP5 <code>__construct<\/code> name, nested calls to parent constructors should also use this new <code>_constructor<\/code> name.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n<\/pre>","severity": "Major","tags": ["convention"]}]},{"key": "S1609","title": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces","tags": ["java8"],"implementations": [{"key": "squid:S1609","language": "Java","title": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces","description": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable<\/code>, <code>java.awt.event.ActionListener<\/code>, <code>java.util.Comparator<\/code> and <code>java.util.concurrent.Callable<\/code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. <\/p>\n<p>Using <code>@FunctionalInterface<\/code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1610","title": "Abstract classes without fields should be converted to interfaces","tags": ["java8"],"implementations": [{"key": "squid:S1610","language": "Java","title": "Abstract classes without fields should be converted to interfaces","description": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1611","title": "Parentheses should be removed from a single lambda input parameter when its type is inferred","tags": ["java8"],"implementations": [{"key": "squid:S1611","language": "Java","title": "Parentheses should be removed from a single lambda input parameter when its type is inferred","description": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n(x) -> x * 2\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nx -> x * 2\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1612","title": "Lambdas should be replaced with method references","tags": ["java8"],"implementations": [{"key": "squid:S1612","language": "Java","title": "Lambdas should be replaced with method references","description": "<p>Method\/constructor references are more compact and readable than using lambdas, and are therefore preferred.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n    list.forEach(n -> { System.out.println(n); });\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n<\/pre>","severity": "Minor","tags": ["java8"]}]},{"key": "S1640","title": "Maps with keys that are enum values should be replaced with EnumMap","tags": ["performance"],"implementations": [{"key": "squid:S1640","language": "Java","title": "Maps with keys that are enum values should be replaced with EnumMap","description": "<p>\n  When all the keys of a Map are values from the same enum, the <code>Map<\/code> can be replaced with an <code>EnumMap<\/code>,\n  which can be much more efficient than other sets because the underlying data structure is a simple array.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S1656","title": "Variables should not be self-assigned","tags": ["bug","cert"],"implementations": [{"key": "javascript:S1656","language": "JavaScript","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cert"]},{"key": "php:S1656","language": "PHP","title": "Variables should not be self-assigned","description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cert"]}]},{"key": "S1659","title": "Multiple variables should not be declared on the same line","tags": ["convention"],"implementations": [{"key": "squid:S1659","language": "Java","title": "Multiple variables should not be declared on the same line","description": "<p>Declaring multiple variable on one line is difficult to read.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S1697","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","tags": ["bug"],"implementations": [{"key": "javascript:S1697","language": "JavaScript","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","description": "When either the equality operator in a test for <code>null<\/code> or <code>undefined<\/code>, or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is <code>null<\/code>\/<code>undefined<\/code>, leading to a guaranteed <code>TypeError<\/code>.\n\n<h2>Noncompliant Code Sample<\/h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != null || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str != undefined || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == null || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str == undefined || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]},{"key": "php:S1697","language": "PHP","title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals","description": "<p>\n  When either the equality operator in a null test or the logical operator that follows it is reversed,\n  the code has the appearance of safely null-testing the object before dereferencing it.\n  Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.\n<\/p>\n\n<h2>Noncompliant Code Sample<\/h2>\n\n<pre>\nif ($obj == null &amp;&amp; $obj->isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null || $obj->isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif ($obj == null || $obj->isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null &amp;&amp; !$obj->isOpen()) {\n  echo \"Object is not open\";\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S1700","title": "A field should not duplicate the name of its containing class","tags": ["brain-overload"],"implementations": [{"key": "squid:S1700","language": "Java","title": "A field should not duplicate the name of its containing class","description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.<\/p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Foo { \n  private String foo; \n\n  public String getFoo() { } \n} \n\nFoo foo = new Foo(); \nfoo.getFoo() \/\/ what does this return? \n<\/pre> \n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Foo {\n  private String name; \n\n  public String getName() { }\n}\n\n\/\/...\n\nFoo foo = new Foo();\nfoo.getName()\n\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. <\/p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "S1710","title": "Annotation repetitions should not be wrapped","tags": ["java8"],"implementations": [{"key": "squid:S1710","language": "Java","title": "Annotation repetitions should not be wrapped","description": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's no longer necessary, allowing for cleaner, more readable code.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@SomeAnnotations({\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n<\/pre>","severity": "Major","tags": ["java8"]}]},{"key": "S1763","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "php:S1763","language": "PHP","title": "Jump statements should not be followed by other statements","description": "<p>\n  Jump statements (<code>return<\/code>, <code>break<\/code>, <code>continue<\/code>, and <code>goto<\/code>) and <code>throw<\/code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted keystrokes lying in wait to confuse the unwary.\n<\/p>\n<p>\n  Rarely, as illustrated below, code after a jump or <code>throw<\/code> is reachable. However, such code is difficult to understand, and should be refactored.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             \/\/ this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    \/\/ do the job\n  }\n  return;\n\n  error:\n    printf(\"don't use 5\"); \/\/ this is reachable but unreadable\n\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    \/\/ do the job\n  }\n  return;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C++:2008, 0-1-9 - There shall be no dead code<\/li>\n  <li>MISRA C:2012, 2.2 - There shall be no dead code<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect or is never executed<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "S1764","title": "Identical expressions should not be used on both sides of a binary operator","tags": ["bug","cert"],"implementations": [{"key": "squid:S1764","language": "Java","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif ( a == a ) { \/\/ always true\n  doZ();\n}\nif ( a != a ) { \/\/ always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 \/ 5; \/\/always 1\nint k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nint j = 1;\nint k = 0;\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\nfloat f;\nif(f != f) { \/\/test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; \/\/ Compliant\nint j = a &lt;&lt; a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<li> Rule S1656 - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert"]},{"key": "javascript:S1764","language": "JavaScript","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>\n  Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n<\/p>\n\n<p>\nThis rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif ( a == a ) { \/\/ always true\n  doZ();\n}\nif ( a != a ) { \/\/ always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 \/ 5; \/\/always 1\nvar k = 5 - 5; \/\/always 0\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nvar j = 1;\nvar k = 0;\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN<\/code> and is therefore ignored.<\/p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\nif(f !== f) { \/\/ test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; \/\/ Compliant\nvar j = a &lt;&lt; a; \/\/ Noncompliant\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<li> Rule {rule:javascript:S1656} - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert"]},{"key": "php:S1764","language": "PHP","title": "Identical expressions should not be used on both sides of a binary operator","description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy\/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.<\/p>\n<p>This rule ignores <code>*<\/code>, <code>+<\/code>, and <code>=<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif ( $a == $a ) { \/\/ always true\n  doZ();\n}\nif ( $a != $a ) { \/\/ always false\n  doY();\n}\nif ( $a == $b &amp;&amp; $a == $b ) { \/\/ if the first one is true, the second one is too\n  doX();\n}\nif ( $a == $b || $a == $b ) { \/\/ if the first one is true, the second one is too\n  doW();\n}\n\n$j = 5 \/ 5; \/\/always 1\n$k = 5 - 5; \/\/always 0\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ndoZ();\n\nif ( $a == $b ) {\n  doX();\n}\nif ( $a == $b ) {\n  doW();\n}\n\n$j = 1;\n$k = 0;\n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.<\/p>\n<pre>\n$i = 1 &lt;&lt; 1; \/\/ Compliant\n$j = $a &lt;&lt; $a; \/\/ Noncompliant\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<li> Rule <a href='\/coding_rules#rule_key=php:S1656'>S1656<\/a> - Implements a check on <code>=<\/code>. <\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert"]}]},{"key": "S1788","title": "Method arguments with default value should be last","tags": ["bug","psr2"],"implementations": [{"key": "php:S1788","language": "PHP","title": "Method arguments with default value should be last","description": "<p>\nPHP is one of this powerful language allowing to define a default value for a method argument. But all method arguments with a default value should be declared after the method arguments without default value.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<p>In the following case, calling <code>makeyogurt(\"raspberry\")<\/code> won't lead to the expected result :<\/p>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavour){...}\n<\/pre>\n<p>The following warning will be generated at runtime: <code>Missing argument 2 in call to makeyogurt()<\/code><\/p>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction makeyogurt($flavour, $type = \"acidophilus\", ){...}\n<\/pre>","severity": "Critical","tags": ["bug","psr2"]}]},{"key": "S1844","title": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","tags": ["bug","pitfall"],"implementations": [{"key": "squid:S1844","language": "Java","title": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","description": "<p>From the Java API documentation:<\/p>\n<blockquote>\n<code>Condition<\/code> factors out the <code>Object<\/code> monitor methods (<code>wait<\/code>, <code>notify<\/code> and <code>notifyAll<\/code>) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations. Where a <code>Lock<\/code> replaces the use of <code>synchronized<\/code> methods and statements, a <code>Condition<\/code> replaces the use of the <code>Object<\/code> monitor methods.\n<\/blockquote>\n\nThe purpose of implementing the <code>Condition<\/code> interface is to gain access to its more nuanced <code>await<\/code> methods. Therefore, calling the method <code>Object.wait(...)<\/code> on a class implementing the <code>Condition<\/code> interface is silly and confusing.\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n<\/pre>","severity": "Blocker","tags": ["bug","pitfall"]}]},{"key": "S1845","title": "Methods and field names should not be the same or differ only by capitalization","tags": ["confusing"],"implementations": [{"key": "squid:S1845","language": "Java","title": "Methods and field names should not be the same or differ only by capitalization","description": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field with exactly the same name and visibility.<\/p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead added a new method with nearly the same name.<\/p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  \/\/ Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  \/\/ Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...} \n\n  public void driveFast(){...} \/\/Huh?\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  \/\/ field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...} \n\n  public void driveReallyFast(){...}\n\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S1848","title": "Objects should not be created to be dropped immediately without being used","tags": ["bug","unused"],"implementations": [{"key": "squid:S1848","language": "Java","title": "Objects should not be created to be dropped immediately without being used","description": "There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n<\/pre>","severity": "Critical","tags": ["bug","unused"]},{"key": "php:S1848","language": "PHP","title": "Objects should not be created to be dropped immediately without being used","description": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif ($x &lt; 0) {\n  new foo;  \/\/ Noncompliant\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\n$var = NULL;\nif ($x &lt; 0) {\n  $var = new foo;\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S1849","title": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"","tags": ["bug"],"implementations": [{"key": "squid:S1849","language": "Java","title": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"","description": "Calling <code>Iterator.hasNext()<\/code> is not supposed to have any side effects, and therefore should not change the state of the iterator. <code>Iterator.next()<\/code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()<\/code>, breaks the <code>hasNext()<\/code> contract, and will lead to unexpected behavior in production.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S1850","title": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed","tags": ["cwe","bug"],"implementations": [{"key": "squid:S1850","language": "Java","title": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed","description": "<p><code>instanceof<\/code> operators that always return <code>true<\/code> or <code>false<\/code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  if(param instanceof Number) {  \/\/Always true as param is an Integer, unless param is null\n    doSomething();\n  }\n...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571.html\">MITRE, CWE-571<\/a> - Expression is Always True<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570.html\">MITRE, CWE-570<\/a> - Expression is Always False<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cwe"]}]},{"key": "S1854","title": "Dead stores should be removed","tags": ["cwe","bug","cert","unused","suspicious"],"implementations": [{"key": "squid:S1854","language": "Java","title": "Dead stores should be removed","description": "<p>A dead store happens when a local variable is assigned a value, including <code>null<\/code> that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.<\/p>\n\n<p>Even assigning <code>null<\/code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i < b, i++) {\n    x = x * a;  \/\/Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/563.html\">MITRE, CWE-563<\/a> - Assignment to Variable without Use ('Unused Variable')<\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QYA5\">CERT, MSC13-C<\/a> - Detect and remove unused values<\/li>\n  <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/S4IyAQ\">CERT, MSC13-CPP<\/a> - Detect and remove unused values<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","suspicious","unused"]},{"key": "javascript:S1854","language": "JavaScript","title": "Dead Stores should be removed","description": "<p>\n  A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or\n  throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;  \/\/Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/563.html\">MITRE, CWE-563<\/a> - Assignment to Variable without Use ('Unused Variable')<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/QYA5\">CERT, MSC13-C<\/a> - Detect and remove unused values<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/S4IyAQ\">CERT, MSC13-CPP<\/a> - Detect and remove unused values<\/li>\n<\/ul>","severity": "Major","tags": ["bug","cert","cwe","unused"]}]},{"key": "S1858","title": "\"toString()\" should never be called on a String object","tags": ["clumsy","pitfall"],"implementations": [{"key": "squid:S1858","language": "Java","title": "\"toString()\" should never be called on a String object","description": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); \/\/ Noncompliant;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n<\/pre>","severity": "Major","tags": ["clumsy","pitfall"]}]},{"key": "S1860","title": "Synchronization should not be based on Strings or boxed primitives","tags": ["multi-threading","bug","cert"],"implementations": [{"key": "squid:S1860","language": "Java","title": "Synchronization should not be based on Strings or boxed primitives","description": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Specifically, <code>String<\/code> literals, and boxed primitives such as Integers should not be used as lock objects because they are pooled and reused. The story is even worse for <code>Boolean<\/code> objects, because there are only two instances of <code>Boolean<\/code>, <code>Boolean.TRUE<\/code> and <code>Boolean.FALSE<\/code> and every class that uses a Boolean will be referring to one of the two.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n  synchronized(iLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n  synchronized(sLock) {  \/\/ Noncompliant\n    \/\/ ...\n  }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    \/\/ ...\n  }\n  synchronized(lock2) {\n    \/\/ ...\n  }\n  synchronized(lock3) {\n    \/\/ ...\n  }\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/rQGeAQ\">CERT, LCK01-J<\/a> - Do not synchronize on objects that may be reused<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cert","multi-threading"]}]},{"key": "S1862","title": "Related \"if\/else if\" statements should not have the same condition","tags": ["bug","cert","unused","pitfall"],"implementations": [{"key": "squid:S1862","language": "Java","title": "Related \"if\/else if\" statements should not have the same condition","description": "<p>A chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true<\/code>. <\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n}\n\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert","pitfall","unused"]},{"key": "javascript:S1862","language": "JavaScript","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>\n  A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true<\/code>.\n<\/p>\n<p>\n  Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n<\/p>\n\n<p>\nFor a <code>switch<\/code>, if the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n<\/p>\n\n<p>\nOn the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n\n<h2>See<\/h2>\n  <ul>\n    <li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect <\/li>\n    <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a>- Detect and remove code that has no effect <\/li>\n  <\/ul>","severity": "Critical","tags": ["bug","cert","pitfall","unused"]},{"key": "php:S1862","language": "PHP","title": "Related \"if\/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","description": "<p>A <code>switch<\/code> and a chain of <code>if<\/code>\/<code>else if<\/code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true<\/code>.<\/p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy\/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.<\/p>\n<p>For a <code>switch<\/code>, if the first case ends with a <code>break<\/code>, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.<\/p>\n<p>On the other hand, if the first case does not end with a <code>break<\/code>, both cases will be executed, but future maintainers may not notice that.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 1)  \/\/ Noncompliant\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  case 1:  \/\/ Noncompliant\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 3)\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    \/\/...\n    break;\n  case 3:\n    \/\/...\n    break;\n  default:\n    \/\/ ...\n    break;\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert","pitfall","unused"]}]},{"key": "S1871","title": "Two branches in the same conditional structure should not have exactly the same implementation","tags": ["bug"],"implementations": [{"key": "javascript:S1871","language": "JavaScript","title": "Two branches in the same conditional structure should not have exactly the same implementation","description": "<p>\nHaving two <code>cases<\/code> in the same <code>switch<\/code> statement or branches in the same <code>if<\/code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if<\/code> structure or one should fall through to the other for a <code>switch<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a >= 0 && a < 10) || (a >= 20 && a < 50)) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>\n\n<p>or<\/p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>","severity": "Major","tags": ["bug"]},{"key": "php:S1871","language": "PHP","title": "Two branches in the same conditional structure should not have exactly the same implementation","description": "<p>Having two <code>cases<\/code> in the same <code>switch<\/code> statement or branches in the same <code>if<\/code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if<\/code> structure they should be combined, or for a <code>switch<\/code>, one should fall through to the other.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nswitch ($i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:  \/\/ Noncompliant; duplicates case 1's implementation\n    doSomething(); \n    break;\n  default: \n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  \/\/ Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest(); \n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); \/\/ Noncompliant; duplicates then-branch\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nswitch ($i) {\n  case 1: \n  case 3:\n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  default: \n    doTheRest();\n}\n\nif (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest(); \n}\n\ndoOneMoreThing();\n<\/pre>\n<p>or <\/p>\n<pre>\nswitch ($i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing(); \n    break;\n  default: \n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest(); \n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "S1872","title": "Classes should not be compared by name","tags": ["cwe","security","bug"],"implementations": [{"key": "squid:S1872","language": "Java","title": "Classes should not be compared by name","description": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted class and thereby gain trusted access. <\/p>\n<p>Instead, the <code>instanceof<\/code> operator should be used to check the object's underlying type.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  \/\/ Noncompliant\n      return true;  \/\/ Results in throwing away week-old computers\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n  }\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/486.html\">MITRE, CWE-486<\/a> - Comparison of Classes by Name<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cwe","security"]}]},{"key": "S1873","title": "\"static final\" arrays should be \"private\"","tags": ["cwe","security"],"implementations": [{"key": "squid:S1873","language": "Java","title": "\"static final\" arrays should be \"private\"","description": "<p>Public arrays, even ones declared <code>static final<\/code> can have their contents edited by malicious programs. The <code>final<\/code> keyword on an array declaration means that the array object itself may only be assigned once, but its contents are still mutable. Therefore making arrays <code>public<\/code> is a security risk.<\/p>\n<p>Instead, arrays should be private and accessed through methods.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Estate {\n  \/\/ Noncompliant; array contents can be modified\n  public static final String [] HEIRS = new String [] { \n    \"Betty\", \"Suzy\" };\n}\n\npublic class Malicious {\n  public void changeWill() {\n    Estate.HEIRS[0] = \"Biff\";\n    if (Estate.HEIRS.length &gt; 1) {\n      for (int i = 1; i &lt; Estate.HEIRS.length; i++) {\n        Estate.HEIRS[i] = \"\";\n      }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Estate {\n  private static final String [] HEIRS = new String [] { \n    \"Betty\", \"Suzy\" };\n\n  public String [] getHeirs() {\n    \/\/ return copy of HEIRS\n  }\n}\n\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/582.html\">MITRE, CWE-582<\/a> - Array Declared Public, Final, and Static<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/607.html\">MITRE, CWE-607<\/a> - Public Static Final Field References Mutable Object<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","security"]}]},{"key": "S1905","title": "Redundant casts should not be used","tags": ["clumsy"],"implementations": [{"key": "squid:S1905","language": "Java","title": "Redundant casts should not be used","description": "<p>Unnecessary casting expressions make the code harder to read and understand.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  \/\/ Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n  \/\/...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    \/\/...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:<\/p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); \/\/call the first method so cast is not redundant.\n  }\n}\n<\/pre>","severity": "Minor","tags": ["clumsy"]}]},{"key": "S1948","title": "Fields in a \"Serializable\" class should either be transient or serializable","tags": ["cwe","serialization","bug"],"implementations": [{"key": "squid:S1948","language": "Java","title": "Fields in a \"Serializable\" class should either be transient or serializable","description": "<p>Fields in a <code>Serializable<\/code> class must themselves be either <code>Serializable<\/code> or <code>transient<\/code> even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable<\/code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Address {\n  \/\/...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  \/\/ Noncompliant; Address isn't serializable\n}\n<\/pre>\n\n<h2>Compliant Example<\/h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>The alternative to making all members <code>serializable<\/code> or <code>transient<\/code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:<\/p>\n\n<pre>\nprivate void writeObject(java.io.ObjectOutputStream out) throws IOException\nprivate void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;\n<\/pre>\n\n<h2>See<\/h2>\n    <ul>\n      <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/594.html\">MITRE, CWE-594<\/a> - Saving Unserializable Objects to Disk<\/li>\n      <li><a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/io\/Serializable.html\">Oracle Java 6, Serializable<\/a><\/li>\n      <li><a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/io\/Serializable.html\">Oracle Java 7, Serializable<\/a><\/li>\n    <\/ul>","severity": "Critical","tags": ["bug","cwe","serialization"]}]},{"key": "S1989","title": "Exceptions should not be thrown from servlet methods","tags": ["cwe","error-handling","security","cert","owasp-a6"],"implementations": [{"key": "squid:S1989","language": "Java","title": "Exceptions should not be thrown from servlet methods","description": "<p>\n  Even though the signatures for methods in a servlet include <code>throws IOException, ServletException<\/code>,\n  it's a bad idea to let such exceptions be thrown.\n  Failure to catch exceptions in a servlet could leave a system in a vulnerable state,\n  possibly resulting in denial-of-service attacks, or the exposure of sensitive information because when\n  a servlet throws an exception, the servlet container typically sends debugging information back to the user.\n  And that information which could be very valuable to an attacker.\n<\/p>\n<p>\n  This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); \/\/ Noncompliant; getByName(String) throws UnknownHostException\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    \/\/...\n  }\n  catch (UnknownHostException uhex) {\n    \/\/...\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/600.html\">MITRE, CWE-600<\/a> - Uncaught Exception in Servlet<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/s4EVAQ\">CERT, ERR01-J<\/a> - Do not allow exceptions to expose sensitive information<\/li>\n  <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten Category A6<\/a> - Sensitive Data Exposure<\/li>\n<\/ul>","severity": "Critical","tags": ["cert","cwe","error-handling","owasp-a6","security"]}]},{"key": "S1994","title": "\"for\" loop incrementers should modify the variable being tested in the loop's stop condition","tags": ["bug","suspicious"],"implementations": [{"key": "squid:S1994","language": "Java","title": "\"for\" loop incrementers should modify the variable being tested in the loop's stop condition","description": "<p>It is almost always an error when a <code>for<\/code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 0; i < 10; j++) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 0; i < 10; i++) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]},{"key": "javascript:S1994","language": "JavaScript","title": "\"for\" loop incrementers should modify the variable being tested in the loop's stop condition","description": "<p>It is almost always an error when a <code>for<\/code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S1998","title": "References should not be passed to function calls","tags": ["cwe","performance","obsolete"],"implementations": [{"key": "php:S1998","language": "PHP","title": "References should not be passed to function calls","description": "<p>\n  Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as well, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly, particularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than more efficient.\n<\/p>\n<p>\n  Further, according to the PHP manual:\n<\/p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that \"call-time pass-by-reference\" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nmyfun(&$name);  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nmyfun($name);\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/374\">MITRE, CWE-374<\/a> - Weakness Base Passing Mutable Objects to an Untrusted Method<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","obsolete","performance"]}]},{"key": "S2010","title": "\"&&\" and \"||\" should be used","tags": ["suspicious"],"implementations": [{"key": "php:S2010","language": "PHP","title": "\"&&\" and \"||\" should be used","description": "<p>\n  PHP has two sets of logical operators: <code>&amp;<\/code> \/ <code>||<\/code>, and <code>and<\/code> \/ <code>or<\/code>. The difference between the sets is precedence. Because <code>and<\/code> \/ <code>or<\/code> have a lower precedence than almost any other operator, using them instead of <code>&&<\/code> \/ <code>||<\/code> may not have the result you expect.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  \/\/ Noncompliant. $take_vacation == true.\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time && $have_money;  \/\/ $take_vacation == false.\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S2014","title": "\"$this\" should not be used in a static context","tags": ["bug"],"implementations": [{"key": "php:S2014","language": "PHP","title": "\"$this\" should not be used in a static context","description": "<p>\n  <code>$this<\/code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this<\/code> is not available to them. Using <code>$this<\/code> in a static context will result in runtime errors.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo(){\n    if ($this->name != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Clazz {\n  $name=NULL;  \/\/ instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      \/\/ ...\n    }\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2037","title": "Static members should be referenced with \"static::\"","tags": ["pitfall"],"implementations": [{"key": "php:S2037","language": "PHP","title": "Static members should be referenced with \"static::\"","description": "<p>\n  References in a class to static class members (fields or methods) can be made using either <code>self::$var<\/code> or <code>static::$var<\/code> (introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::<\/code> references the original definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::<\/code>, on the other hand, references the class that was called at runtime.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        self::getStatus();                  \/\/ Noncompliant; will always print \"Sticks are fun!\" even when called from a subclass which overrides this method;\n    }\n\n    protected static function getStatus() {\n        echo \"Sticks are fun!\";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() { \/\/ Doesn't actually get called\n        echo \"Balls are fun!\";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();                          \/\/ Will print \"Sticks are fun!\"\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        static::getStatus();   \/\/ Compliant\n    }\n\n    protected static function getStatus() {\n        echo \"Sticks are fun!\";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {\n        echo \"Balls are fun!\";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();             \/\/ Will print \"Balls are fun!\"\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>\n  No issue is raised when <code>self<\/code> is used in a class field declaration\n<\/p>\n<pre>\nclass A {\n   const CONSTANT;\n\n   public $arr = array(\n        self::CONSTANT         \/\/ Compliant\n   );\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2041","title": "Parentheses should not be used for calls to \"echo\"","tags": ["pitfall"],"implementations": [{"key": "php:S2041","language": "PHP","title": "Parentheses should not be used for calls to \"echo\"","description": "<p>\n  <code>echo<\/code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses with multiple arguments will result in a parse error.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\necho(\"Hello\");  \/\/ Noncompliant, but it works\necho(\"Hello\", \"World\"); \/\/ Noncompliant. Parse error\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\necho \"Hello\";\necho \"Hello\",\"World!\";\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2055","title": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","tags": ["serialization","bug"],"implementations": [{"key": "squid:S2055","language": "Java","title": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","description": "<p>When a <code>Serializable<\/code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until the final object has been instantiated.<\/p>\n\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a <code>Serializable<\/code> class must have a no-arg constructor. Otherwise the class is <code>Serializable<\/code> but not deserializable.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {  \/\/ Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  \/\/ Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n<\/pre>","severity": "Critical","tags": ["bug","serialization"]}]},{"key": "S2061","title": "Custom serialization method signatures should meet requirements","tags": ["bug"],"implementations": [{"key": "squid:S2061","language": "Java","title": "Custom serialization method signatures should meet requirements","description": "Writers of <code>Serializable<\/code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they will be ignored and the default serialization mechanisms will kick back in. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Watermelon implements Serializable {\n  \/\/ ...\n  void writeObject(java.io.ObjectOutputStream out)\/\/ Noncompliant; not private\n        throws IOException  \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  \/\/ Noncompliant; not private \n  {...}\n\n  static Object readResolve() throws ObjectStreamException  \/\/ Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException \/\/ Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n} \n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Watermelon implements Serializable {\n  \/\/ ...\n  private void writeObject(java.io.ObjectOutputStream out) \n        throws IOException \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2065","title": "Fields in non-serializable classes should not be \"transient\"","tags": ["serialization","unused"],"implementations": [{"key": "squid:S2065","language": "Java","title": "Fields in non-serializable classes should not be \"transient\"","description": "<code>transient<\/code> is used to mark fields in a <code>Serializable<\/code> class which will not be written out to file (or stream). In a class that does not implement <code>Serializable<\/code>, this modifier is simply wasted keystrokes, and should be removed.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Vegetable {  \/\/ does not implement Serializable\n  private transient Season ripe;  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  \/\/ ...\n}\n<\/pre>","severity": "Minor","tags": ["serialization","unused"]}]},{"key": "S2066","title": "\"Serializable\" inner classes of non-serializable classes should be \"static\"","tags": ["serialization","bug"],"implementations": [{"key": "squid:S2066","language": "Java","title": "\"Serializable\" inner classes of non-serializable classes should be \"static\"","description": "<p>Serializing a non-<code>static<\/code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not serializable, then serialization will fail, resulting in a runtime error.<\/p>\n\n<p>Making the inner class <code>static<\/code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static<\/code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: \n<ul>\n  <li>an inner class can only be instantiated within the context of an instance of the outer class.<\/li>\n  <li>a nested (<code>static<\/code>) class can be instantiated independently of the outer class.<\/li>\n<\/ul>\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Pomegranate {\n  \/\/ ...\n\n  public class Seed implements Serializable {  \/\/ Noncompliant; serialization will fail\n    \/\/ ...\n  }\n} \n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Pomegranate {\n  \/\/ ...\n\n  public static class Seed implements Serializable {\n    \/\/ ...\n  }\n} \n<\/pre>","severity": "Critical","tags": ["bug","serialization"]}]},{"key": "S2068","title": "Credentials should not be hard-coded","tags": ["cwe","security","sans-top25-porous","owasp-a2"],"implementations": [{"key": "squid:S2068","language": "Java","title": "Credentials should not be hard-coded","description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.<\/p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=steve&amp;password=blue\"); \/\/ Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql:\/\/localhost\/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/798\">MITRE, CWE-798<\/a> - Use of Hard-coded Credentials<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/259\">MITRE, CWE-259<\/a> - Use of Hard-coded Password<\/li>\n<li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> - Broken Authentication and Session Management<\/li>\n<li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password<\/a><\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a2","sans-top25-porous","security"]},{"key": "php:S2068","language": "PHP","title": "Credentials should not be hard-coded","description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.<\/p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/798\">MITRE, CWE-798<\/a> - Use of Hard-coded Credentials<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/259\">MITRE, CWE-259<\/a> - Use of Hard-coded Password<\/li>\n<li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> - Broken Authentication and Session Management<\/li>\n<li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password<\/a><\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a2","sans-top25-porous","security"]}]},{"key": "S2077","title": "Values passed to SQL commands should be sanitized","tags": ["cwe","owasp-a1","security","sans-top25-insecure","hibernate","sql"],"implementations": [{"key": "squid:S2077","language": "Java","title": "Values passed to SQL commands should be sanitized","description": "<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.<\/p>\n<p>This rule checks that method parameters are not used directly in non-Hibernate SQL statements, and that parameter binding, rather than concatenation is used in Hibernate statements.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); \/\/ Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  \/\/ Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  \/\/ Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    \/\/...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  \/\/ Compliant\n            \"FROM students where fname = \" + userInput);  \/\/ Noncompliant; parameter binding should be used instead\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  \/\/ Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    \/\/...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  \/\/ Parameter binding escapes all input\n  \/\/ ...\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/89\">MITRE, CWE-89<\/a> - Improper Neutralization of Special Elements used in an SQL Command<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/564.html\">MITRE, CWE-564<\/a> - SQL Injection: Hibernate<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/20.html\">MITRE, CWE-20<\/a> - Improper Input Validation<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/943.html\">MITRE, CWE-943<\/a> - Improper Neutralization of Special Elements in Data Query Logic<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1<\/a> - Injection<\/li>\n<li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Insecure Interaction Between Components<\/li>\n<li> Derived from FindSecBugs rules <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_JPA\">Potential SQL\/JPQL Injection (JPA)<\/a>, <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_JDO\">Potential SQL\/JDOQL Injection (JDO)<\/a>, <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL\/HQL Injection (Hibernate)<\/a><\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","hibernate","owasp-a1","sans-top25-insecure","security","sql"]}]},{"key": "S2092","title": "Cookies should be \"secure\"","tags": ["cwe","security","owasp-a6","owasp-a2"],"implementations": [{"key": "squid:S2092","language": "Java","title": "Cookies should be \"secure\"","description": "<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon. Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nCookie c = new Cookie(SECRET, secret);  \/\/ Noncompliant; cookie is not secure\nresponse.addCookie(c);\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/614\">MITRE, CWE-614<\/a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n<\/li><li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> - Broken Authentication and Session Management\n<\/li><li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure\n<\/li><\/ul>","severity": "Critical","tags": ["cwe","owasp-a2","owasp-a6","security"]}]},{"key": "S2093","title": "Try-with-resources should be used","tags": ["pitfall"],"implementations": [{"key": "squid:S2093","language": "Java","title": "Try-with-resources should be used","description": "<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer to bullet-proof, it should be preferred over the older <code>try<\/code>\/<code>catch<\/code>\/<code>finally<\/code> version.<\/p>\n<p>This rule checks that <code>close<\/code>-able resources are opened in a try-with-resources statement.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n<\/pre>\n<p>or<\/p>\n<pre>\ntry (BufferedReader br = \n        new BufferedReader(new FileReader(fileName))) { \/\/ no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2094","title": "Classes should not be empty","tags": ["clumsy"],"implementations": [{"key": "squid:S2094","language": "Java","title": "Classes should not be empty","description": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an <code>interface<\/code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be eliminated.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Nothing {  \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic interface Nothing {\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Empty classes can be used as marker types (for spring for instance), therefore annotated empty classes won't raise any issue.<\/p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic class ApplicationConfiguration {\n\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2095","title": "Resources should be closed","tags": ["cwe","leak","security","denial-of-service","bug","cert"],"implementations": [{"key": "squid:S2095","language": "Java","title": "Resources should be closed","description": "<p>Java's garbage collection cannot be relied on to clean up everything. Specifically, connections, streams, files and other classes that implement the <code>Closeable<\/code> interface or it's super-interface, <code>AutoCloseable<\/code>, must be manually closed after creation. Failure to do so will result in a resource leak which could bring first the application and then perhaps the box it's on to their knees.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nOutputStream stream = null;\ntry{\n  for (String property : propertyList) {\n    stream = new FileOutputStream(\"myfile.txt\");  \/\/ Noncompliant\n    \/\/ ...\n  }\n}catch(Exception e){\n  \/\/ ...\n}finally{\n  stream.close();  \/\/ Multiple streams were opened. Only the last is closed.\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nOutputStream stream = null;\ntry{\n  stream = new FileOutputStream(\"myfile.txt\");\n  for (String property : propertyList) {\n    \/\/ ...\n  }\n}catch(Exception e){\n  \/\/ ...\n}finally{\n  stream.close();\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables<\/code>. All resources opened in a try-with-resources statement are ignored by this rule.<\/p>\n\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  \/\/...\n}\ncatch ( ... ) {\n  \/\/...\n}\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/459.html\">MITRE, CWE-459<\/a> - Incomplete Cleanup<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/9gFqAQ\">CERT, FIO04-J<\/a> - Release resources when they are no longer needed<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cert","cwe","denial-of-service","leak","security"]}]},{"key": "S2097","title": "\"equals(Object obj)\" should test argument type","tags": ["bug"],"implementations": [{"key": "squid:S2097","language": "Java","title": "\"equals(Object obj)\" should test argument type","description": "<p>Because the <code>equals<\/code> method takes a generic <code>Object<\/code> as a parameter, any type of object may be passed to it. The method should not assume it will only be used to test objects of its class type. It must instead check the parameter's type.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  \/\/ ...\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2109","title": "Reflection should not be used to check non-runtime annotations","tags": ["bug"],"implementations": [{"key": "squid:S2109","language": "Java","title": "Reflection should not be used to check non-runtime annotations","description": "<p>The writer of an annotation can set one of three retention policies for it:<\/p>\n<ul>\n  <li><code>RetentionPolicy.SOURCE<\/code> - these annotations are dropped during compilation, E.G. <code>@Override<\/code>, <code>@SuppressWarnings<\/code>.<\/li>\n  <li><code>RetentionPolicy.CLASS<\/code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.<\/li>\n  <li><code>RetentionPolicy.RUNTIME<\/code> - these annotations are present in the class file and loaded into the JVM.<\/li>\n<\/ul>\n<p>Only annotations that have been given a <code>RUNTIME<\/code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply\n  an error, since the test will always return false.<\/p>\n\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME<\/code> retention.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  \/\/ Noncompliant; test will always return false, even when @Override is present in the code\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2110","title": "Invalid \"Date\" values should not be used","tags": ["bug"],"implementations": [{"key": "squid:S2110","language": "Java","title": "Invalid \"Date\" values should not be used","description": "<p>Whether the valid value ranges for <code>Date<\/code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you'll get January of the following year.<\/p>\n\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date<\/code>, <code>java.sql.Date<\/code>, and <code>java.util.Calendar<\/code>. Specifically, values outside of the valid ranges:<\/p>\n<table>\n  <thead>\n  <tr><td>Field<\/td> <td>Valid<\/td><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>month<\/td><td>0-11<\/td><\/tr>\n    <tr><td>date (day)<\/td><td>0-31<\/td><\/tr>\n    <tr><td>hour<\/td><td>0-23<\/td><\/tr>\n    <tr><td>minute<\/td><td>0-60<\/td><\/tr>\n    <tr><td>second<\/td><td>0-61<\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  \/\/ Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  \/\/ Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  \/\/ Noncompliant; invalid comparison\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2111","title": "\"BigDecimal(double)\" should not be used","tags": ["bug","cert"],"implementations": [{"key": "squid:S2111","language": "Java","title": "\"BigDecimal(double)\" should not be used","description": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)<\/code> constructor. <\/p>\n<p>From <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/math\/BigDecimal.html#BigDecimal(double)\">the JavaDocs<\/a>:<\/p>\n<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.<\/blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf<\/code>, which uses a string under the covers to eliminate floating point rounding errors.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); \/\/ Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); \/\/ Noncompliant; same result\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NQAVAg\">CERT, NUM10-J<\/a> - Do not construct BigDecimal objects from floating-point literals<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert"]}]},{"key": "S2112","title": "\"URL.hashCode\" and \"URL.equals\" should be avoided","tags": ["performance"],"implementations": [{"key": "squid:S2112","language": "Java","title": "\"URL.hashCode\" and \"URL.equals\" should be avoided","description": "<p>The <code>equals<\/code> and <code>hashCode<\/code> methods of <code>java.net.URL<\/code> both make calls out to the Internet and are blocking operations. <code>URI<\/code> on the other hand makes no such calls and should be used instead unless the specific <code>URL<\/code> functionality is required.<\/p>\n\n<p>This rule checks for uses of <code>URL<\/code>'s in <code>Map<\/code> and <code>Set<\/code>, and for explicit calls to the <code>equals<\/code> and <code>hashCode<\/code> methods.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL> sites = new HashSet&lt;URL&gt;();  \/\/ Noncompliant\n\n  URL homepage = new URL(\"http:\/\/sonarsource.com\");  \/\/ Compliant\n  if (homepage.equals(url)) { \/\/ Noncompliant\n    \/\/ ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  \/\/ Compliant\n\n  URI homepage = new URI(\"http:\/\/sonarsource.com\");  \/\/ Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  \/\/ Compliant\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2114","title": "Collections should not be passed as arguments to their own methods","tags": ["bug"],"implementations": [{"key": "squid:S2114","language": "Java","title": "Collections should not be passed as arguments to their own methods","description": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code.<\/p>\n\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\n  objs.add(\"Hello\");\n\n  objs.add(objs); \/\/ Noncompliant; StackOverflowException if objs.hashCode() called\n  objs.addAll(objs); \/\/ Noncompliant; behavior undefined\n  objs.containsAll(objs); \/\/ Noncompliant; always true\n  objs.removeAll(objs); \/\/ Noncompliant; confusing. Use clear() instead\n  objs.retainAll(objs); \/\/ Noncompliant; NOOP\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2116","title": "\"hashCode\" and \"toString\" should not be called on array instances","tags": ["bug"],"implementations": [{"key": "squid:S2116","language": "Java","title": "\"hashCode\" and \"toString\" should not be called on array instances","description": "While <code>hashCode<\/code> and <code>toString<\/code> are available on arrays, they are largely useless. <code>hashCode<\/code> returns the array's \"identity hash code\", and <code>toString<\/code> returns nearly the same value. Neither method's output actually reflects the array's contents. Instead, you should pass the array to the relevant static <code>Arrays<\/code> method.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); \/\/ Noncompliant\n    int argHash = args.hashCode(); \/\/ Noncompliant\n\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2118","title": "Non-serializable classes should not be written","tags": ["serialization","bug"],"implementations": [{"key": "squid:S2118","language": "Java","title": "Non-serializable classes should not be written","description": "Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable<\/code> or one that extends such a class can successfully be serialized (or de-serialized).\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Vegetable {  \/\/ neither implements Serializable nor extends a class that does\n  \/\/...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    \/\/...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  \/\/ Noncompliant. Nothing will be written\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Vegetable implements Serializable {  \/\/ can now be serialized\n  \/\/...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    \/\/...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug","serialization"]}]},{"key": "S2122","title": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads","tags": ["bug"],"implementations": [{"key": "squid:S2122","language": "Java","title": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads","description": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor<\/code>'s pool is sized with <code>corePoolSize<\/code>, so setting <code>corePoolSize<\/code> to zero means the executor will have no threads and run nothing.<\/p>\n<p>This rule detects instances where <code>corePoolSize<\/code> is set to zero, via either its setter or the object constructor.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); \/\/ Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  \/\/ Noncompliant\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2123","title": "Values should not be uselessly incremented","tags": ["bug"],"implementations": [{"key": "squid:S2123","language": "Java","title": "Values should not be uselessly incremented","description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; \/\/ Noncompliant; i is still zero\n\n  return j++; \/\/ Noncompliant; 0 returned\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++; \n  return ++j; \n}\n<\/pre>","severity": "Critical","tags": ["bug"]},{"key": "javascript:S2123","language": "JavaScript","title": "Values should not be uselessly incremented","description": "A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar i = 0;\ni = i++; \/\/ Noncompliant; i is still zero\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar i = 0;\ni++;\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2127","title": "\"Double.longBitsToDouble\" should not be used for \"int\"","tags": ["bug"],"implementations": [{"key": "squid:S2127","language": "Java","title": "\"Double.longBitsToDouble\" should not be used for \"int\"","description": "<p><code>Double.longBitsToDouble<\/code> expects a 64-bit, <code>long<\/code> argument. Pass it a smaller value, such as an <code>int<\/code> and the mathematical conversion into a <code>double<\/code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as if a child were trying to use an adult's gloves.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  \/\/ Noncompliant\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2130","title": "Parsing should be used to convert \"Strings\" to primitives","tags": ["performance"],"implementations": [{"key": "squid:S2130","language": "Java","title": "Parsing should be used to convert \"Strings\" to primitives","description": "Rather than creating a boxed primitive from a <code>String<\/code> to extract the primitive value, use the relevant <code>parse<\/code> method instead. It will be clearer and more efficient.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = new Float(myNum).floatValue();  \/\/ Noncompliant; creates &amp; discards a Float\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2131","title": "Primitives should not be boxed just for \"String\" conversion","tags": ["performance"],"implementations": [{"key": "squid:S2131","language": "Java","title": "Primitives should not be boxed just for \"String\" conversion","description": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class' <code>toString<\/code> method, it's a waste of memory and cycles because those methods are <code>static<\/code>, and can therefore be used without a class instance. Similarly, using the <code>static<\/code> method <code>valueOf<\/code> in the primitive-wrapper classes with a non-<code>String<\/code> argument should be avoided, as should concatenating empty string <code>\"\"<\/code> to a primitive.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nint myInt = 4;\nString myIntString = new Integer(myInt).toString(); \/\/ Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); \/\/ Noncompliant\nmyIntString = 4 + \"\";  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2133","title": "Objects should not be created only to \"getClass\"","tags": ["performance"],"implementations": [{"key": "squid:S2133","language": "Java","title": "Objects should not be created only to \"getClass\"","description": "<p>Creating an object for the sole purpose of calling <code>getClass<\/code> on it is a waste of memory and cycles. Instead, simply use the class' <code>.class<\/code> property.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nMyObject myOb = new MyObject();  \/\/ Noncompliant\nClass c = myOb.getClass(); \n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nClass c = MyObject.class; \n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2134","title": "Classes extending java.lang.Thread should override the \"run\" method","tags": ["multi-threading","pitfall"],"implementations": [{"key": "squid:S2134","language": "Java","title": "Classes extending java.lang.Thread should override the \"run\" method","description": "<p>According to the Java API documentation:<\/p>\n<blockquote>\nThere are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started...\nThe other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started.\n<\/blockquote>\n\n<p>By definition, extending the Thread class without overriding the <code>run<\/code> method doesn't make sense, and implies that the contract of the <code>Thread<\/code> class is not well understood.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyRunner extends Thread { \/\/ Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n<\/pre>","severity": "Major","tags": ["multi-threading","pitfall"]}]},{"key": "S2137","title": "Local variables should not shadow \"undefined\"","tags": ["pitfall"],"implementations": [{"key": "javascript:S2137","language": "JavaScript","title": "Local variables should not shadow \"undefined\"","description": "<p>\n  It is possible to name a variable <code>undefined<\/code> in a local scope, but it is a very bad idea because <code>undefined<\/code> is what's returned for values and properties that have not yet been created. Make <code>undefined<\/code> a variable and you lose your ability to test whether other variables and properties exist.\n <\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction foo () {\n   var undefined = 1; \/\/ Noncompliant\n   if (nonExistantVar == undefined) { \/\/ this logic doesn't work now\n     \/\/ ...\n   }\n }\n <\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction foo () {\n   var bob = 1; \/\/ anything is better than naming it 'undefined'\n   if (nonExistantVar == undefined) {\n     \/\/ ...\n   }\n }\n <\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2142","title": "\"InterruptedException\" should not be ignored","tags": ["cwe","multi-threading","bug"],"implementations": [{"key": "squid:S2142","language": "Java","title": "\"InterruptedException\" should not be ignored","description": "<p><code>InterruptedExceptions<\/code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". Instead, <code>InterruptedExceptions<\/code> should either be rethrown - immediately or after cleaning up the method's state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      \/\/ do stuff\n    }\n  }catch (InterruptedException e) { \/\/ Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void run () throws InterruptedException{\n  try {\n    while (true) { \n      \/\/ do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    \/\/ clean up state...\n    throw e;\n  }\n}\n<\/pre>\n<p>or<\/p>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      \/\/ do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    \/\/ clean up state...\n    Thread.currentThread().interrupt();\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/391.html\">MITRE, CWE-391<\/a> - Unchecked Error Condition\n<\/li><\/ul>","severity": "Critical","tags": ["bug","cwe","multi-threading"]}]},{"key": "S2147","title": "Catches should be combined","tags": ["clumsy"],"implementations": [{"key": "squid:S2147","language": "Java","title": "Catches should be combined","description": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch<\/code> blocks have the same code, they should be combined for better readability.<\/p>\n<p><strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  \/\/ Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  \/\/ Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2151","title": "\"runFinalizersOnExit\" should not be called","tags": ["security","bug","cert"],"implementations": [{"key": "squid:S2151","language": "Java","title": "\"runFinalizersOnExit\" should not be called","description": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit<\/code> and <code>Runtime.runFinalizersOnExit<\/code>, but both methods are deprecated because they are are inherently unsafe. <\/p>\n<p>According to the Oracle Javadoc:<\/p>\n<blockquote>\n<p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.<\/p>\n<\/blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  \/\/ Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  \/\/...\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/H4cbAQ\">CERT, MET12-J<\/a> - Do not use finalizers<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cert","security"]}]},{"key": "S2153","title": "Boxing and unboxing should not be immediately reversed","tags": ["clumsy"],"implementations": [{"key": "squid:S2153","language": "Java","title": "Boxing and unboxing should not be immediately reversed","description": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer<\/code> to hold an <code>int<\/code> value. Unboxing is the process of retrieving the primitive value from such an object.<\/p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing and auto-unboxing (when Java implicitly handles the primitive\/object transition for you).<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void examineInt(int a) { \n  \/\/... \n}\n\npublic void examineInteger(Integer a) { \n  \/\/ ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); \/\/ Noncompliant\n\n  examineInt(new Integer(i).intValue()); \/\/ Noncompliant; explicit box\/unbox\n  examineInt(Integer.valueOf(i));  \/\/ Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); \/\/ Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); \/\/ Noncompliant; unboxed int will be autoboxed\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2154","title": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","tags": ["bug"],"implementations": [{"key": "squid:S2154","language": "Java","title": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","description": "<p>If wrapped primitive values (e.g. <code>Integers<\/code> and <code>Floats<\/code>) are used in a ternary operator (e.g. <code>a?b:c<\/code>), both values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible type.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  \/\/ Noncompliant; i is coerced to float. n = 1.23456792E8\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  \/\/ n = 123456789\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2157","title": "\"Cloneables\" should implement \"clone\"","tags": ["bug"],"implementations": [{"key": "squid:S2157","language": "Java","title": "\"Cloneables\" should implement \"clone\"","description": "<p>Simply implementing <code>Cloneable<\/code>  without also overriding <code>Object.clone()<\/code> does not necessarily make the class cloneable. While the <code>Cloneable<\/code> interface does not include a <code>clone<\/code> method, it is required by convention, and ensures true cloneability. Otherwise the default JVM <code>clone<\/code> will be used, which copies primitive values and object references from the source to the target. I.e. without overriding <code>clone<\/code>, any cloned instances will potentially share members with the source instance.<\/p>\n\n<p>Removing the <code>Cloneable<\/code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a class to be copied.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nclass Team implements Cloneable {  \/\/ Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() { \n    Team clone = (Team) super.clone();\n    \/\/...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2159","title": "Silly equality checks should not be made","tags": ["bug","unused"],"implementations": [{"key": "squid:S2159","language": "Java","title": "Silly equality checks should not be made","description": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:<\/p>\n<ul>\n<li> comparing an object with null<\/li>\n<li> comparing an object with an unrelated primitive (E.G. a string with an int)<\/li>\n<li> comparing unrelated classes<\/li>\n<li> comparing an unrelated <code>final class<\/code> and <code>interface<\/code><\/li>\n<li> comparing an array to a non-array<\/li>\n<li> comparing two arrays<\/li>\n<\/ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()<\/code>, calling <code>equals<\/code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)<\/code> is equivalent to <code>array1==array2<\/code>.<\/p>\n<p>However, some developers might expect <code>Array.equals(Object obj)<\/code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==<\/code> operator or <code>Arrays.equals(array1, array2)<\/code> should always be used with arrays.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic final class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n\/\/...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { \/\/ Noncompliant; unrelated classes\n  \/\/ ...\n}\nelse if (spatula.equals(plant)) { \/\/ Noncompliant; unrelated final class and interface\n  \/\/ ...\n}\nelse if (tool.equals(tools)) { \/\/ Noncompliant; array &amp; non-array\n  \/\/ ...\n}\nelse if (trees.equals(tools)) {  \/\/ Noncompliant; incompatible arrays\n  \/\/ ...\n}\nelse if (tree.equals(null)) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["bug","unused"]}]},{"key": "S2160","title": "Subclasses that add fields should override \"equals\"","tags": ["suspicious"],"implementations": [{"key": "squid:S2160","language": "Java","title": "Subclasses that add fields should override \"equals\"","description": "<p>Extend a class that overrides <code>equals<\/code> and add fields without overriding <code>equals<\/code> in the subclass, and you run the risk of non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.<\/p>\n\n<p>This rule looks for classes that do all of the following:<\/p>\n<ul>\n    <li>extend classes that override <code>equals<\/code>.<\/li>\n    <li>do not themselves override <code>equals<\/code>.<\/li>\n    <li>add fields.<\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  \/\/ Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  \/\/ added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S2165","title": "\"finalize\" should not set fields to \"null\"","tags": ["performance","clumsy"],"implementations": [{"key": "squid:S2165","language": "Java","title": "\"finalize\" should not set fields to \"null\"","description": "<p>There is no point in setting class fields to <code>null<\/code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary - the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  \/\/ Noncompliant; completely unnecessary\n<\/pre>","severity": "Major","tags": ["clumsy","performance"]}]},{"key": "S2166","title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass","tags": ["convention","pitfall"],"implementations": [{"key": "squid:S2166","language": "Java","title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass","description": "Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code. Using \"exception\" in the name of a class that does not extend <code>Exception<\/code> or one of its subclasses is a clear violation of the expectation that a class' name will indicate what it is and\/or does.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class FruitException {  \/\/ Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  \/\/ ...\n}\n\npublic class CarException {  \/\/ Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  \/\/ ...\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  \/\/ ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  \/\/ ...\n<\/pre>","severity": "Major","tags": ["convention","pitfall"]}]},{"key": "S2167","title": "\"compareTo\" should not return \"Integer.MIN_VALUE\"","tags": ["bug"],"implementations": [{"key": "squid:S2167","language": "Java","title": "\"compareTo\" should not return \"Integer.MIN_VALUE\"","description": "<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo<\/code> that matters. Returning <code>Integer.MIN_VALUE<\/code> does not convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo<\/code> is sometimes inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE<\/code> yields <code>Integer.MIN_VALUE<\/code> rather than <code>Integer.MAX_VALUE<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  \/\/ Noncompliant\n  }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2175","title": "Inappropriate \"Collection\" calls should not be made","tags": ["bug"],"implementations": [{"key": "squid:S2175","language": "Java","title": "Inappropriate \"Collection\" calls should not be made","description": "<p>A couple <code>Collection<\/code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of using the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains<\/code> or <code>List.remove<\/code> is unrelated to the type used for the list declaration.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  \/\/ Noncompliant. Always false.\n  list.remove(integer); \/\/ Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2176","title": "Class names should not shadow interfaces or superclasses","tags": ["pitfall"],"implementations": [{"key": "squid:S2176","language": "Java","title": "Class names should not shadow interfaces or superclasses","description": "While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's confusing and could cause problems in the future. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2178","title": "Short-circuit logic should be used in boolean contexts","tags": ["bug"],"implementations": [{"key": "squid:S2178","language": "Java","title": "Short-circuit logic should be used in boolean contexts","description": "The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(getTrue() | getFalse()) { ... } \/\/ Noncompliant; both sides evaluated\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  \/\/ true short-circuit logic\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2183","title": "Ints and longs should not be shifted by more than their number of bits-1","tags": ["bug"],"implementations": [{"key": "squid:S2183","language": "Java","title": "Ints and longs should not be shifted by more than their number of bits-1","description": "<p>Since an <code>int<\/code> is a 32-bit variable, shifting by more than (-)31 is confusing at best and an error at worst. Shifting an <code>int<\/code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.<\/p>\n\n<p>Similarly, shifting a <code>long<\/code> by (-)64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int shift(int a) {\n  return a << 48;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic int shift(int a) {\n  return a << 16;\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2184","title": "Math operands should be cast before assignment","tags": ["cwe","security","bug","sans-top25-risky"],"implementations": [{"key": "squid:S2184","language": "Java","title": "Math operands should be cast before assignment","description": "<p>When arithmetic is performed on <code>int<\/code>s, the result will always be an <code>int<\/code>. You can assign that result to a <code>long<\/code>, <code>double<\/code>, or <code>float<\/code> with automatic type conversion, but having started as an <code>int<\/code>, the result will likely not be what you expect. <\/p>\n<p>For instance, if the result of <code>int<\/code> division is assigned to a floating-point variable, precision will have been lost before the assignment. Likewise, if the result of multiplication is assigned to a <code>long<\/code>, it may have already overflowed before the assignment.<\/p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfloat twoThirds = 2\/3; \/\/ Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; \/\/ Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; \/\/ Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; \/\/Noncompliant, gives a positive result instead of a negative one. \nDate myDate = new Date(seconds * 1_000); \/\/Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  \/\/Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfloat twoThirds = 2f\/3; \/\/ 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; \/\/ 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; \/\/ 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; \/\/ Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nfloat twoThirds = (float)2\/3; \/\/ 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; \/\/ 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/190\">MITRE, CWE-190<\/a> - Integer Overflow or Wraparound<\/li>\n<li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Risky Resource Management<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cwe","sans-top25-risky","security"]}]},{"key": "S2185","title": "Silly math should not be performed","tags": ["clumsy"],"implementations": [{"key": "squid:S2185","language": "Java","title": "Silly math should not be performed","description": "<p>Certain math operations are just silly and should not be performed because their results are predictable.<\/p>\n<p>In particular, <code>anyValue % 1<\/code> is silly because it will always return 0.<\/p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round<\/code>, <code>Math.ceil<\/code>, or <code>Math.floor<\/code> is silly  because the result will always be the original value. <\/p>\n<p>These operations are silly with any constant value: <code>Math.abs<\/code>, <code>Math.ceil<\/code>, <code>Math.floor<\/code>, <code>Math.rint<\/code>, <code>Math.round<\/code>.<\/p>\n<p>And these oprations are silly with certain constant values:<\/p>\n<table>\n<tr><th>Operation<\/th><th>Value<\/th><\/tr>\n<tr><td>acos<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>asin<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>atan<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>atan2<\/td><td>0.0<\/td><\/tr>\n<tr><td>cbrt<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>cos<\/td><td>0.0<\/td><\/tr>\n<tr><td>cosh<\/td><td>0.0<\/td><\/tr>\n<tr><td>exp<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>expm1<\/td><td>0.0<\/td><\/tr>\n<tr><td>log<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>log10<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>sin<\/td><td>0.0<\/td><\/tr>\n<tr><td>sinh<\/td><td>0.0<\/td><\/tr>\n<tr><td>sqrt<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>tan<\/td><td>0.0<\/td><\/tr>\n<tr><td>tanh<\/td><td>0.0<\/td><\/tr>\n<tr><td>toDegrees<\/td><td>0.0 or 1.0<\/td><\/tr>\n<tr><td>toRadians<\/td><td>0.0<\/td><\/tr>\n<\/table>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void doMath(int a)\ndouble floor = Math.floor((double)a); \/\/ Noncompliant\ndouble ceiling = Math.ceil(4.2);\ndouble arcTan = Math.atan(0.0);\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2186","title": "JUnit assertions should not be used in \"run\" methods","tags": ["junit","bug"],"implementations": [{"key": "squid:S2186","language": "Java","title": "JUnit assertions should not be used in \"run\" methods","description": "<p>JUnit assertions should not be made from the <code>run<\/code> method of a <code>Runnable<\/code>, because failed assertions result in <code>AssertionError<\/code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the test won't fail.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void run() {\n  \/\/ ...\n  Assert.assertEquals(expected, actual);  \/\/ Noncompliant\n}\n<\/pre>","severity": "Critical","tags": ["bug","junit"]}]},{"key": "S2187","title": "TestCases should contain tests","tags": ["junit","unused","confusing"],"implementations": [{"key": "squid:S2187","language": "Java","title": "TestCases should contain tests","description": "<p>There's no point in having a JUnit <code>TestCase<\/code> without any test methods. Similarly, you shouldn't have a file in the tests directory with \"Test\" in the name, but not tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.<\/p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase<\/code> but don't contain any tests.<\/p>","severity": "Major","tags": ["confusing","junit","unused"]}]},{"key": "S2188","title": "JUnit test cases should call super methods","tags": ["junit","bug"],"implementations": [{"key": "squid:S2188","language": "Java","title": "JUnit test cases should call super methods","description": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super<\/code> call is made in the overriding method. In some cases not calling the <code>super<\/code> method is acceptable, but not with <code>setUp<\/code> and <code>tearDown<\/code> in a JUnit 3 <code>TestCase<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  \/\/ Noncompliant\n      myClass = new MyClass();\n    }\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n<\/pre>","severity": "Critical","tags": ["bug","junit"]}]},{"key": "S2200","title": "\"compareTo\" results should not be checked for specific values","tags": ["unpredictable"],"implementations": [{"key": "squid:S2200","language": "Java","title": "\"compareTo\" results should not be checked for specific values","description": "While most <code>compareTo<\/code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo<\/code> against a specific value other than 0 could result in false negatives.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["unpredictable"]}]},{"key": "S2204","title": "\".equals()\" should not be used to test the values of \"Atomic\" classes","tags": ["bug"],"implementations": [{"key": "squid:S2204","language": "Java","title": "\".equals()\" should not be used to test the values of \"Atomic\" classes","description": "<p><code>AtomicInteger<\/code>, and <code>AtomicLong<\/code> extend <code>Number<\/code>, but they're distinct from <code>Integer<\/code> and <code>Long<\/code> and should be handled differently. <code>AtomicInteger<\/code> and <code>AtomicLong<\/code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger<\/code> will only ever be \"equal\" to itself. Instead, you should <code>.get()<\/code> the value and make comparisons on it.<\/p>\n\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger<\/code>, <code>AtomicLong<\/code>, and <code>AtomicBoolean<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2209","title": "\"static\" members should be accessed statically","tags": ["pitfall"],"implementations": [{"key": "squid:S2209","language": "Java","title": "\"static\" members should be accessed statically","description": "<p>\n  While it is <em>possible<\/em> to access <code>static<\/code> members from a class instance, it's bad form,\n  and considered by most to be misleading because it implies to the readers of your code that\n  there's an instance of the member per class instance.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  \/\/ Noncompliant\n    second.counter ++;  \/\/ Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  \/\/ Compliant\n    A.counter ++;  \/\/ Compliant\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2222","title": "Locks should be released","tags": ["cwe","multi-threading","bug"],"implementations": [{"key": "squid:S2222","language": "Java","title": "Locks should be released","description": "<p>The logic in a method should ensure that locks are released in the methods in which they were acquired. Failure to release a lock increases the potential for deadlocks and could result in runtime errors in production.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClass {\n  Lock lock = new Lock();\n\n  public void acquireLock() {\n    lock.lock();  \/\/ Noncompliant;\n  }\n\n  public void releaseLock() {\n    lock.unlock();\n  }\n\n  public void doTheThing() {\n    acquireLock();\n    \/\/ do work...\n    releaseLock();\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class MyClass {\n  Lock lock = new Lock();\n\n  public void doTheThing() {\n    lock.lock();\n    \/\/ do work...\n    lock.unlock();\n  }\n\n}\n<\/pre>","severity": "Critical","tags": ["bug","cwe","multi-threading"]}]},{"key": "S2225","title": "\"toString()\" and \"clone()\" methods should not return null","tags": ["cwe","bug"],"implementations": [{"key": "squid:S2225","language": "Java","title": "\"toString()\" and \"clone()\" methods should not return null","description": "<p>Calling <code>toString()<\/code> or <code>clone()<\/code> on an object should always return a string or an object. Returning <code>null<\/code> instead contravenes the method's implicit contract.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return null; \/\/ Noncompliant\n  } else {\n    \/\/ ...\n <\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return \"\";\n  } else {\n    \/\/ ...\n <\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE CWE-476<\/a> - NULL Pointer Dereference\n<\/li><\/ul>","severity": "Critical","tags": ["bug","cwe"]}]},{"key": "S2226","title": "Servlets should not have mutable instance fields","tags": ["multi-threading","bug","struts","cert"],"implementations": [{"key": "squid:S2226","language": "Java","title": "Servlets should not have mutable instance fields","description": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static<\/code> and\/or <code>final<\/code>, or simply removed.<\/p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  \/\/As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n<\/pre>\n<p>or <\/p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  \/\/Same reason\n  ...\n}\n<\/pre>","severity": "Critical","tags": ["bug","cert","multi-threading","struts"]}]},{"key": "S2228","title": "Console logging should not be used","tags": ["security","owasp-a6"],"implementations": [{"key": "javascript:S2228","language": "JavaScript","title": "Console logging should not be used","description": "<p>\n  Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users. (Not all browsers support <code>console.log()<\/code>).\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nconsole.log(password_entered); \/\/ Noncompliant\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure <\/li>\n<\/ul>","severity": "Major","tags": ["owasp-a6","security"]}]},{"key": "S2230","title": "Non-public methods should not be \"@Transactional\"","tags": ["spring","bug"],"implementations": [{"key": "squid:S2230","language": "Java","title": "Non-public methods should not be \"@Transactional\"","description": "Marking a non-public method <code>@Transactional<\/code> is both useless and misleading because Spring doesn't \"see\" non-<code>public<\/code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.\n\nTherefore marking a <code>private<\/code>  method, for instance, <code>@Transactional<\/code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional<\/code>.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@Transactional  \/\/ Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["bug","spring"]}]},{"key": "S2232","title": "\"ResultSet.isLast()\" should not be used","tags": ["performance","pitfall","sql"],"implementations": [{"key": "squid:S2232","language": "Java","title": "\"ResultSet.isLast()\" should not be used","description": "<p>There are several reasons to avoid <code>ResultSet.isLast()<\/code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY<\/code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet<\/code> is empty, so some drivers may return the opposite of what is expected.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { \/\/ Noncompliant\n\/\/ process row\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n\/\/ process row\n}\n<\/pre>","severity": "Major","tags": ["performance","pitfall","sql"]}]},{"key": "S2234","title": "Parameters should be passed in the correct order","tags": ["bug"],"implementations": [{"key": "javascript:S2234","language": "JavaScript","title": "Parameters should be passed in the correct order","description": "<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will likely lead to unexpected results.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction divide(var divisor, var dividend) {\n  return divisor\/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(dividend, divisor);  \/\/ Noncompliant; operation succeeds, but result is unexpected\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction divide(var divisor, var dividend) {\n  return divisor\/dividend;\n}\n\npublic void doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(divisor, dividend);\n  \/\/...\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2235","title": "IllegalMonitorStateException should not be caught","tags": ["multi-threading","bug"],"implementations": [{"key": "squid:S2235","language": "Java","title": "IllegalMonitorStateException should not be caught","description": "According to Oracle Javadoc:\n<blockquote>\n<code>IllegalMonitorStateException<\/code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.\n<\/blockquote>\n\nIn other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)<\/code>, <code>Object.notify()<\/code> and <code>Object.notifyAll()<\/code> methods should never be called on an object whose monitor is not held. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug","multi-threading"]}]},{"key": "S2236","title": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should never be called on Thread instances","tags": ["multi-threading","bug"],"implementations": [{"key": "squid:S2236","language": "Java","title": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should never be called on Thread instances","description": "<p>On a Thread instance, the methods <code>wait(...)<\/code>, <code>notify()<\/code> and <code>notifyAll()<\/code> are available only because all classes in Java extend <code>Object<\/code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:<\/p>\n<ul>\n<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)<\/code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?<\/li>\n<li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED<\/code>, <code>WAITING<\/code>, ...), so calling them will corrupt the behavior of the JVM.<\/li>\n<\/ul>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n<\/pre>","severity": "Blocker","tags": ["bug","multi-threading"]}]},{"key": "S2250","title": "\"ConcurrentLinkedQueue.size()\" should not be used","tags": ["security","performance"],"implementations": [{"key": "squid:S2250","language": "Java","title": "\"ConcurrentLinkedQueue.size()\" should not be used","description": "<p>For most collections the <code>size()<\/code> method requires constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()<\/code> is directly proportional to the number of elements in the queue. When the queue is large, this could therefore be an expensive operation. Further, the results may be inaccurate if the queue is modified during execution.<\/p>\n\n<p>By the way, if the <code>size()<\/code> is used only to check that the collection is empty, then the <code>isEmpty()<\/code> method should be used.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n\/\/...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");\n<\/pre>","severity": "Critical","tags": ["performance","security"]}]},{"key": "S2251","title": "A \"for\" loop update clause should move the counter in the right direction","tags": ["bug"],"implementations": [{"key": "squid:S2251","language": "Java","title": "A \"for\" loop update clause should move the counter in the right direction","description": "A <code>for<\/code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { \/\/ Noncompliant;\n    String string = strings[i];  \/\/ ArrayIndexOutOfBoundsException when i reaches -1\n    \/\/...\n  }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    \/\/...\n  }\n<\/pre>","severity": "Blocker","tags": ["bug"]},{"key": "javascript:S2251","language": "JavaScript","title": "A \"for\" loop update clause should move the counter in the right direction","description": "A <code>for<\/code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while<\/code> loops. More typically, an infinite <code>for<\/code> loop is a bug. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 0; i < strings.length; i--) { \/\/ Noncompliant;\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (var i = 0; i < strings.length; i++) {\n  \/\/...\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2252","title": "Loop conditions should be true at least once","tags": ["bug"],"implementations": [{"key": "squid:S2252","language": "Java","title": "Loop conditions should be true at least once","description": "If a <code>for<\/code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always bugs, particularly when the initial value and stop conditions are hard-coded.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  \/\/ Noncompliant \n  \/\/ ...\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2254","title": "\"HttpServletRequest.getRequestedSessionId()\" should not be used","tags": ["cwe","security","sans-top25-porous","owasp-a2"],"implementations": [{"key": "squid:S2254","language": "Java","title": "\"HttpServletRequest.getRequestedSessionId()\" should not be used","description": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()<\/code> method:<\/p>\n<blockquote>\n<p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null.<\/p>\n<\/blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually updating the value of this session ID in the HTTP request. <\/p>\n<p>Here is an example of a updated HTTP header:<\/p>\n<pre>\nGET \/pageSomeWhere HTTP\/1.1\nHost: webSite.com\nUser-Agent: Mozilla\/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n<\/pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered  unauthenticated. Moreover, this session ID should never be logged to prevent hijacking of active sessions.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/807\">MITRE, CWE-807<\/a> - Reliance on Untrusted Inputs in a Security Decision\n<\/li><li> <a href=\"http:\/\/www.sans.org\/top25-software-errors\/\">SANS Top 25<\/a> - Porous Defenses\n<\/li><li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> - Broken Authentication and Session Management\n<\/li><li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#SERVLET_SESSION_ID\">Untrusted Session Cookie Value<\/a>\n<\/li><\/ul>","severity": "Critical","tags": ["cwe","owasp-a2","sans-top25-porous","security"]}]},{"key": "S2259","title": "Null pointers should not be dereferenced","tags": [],"implementations": [{"key": "squid:S2259","language": "Java","title": "Null pointers should not be dereferenced","description": "<p>\nA reference to <code>null<\/code> should never be dereferenced\/accessed.\nDoing so will cause a <code>NullPointerException<\/code> to be thrown. At best, such an exception will cause abrupt program termination.\nAt worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.\n<\/p>\n\n<p>\nNote that when they are present, this rule takes advantage of <code>@CheckForNull<\/code> and <code>@Nonnull<\/code> annotations defined in\n<a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=305\">JSR-305<\/a> to understand which values are or are not nullable.\n<\/p>\n\n<p>\n@Nullable denotes that, under some unspecified circumstances, the value might be null. To keep false positives low, this annotation is ignored.\nWhether an explicit test is required or not is left to the developer's discretion.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@CheckForNull\nString getName() {...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; \/\/ Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n<\/pre>\n\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry {\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  \/\/ ...\n\n} catch(Exception e) {\n  e.printStackTrace();\n} finally {\n  stmt.close(); \/\/ Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close(); \/\/ Noncompliant; conn could be null if an exception was thrown\n}\n<\/pre>\n\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic void append(@CheckForNull Color color) {\n    merge(currentColor, color); \/\/ Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n<\/pre>\n\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString()); \/\/ Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n   <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/476.html\">MITRE, CWE-476<\/a> - NULL Pointer Dereference<\/li>\n   <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/PAw\">CERT, EXP34-C<\/a> - Do not dereference null pointers<\/li>\n   <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/ZwDOAQ\">CERT, EXP01-J<\/a> - Never dereference null pointers<\/li>\n   <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1<\/a> - Injection<\/li>\n   <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2<\/a> - Broken Authentication and Session Management<\/li>\n   <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure<\/li>\n<\/ul>","severity": "Blocker","tags": []}]},{"key": "S2272","title": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"","tags": ["unpredictable"],"implementations": [{"key": "squid:S2272","language": "Java","title": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"","description": "By contract, any implementation of the <code>java.util.Iterator.next()<\/code> method should throw a <code>NoSuchElementException<\/code> exception when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this <code>Iterator<\/code>. \n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["unpredictable"]}]},{"key": "S2273","title": "\"wait(...)\", \"notify()\" and \"notifyAll()\" methods should only be called when a lock is obviously held on an object","tags": ["multi-threading","bug"],"implementations": [{"key": "squid:S2273","language": "Java","title": "\"wait(...)\", \"notify()\" and \"notifyAll()\" methods should only be called when a lock is obviously held on an object","description": "<p>By contract, the method <code>Object.wait(...)<\/code>, <code>Object.notify()<\/code> and <code>Object.notifyAll()<\/code> should be called by a thread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException<\/code> exception is thrown. This rule reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized<\/code> method or statement.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>\n\nor\n\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... \/\/ Perform removal\n  }\n}\n<\/pre>\n\nor\n\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... \/\/ Perform removal\n}\n<\/pre>","severity": "Critical","tags": ["bug","multi-threading"]}]},{"key": "S2274","title": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","tags": ["multi-threading","bug","cert"],"implementations": [{"key": "squid:S2274","language": "Java","title": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","description": "<p>According to the Java <code>Condition<\/code> interface documentation:<\/p>\n<blockquote>\n<p>When waiting upon a <code>Condition<\/code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop.<\/p>\n<\/blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)<\/code> method:<\/p>\n<blockquote>\n<p>waits should always occur in loops, like this one:<\/p>\n<pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout); \n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<\/blockquote>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   \/\/the thread can wakeup whereas the condition is still false\n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... \/\/ Perform action appropriate to condition\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/THI03-J.+Always+invoke+wait%28%29+and+await%28%29+methods+inside+a+loop\">CERT THI03-J<\/a> - Always invoke wait() and await() methods inside a loop\n<\/li><\/ul>","severity": "Critical","tags": ["bug","cert","multi-threading"]}]},{"key": "S2275","title": "Printf-style format strings should not lead to unexpected behavior at runtime","tags": ["bug","pitfall"],"implementations": [{"key": "squid:S2275","language": "Java","title": "Printf-style format strings should not lead to unexpected behavior at runtime","description": "<p>Because <code>printf<\/code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf<\/code>-style formats when calling the <code>format(...)<\/code> methods of <code>java.util.Formatter<\/code>, <code>java.lang.String<\/code>, <code>java.io.PrintStream<\/code> and <code>java.io.PrintWriter<\/code> classes and the <code>printf(...)<\/code> methods of <code>java.io.PrintStream<\/code> or <code>java.io.PrintWriter<\/code> classes. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  \/\/ Noncompliant; an 'int' is expected rather than a String\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  \/\/Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Duke's Birthday year is %tX\", c);  \/\/Noncompliant; X is not a supported time conversion character\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   \/\/Noncompliant; the second argument '2' is unused\nString.format(\"Display %0$d and then %d\", 1);   \/\/Noncompliant; arguments are numbered starting from 1\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  \/\/Noncompliant; the third argument '3' is unused\nString.format(\"Not enough arguments %d and %d\", 1);  \/\/Noncompliant; the second argument is missing\nString.format(\"First Line\\n\");   \/\/Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"%&lt; is equals to %d\", 2);   \/\/Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\nString.format(\"Is myObject null ? %b\", myObject);   \/\/Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); \/\/ Noncompliant\nString s = String.format(\"string without arguments\"); \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"%d is equals to %&lt;\", 2);\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\"; \n<\/pre>","severity": "Critical","tags": ["bug","pitfall"]}]},{"key": "S2276","title": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","tags": ["security","multi-threading","performance"],"implementations": [{"key": "squid:S2276","language": "Java","title": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","description": "<p>If <code>Thread.sleep(...)<\/code> is called when the current thread holds a lock, it could lead to performance, and scalability issues, or even worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)<\/code> on the monitor object to temporarily release the lock and allow other threads to run.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n<\/pre>","severity": "Critical","tags": ["multi-threading","performance","security"]}]},{"key": "S2277","title": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)","tags": ["cwe","security","owasp-a6","sans-top25-porous","owasp-a5"],"implementations": [{"key": "squid:S2277","language": "Java","title": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)","description": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an issue as soon as a literal value starts with <code>RSA\/NONE<\/code>. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA\/NONE\/NoPadding\");\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA\/ECB\/OAEPWITHSHA-256ANDMGF1PADDING\");\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/780.html\">MITRE CWE-780<\/a> - Use of RSA Algorithm without OAEP<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/327.html\">MITRE CWE-327<\/a>: Use of a Broken or Risky Cryptographic Algorithm<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5<\/a> - Security Misconfiguration<\/li>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6<\/a> - Sensitive Data Exposure<\/li>\n<li> Derived from FindSecBugs rule <a href=\"http:\/\/h3xstream.github.io\/find-sec-bugs\/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe<\/a><\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","owasp-a5","owasp-a6","sans-top25-porous","security"]}]},{"key": "S2293","title": "The diamond operator (\"<>\") should be used","tags": ["clumsy"],"implementations": [{"key": "squid:S2293","language": "Java","title": "The diamond operator (\"<>\") should be used","description": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;<\/code>) to reduce the verbosity of generics code. For instance, instead of having to declare a <code>List<\/code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;<\/code>, and the compiler will infer the type.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  \/\/ Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2310","title": "Loop counters should not be assigned to from within the loop body","tags": ["pitfall"],"implementations": [{"key": "javascript:S2310","language": "JavaScript","title": "Loop counters should not be assigned to from within the loop body","description": "<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var i = 0; i &lt; names.length; i++) {\n  if (!names[i]) {\n    i = names.length;                                 \/\/ Non-Compliant\n  } else {\n    console.log(names[i]);\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var name of names) {\n  if (!name) {\n    break;                                 \/\/ Compliant\n  } else {\n    console.log(name);\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2326","title": "Unused type parameters should be removed","tags": ["unused"],"implementations": [{"key": "squid:S2326","language": "Java","title": "Unused type parameters should be removed","description": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nint &lt;T&gt; Add(int a, int b) \/\/ Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b; \n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nint Add(int a, int b)\n{\n  return a + b; \n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "S2386","title": "Mutable fields should not be \"public static\"","tags": ["cwe","security","unpredictable"],"implementations": [{"key": "squid:S2386","language": "Java","title": "Mutable fields should not be \"public static\"","description": "<p>There is no good reason to have a mutable object as the <code>public<\/code> (by default), <code>static<\/code> member of an <code>interface<\/code>. Such variables should be moved into classes and their visibility lowered. <\/p>\n<p>Similarly, mutable <code>static<\/code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final<\/code> if appropriate. <\/p>\n<p>Note that making a mutable field, such as an array, <code>final<\/code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).<\/p>\n<p>This rule raises issues for <code>public static<\/code> array, <code>Collection<\/code>, <code>Date<\/code>, and <code>awt.Point<\/code> members.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic interface MyInterface {\n  public static String [] strings; \/\/ Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  \/\/ Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  \/\/ Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/582.html\">MITRE, CWE-582<\/a> - Array Declared Public, Final, and Static<\/li>\n  <li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/607.html\">MITRE, CWE-607<\/a> - Public Static Final Field References Mutable Object<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","security","unpredictable"]}]},{"key": "S2387","title": "Child class members should not shadow parent class members","tags": ["confusing"],"implementations": [{"key": "squid:S2387","language": "Java","title": "Child class members should not shadow parent class members","description": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best,\nchaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.<\/p>\n\n<p>This rule ignores <code>private<\/code> parent class members, but in all other such cases, the child class field should be renamed.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  \/\/ ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  \/\/ Noncompliant\n  private static Color FLESH; \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  \/\/ ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2388","title": "Inner class calls to super class methods should be unambiguous","tags": ["pitfall"],"implementations": [{"key": "squid:S2388","language": "Java","title": "Inner class calls to super class methods should be unambiguous","description": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.<\/code>.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  \/\/ Noncompliant; was Outer.this.foo() intended instead?\n      \/\/ ...\n    }\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      \/\/ ...\n    }\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2391","title": "JUnit framework methods should be declared properly","tags": ["tests","bug"],"implementations": [{"key": "squid:S2391","language": "Java","title": "JUnit framework methods should be declared properly","description": "<p>\n  If the <code>suite<\/code> method in a JUnit 3 <code>TestCase<\/code> is not declared correctly, it will not be used.\n  Such a method must be named \"suite\", have no arguments, be <code>public static<\/code>, and must return either a <code>junit.framework.Test<\/code>\n  or a <code>junit.framework.TestSuite<\/code>.\n<\/p>\n\n<p>\n  Similarly, <code>setUp<\/code> and <code>tearDown<\/code> methods that aren't properly capitalized will also be ignored.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nTest suite() { ... }  \/\/ Noncompliant; must be public static\npublic static boolean suite() { ... }  \/\/ Noncompliant; wrong return type\npublic static Test suit() { ... }  \/\/ Noncompliant; typo in method name\npublic static Test suite(int count) { ... } \/\/ Noncompliant; must be no-arg\n\npublic void setup() { ... } \/\/ Noncompliant; should be setUp\npublic void tearDwon() { ... }  \/\/ Noncompliant; should be tearDown\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n<\/pre>","severity": "Critical","tags": ["bug","tests"]}]},{"key": "S2432","title": "Setters should not return values","tags": ["bug"],"implementations": [{"key": "javascript:S2432","language": "JavaScript","title": "Setters should not return values","description": "Functions declared with the <code>set<\/code> keyword will automatically return the values they were passed. Thus any value explicitly returned from a setter will be ignored, and explicitly returning a value is an error.\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n    return 42;  \/\/ Noncompliant\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar person = {\n  \/\/ ...\n  set name(name) {\n    this.name = name;\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2437","title": "Silly bit operations should not be performed","tags": ["suspicious"],"implementations": [{"key": "squid:S2437","language": "Java","title": "Silly bit operations should not be performed","description": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.<\/p>\n\n<p>Specifically, using <code>&amp; -1<\/code> with any value will always result in the original value, as will <code>anyValue ^ 0<\/code> and <code>anyValue | 0<\/code>.<\/p>","severity": "Major","tags": ["suspicious"]}]},{"key": "S2438","title": "\"Threads\" should not be used where \"Runnables\" are expected","tags": ["multi-threading","pitfall"],"implementations": [{"key": "squid:S2438","language": "Java","title": "\"Threads\" should not be used where \"Runnables\" are expected","description": "<p>While it is technically correct to use a <code>Thread<\/code> where a <code>Runnable<\/code> is called for, the semantics of the two objects are different, and mixing them is a bad practice that will likely lead to headaches in the future.<\/p>\n\n<p>The crux of the issue is that <code>Thread<\/code> is a larger concept than <code>Runnable<\/code>. A <code>Runnable<\/code> is an object whose running should be managed. A <code>Thread<\/code> expects to manage the running of itself or other <code>Runnables<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\n    public static void main(String[] args) {\n        Thread r =new Thread() {\n            int p;\n            @Override\n            public void run() {\n                while(true)\n                    System.out.println(\"a\");\n            }\n        };\n        new Thread(r).start();  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\n    public static void main(String[] args) {\n        Runnable r =new Runnable() {\n            int p;\n            @Override\n            public void run() {\n                while(true)\n                    System.out.println(\"a\");\n            }\n        };\n        new Thread(r).start();\n<\/pre>","severity": "Major","tags": ["multi-threading","pitfall"]}]},{"key": "S2440","title": "Classes with only \"static\" methods should not be instantiated","tags": ["clumsy"],"implementations": [{"key": "squid:S2440","language": "Java","title": "Classes with only \"static\" methods should not be instantiated","description": "<p><code>static<\/code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only <code>static<\/code> methods.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"<[^>]+>\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  \/\/ ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); \/\/ Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    \/\/...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"<[^>]+>\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  \/\/ ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    \/\/...\n  }\n}\n<\/pre>\n\n<h2>See Also<\/h2>\n<ul>\n    <li>{rule:squid:S1118} - Utility classes should not have public constructors<\/li>\n<\/ul>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2441","title": "Non-serializable objects should not be stored in \"HttpSessions\"","tags": ["cwe","bug"],"implementations": [{"key": "squid:S2441","language": "Java","title": "Non-serializable objects should not be stored in \"HttpSessions\"","description": "<p>If you have no intention of writting an <code>HttpSession<\/code> object to file, then storing non-<code>serializable<\/code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.<\/p>\n<p>The point is, that even though <code>HttpSession<\/code> does not <code>extend Serializable<\/code>, you must nonetheless assume that it will be serialized, and <\/p>\n<p>understand that if you've stored non-serializable objects in the session, errors will result. <\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Address {\n  \/\/...\n}\n\n\/\/...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  \/\/ Noncompliant; Address isn't serializable\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/579.html\">MITRE, CWE-579<\/a> - J2EE Bad Practices: Non-serializable Object Stored in Session<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cwe"]}]},{"key": "S2442","title": "\"Lock\" objects should not be \"synchronized\"","tags": ["multi-threading","clumsy"],"implementations": [{"key": "squid:S2442","language": "Java","title": "\"Lock\" objects should not be \"synchronized\"","description": "<p>\n<code>java.util.concurrent.locks.Lock<\/code> offers far more powerful and flexible locking operations than are available with <code>synchronized<\/code> blocks.\nSo synchronizing on a <code>Lock<\/code> throws away the power of the object, and is just silly.\nInstead, such objects should be locked and unlocked using <code>tryLock()<\/code> and <code>unlock()<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  \/\/ Noncompliant\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n\/\/...\n<\/pre>","severity": "Major","tags": ["clumsy","multi-threading"]}]},{"key": "S2447","title": "Null should not be returned from a \"Boolean\" method","tags": ["pitfall"],"implementations": [{"key": "squid:S2447","language": "Java","title": "Null should not be returned from a \"Boolean\" method","description": "<p>While <code>null<\/code> is technically a valid <code>Boolean<\/code> value, that fact, and the distinction between <code>Boolean<\/code> and <code>boolean<\/code> is easy to forget. So returning <code>null<\/code> from a <code>Boolean<\/code> method is likely to cause problems with callers' code.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic Boolean isUsable() {\n  \/\/ ...\n  return null;  \/\/ Noncompliant\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2583","title": "Conditions should not unconditionally evaluate to \"TRUE\" or to \"FALSE\"","tags": ["cwe","bug","misra"],"implementations": [{"key": "squid:S2583","language": "Java","title": "Conditions should not unconditionally evaluate to \"TRUE\" or to \"FALSE\"","description": "<p>\nConditional statements using a condition which cannot be anything but <code>FALSE<\/code> have the effect of making blocks of code non-functional.\nIf the condition cannot evaluate to anything but <code>TRUE<\/code>, the conditional statement is completely redundant, and makes the code less readable.\n<\/p>\n\n<p>\nIt is quite likely that the code does not match the programmer's intent.\n<\/p>\n\n<p>\nEither the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE<\/code> or <code>FALSE<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\n\/\/foo can't be both equal and not equal to bar in the same expression\nif(foo == bar && something && foo != bar) {...}\n<\/pre>\n<pre>\nprivate void compute(int foo) {\n  if (foo == 4) {\n    doSomething();\n    \/\/ We know foo is equal to 4 at this point, so the next condition is always false\n    if (foo > 4) {...}\n    ...\n  }\n  ...\n}\n<\/pre>\n<pre>\nprivate void compute(boolean foo) {\n  if (foo) {\n    return;\n  }\n  doSomething();\n  \/\/ foo is always false here\n  if (foo){...}\n  ...\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/570\">MITRE, CWE-570<\/a> - Expression is Always False<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/571\">MITRE, CWE-571<\/a> - Expression is Always True<\/li>\n  <li>MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.<\/li>\n  <li>MISRA C:2012, 14.3 - Controlling expressions shall not be invariant<\/li>\n<\/ul>","severity": "Blocker","tags": ["bug","cwe","misra"]}]},{"key": "S2638","title": "Method overrides should not change contracts","tags": ["suspicious"],"implementations": [{"key": "squid:S2638","language": "Java","title": "Method overrides should not change contracts","description": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the same contracts as the ones in the superclass. Specifically, if the parameters or return type of the superclass method are marked with any of the following, that should not be changed in a subclass: <code>@Nullable<\/code>, <code>@CheckForNull<\/code>, <code>@NotNull<\/code>, <code>@NonNull<\/code>, and <code>@Nonnull<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@NotNull Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@Nullable Season ripe) {  \/\/ Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  \/\/ Noncompliant\n    return null;\n  }\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S2639","title": "Inappropriate regular expressions should not be used","tags": ["bug"],"implementations": [{"key": "squid:S2639","language": "Java","title": "Inappropriate regular expressions should not be used","description": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.<\/p>\n<p>The following should not be used as regular expressions:<\/p>\n<ul>\n<li> <code>.<\/code> - matches any single character. Used in <code>replaceAll<\/code>, it matches <em>everything<\/em>\n<\/li><li> <code>|<\/code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters\n<\/li><li> <code>File.separator<\/code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character\n<\/li><\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString str = \"\/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); \/\/ Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); \/\/ Noncompliant; yields _\/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); \/\/ Noncompliant; exception on Windows\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2653","title": "Web applications should not have a \"main\" method","tags": ["cwe","security","jee"],"implementations": [{"key": "squid:S2653","language": "Java","title": "Web applications should not have a \"main\" method","description": "<p>\n  There is no reason to have a <code>main<\/code> method in a web application.\n  It may have been useful for debugging during application development,\n  but such a method should never make it into production.\n  Having a <code>main<\/code> method in a web application opens a door to the application logic\n  that an attacker may never be able to reach (but watch out if one does!),\n  but it is a sloppy practice and indicates that other problems may be present.\n<\/p>\n<p>\n  This rule raises an issue when a <code>main<\/code> method is found in a servlet or an EJB.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { \/\/ Noncompliant\n    updatePrices(req);\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/489.html\">MITRE, CWE-489<\/a> - Leftover Debug Code<\/li>\n<\/ul>","severity": "Critical","tags": ["cwe","jee","security"]}]},{"key": "S2674","title": "The value returned from a stream read should be checked","tags": ["bug"],"implementations": [{"key": "squid:S2674","language": "Java","title": "The value returned from a stream read should be checked","description": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]<\/code> passed in to the method. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.<\/p>\n\n<p>Similarly, you cannot assume that <code>InputStream.skip<\/code> will actually skip the requested number of bytes, but must check the value returned from the method.<\/p>\n\n<p>This rule raises an issue when an <code>InputStream.read<\/code> method that accepts a <code>byte[]<\/code> is called, but the return value is not checked, and when the return value of <code>InputStream.skip<\/code> is not checked. The rule also applies to <code>InputStream<\/code> child classes.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  \/\/ Noncompliant\n    \/\/ ...\n  } catch (IOException e) { ... }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      \/\/ ...\n    }\n  } catch (IOException e) { ... }\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2675","title": "\"readObject\" should not be \"synchronized\"","tags": ["confusing"],"implementations": [{"key": "squid:S2675","language": "Java","title": "\"readObject\" should not be \"synchronized\"","description": "<p>A <code>readObject<\/code> method is written when a <code>Serializable<\/code> object needs special handling to be rehydrated from file.\nIt should be the case that the object being created by <code>readObject<\/code> is only visible to the thread that invoked the method,\nand the <code>synchronized<\/code> keyword is not needed, and using <code>synchronized<\/code> anyway is just confusing.\nIf this is not the case, the method should be refactored to make it the case.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { \/\/ Noncompliant\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { \/\/ Compliant\n  \/\/...\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2676","title": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"","tags": ["bug"],"implementations": [{"key": "squid:S2676","language": "Java","title": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"","description": "<p>It is possible for a call to <code>hashCode<\/code> to return <code>Integer.MIN_VALUE<\/code>. Take the absolute value of such a hashcode and you'll still have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.<\/p>\n<p>Similarly, <code>Integer.MIN_VALUE<\/code> could be returned from <code>Random.nextInt()<\/code> or any object's <code>compareTo<\/code> method, and <code>Long.MIN_VALUE<\/code> could be returned from <code>Random.nextLong()<\/code>. Calling <code>Math.abs<\/code> on values returned from these methods is similarly ill-advised.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { \/\/ Noncompliant\n    \/\/ ...\n  }\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2677","title": "\"read\" and \"readLine\" return values should be used","tags": ["bug"],"implementations": [{"key": "squid:S2677","language": "Java","title": "\"read\" and \"readLine\" return values should be used","description": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of action is surely a bug.<\/p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()<\/code>, <code>Reader.read()<\/code>, and these methods in any child classes.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { \/\/ Noncompliant\n      \/\/ ...\n    }\n  } catch (IOException e) {\n    \/\/ ...\n  }\n} \n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      \/\/ ...\n    }\n  } catch (IOException e) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2681","title": "Multiline blocks should be enclosed in curly braces","tags": ["cwe","bug"],"implementations": [{"key": "squid:S2681","language": "Java","title": "Multiline blocks should be enclosed in curly braces","description": "<p>\n  Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be misleading and induce bugs.\n<\/p>\n<p>\n  This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block,\n  but the omission of curly braces means the lines will be unconditionally executed once.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i < array.length; i++)\n  str = array[i];\n  doTheThing(str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i < array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n<\/pre>","severity": "Critical","tags": ["bug"]},{"key": "javascript:S2681","language": "JavaScript","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be misleading and induce bugs. <\/p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) \n  str = array[i];\n  doTheThing(str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation\n<\/li><\/ul>","severity": "Critical","tags": ["bug","cwe"]},{"key": "php:S2681","language": "PHP","title": "Multiline blocks should be enclosed in curly braces","description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if<\/code> statement or <code>for<\/code> loop, but doing so can be misleading and induce bugs.<\/p>\n\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces\n  means the lines will be unconditionally executed once.<\/p>\n\n\n<h1>Noncompliant Code Example<\/h1>\n<pre>\nif ($condition)\n  firstActionInBlock();\n  secondAction();  \/\/ Noncompliant; executed unconditionally\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i < count($array); $i++)\n  $str = $array[$i];\n  doTheThing($str);  \/\/ Noncompliant; executed only on last array element\n<\/pre>\n\n\n<h1>Compliant Solution<\/h1>\n<pre>\nif ($condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i < count($array); $i++) {\n  $str = $array[$i];\n  doTheThing($str);\n}\n<\/pre>\n\n<h1>See<\/h1>\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/483.html\">MITRE, CWE-483<\/a> - Incorrect Block Delimitation<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cwe"]}]},{"key": "S2688","title": "\"NaN\" should not be used in comparisons","tags": ["bug"],"implementations": [{"key": "javascript:S2688","language": "JavaScript","title": "\"NaN\" should not be used in comparisons","description": "<p>\n  <code>NaN<\/code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN<\/code> will yield predictable results, but probably not the ones you want.\n<\/p>\n<p>\n  Instead, the best way to see whether a variable is equal to <code>NaN<\/code> is (perhaps counter-intuitively) to compare it to itself. Since <code>NaN !== NaN<\/code>, when <code>a !== a<\/code>, you know it must equal <code>NaN<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  \/\/ Noncompliant; always false\n  console.log(\"a is not a number\");  \/\/ this is dead code\n}\nif (a !== NaN) { \/\/ Noncompliant; always true\n  console.log(\"a is not NaN\"); \/\/ this statement is not necessarily true\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nif (a !== a) {\n  console.log(\"a is not a number\");\n}\nif (a === a) {\n  console.log(\"a is not NaN\");\n}\n<\/pre>","severity": "Blocker","tags": ["bug"]}]},{"key": "S2692","title": "\"indexOf\" checks should not be for positive numbers","tags": ["pitfall"],"implementations": [{"key": "squid:S2692","language": "Java","title": "\"indexOf\" checks should not be for positive numbers","description": "<p>Most checks against an <code>indexOf<\/code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug.\nIf the intent is merely to check inclusion of a value in a <code>String<\/code> or a <code>List<\/code>, consider using the <code>contains<\/code> method instead.<\/p>\n\n<p>For strings, if the intent is truly to find the first index after a specific character index, then use the version of <code>indexOf<\/code> which takes a start position argument.<\/p>\n\n<p>This rule raises an issue any time an <code>indexOf<\/code> value retrieved either from a <code>String<\/code> or a <code>List<\/code> is tested for a positive value.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  \/\/ Noncompliant\n  \/\/ ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { \/\/ Noncompliant\n  \/\/ ...\n}\nif (name.indexOf(\"hma\") &gt; 2) { \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  \/\/ ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  \/\/ ...\n}\nif (name.indexOf(\"hma\") &gt; -1) {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2695","title": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","tags": ["bug","sql"],"implementations": [{"key": "squid:S2695","language": "Java","title": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","description": "<p>The parameters in a <code>PreparedStatement<\/code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement<\/code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet<\/code> indices also start at 1, rather than 0.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate > ? and salary < ?\");\nps.setDate(0, date);  \/\/ Noncompliant\nps.setDouble(3, salary);  \/\/ Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  \/\/ Noncompliant\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate > ? and salary < ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  \/\/ ...\n}\n<\/pre>","severity": "Blocker","tags": ["bug","sql"]}]},{"key": "S2696","title": "Instance methods should not write to \"static\" fields","tags": ["multi-threading","bug"],"implementations": [{"key": "squid:S2696","language": "Java","title": "Instance methods should not write to \"static\" fields","description": "<p>Correctly updating a <code>static<\/code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and\/or multiple threads in play. Ideally, <code>static<\/code> fields are only updated from <code>synchronized static<\/code> methods.<\/p>\n\n<p>This rule raises an issue each time a <code>static<\/code> field is updated from a non-static method.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    \/\/...\n    count++;  \/\/ Noncompliant\n  }\n}\n<\/pre>","severity": "Critical","tags": ["bug","multi-threading"]}]},{"key": "S2703","title": "Variables should always be declared with \"var\"","tags": ["pitfall"],"implementations": [{"key": "javascript:S2703","language": "JavaScript","title": "Variables should always be declared with \"var\"","description": "<p>\n  JavaScript variable scope can be particularly difficult to understand and get right.\n  The situation gets even worse when you consider the accidental creation of global variables,\n  which is what happens when you declare a variable inside a method or the <code>for<\/code> clause of a for-loop without using the <code>var<\/code> keyword.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfunction f(){\n  i = 1;         \/\/ Noncompliant; i is global\n\n  for (j = 0; j < array.length; j++) {  \/\/ Noncompliant; j is global now too\n    \/\/ ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (var j = 0; j < array.length; j++) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "S2718","title": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used","tags": ["performance","java8"],"implementations": [{"key": "squid:S2718","language": "Java","title": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used","description": "<p>The use of the <code>Instant<\/code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils<\/code> class from Commons Lang.<\/p>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>8<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  \/\/ Noncompliant \n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n<\/pre>","severity": "Major","tags": ["java8","performance"]}]},{"key": "S2737","title": "\"catch\" clauses should do more than rethrow","tags": ["unused","clumsy"],"implementations": [{"key": "squid:S2737","language": "Java","title": "\"catch\" clauses should do more than rethrow","description": "<p>A <code>catch<\/code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch<\/code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. <\/p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nstring s = \"\";\ntry {\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) {  \/\/ Noncompliant\n  throw e;\n}\n<\/pre>\n\n<h2>Compliant Code Example<\/h2>\n<pre>\nstring s = \"\";\ntry {\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) {  \/\/ Compliant\n  logger.LogError(e);\n  throw e;\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nstring s = File.ReadAllText(fileName);\n<\/pre>","severity": "Major","tags": ["clumsy","unused"]}]},{"key": "S2786","title": "Nested \"enum\"s should not be declared static","tags": ["clumsy"],"implementations": [{"key": "squid:S2786","language": "Java","title": "Nested \"enum\"s should not be declared static","description": "<p>According to <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-8.html#jls-8.9\">the docs<\/a>:<\/p>\n<blockquote>Nested enum types are implicitly <code>static<\/code>.<\/blockquote>\n<p>So there's no need to declare them <code>static<\/code> explicitly.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Flower {\n  static enum Color { \/\/ Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Flower {\n  enum Color { \/\/ Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  \/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["clumsy"]}]},{"key": "S2814","title": "Variables and functions should not be redeclared","tags": ["bug","pitfall"],"implementations": [{"key": "javascript:S2814","language": "JavaScript","title": "Variables and functions should not be redeclared","description": "<p>\n  This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to declare multiple variables and\/or functions with the same name,\n  but it's hard to predict which declaration will be kept by the JavaScript interpreter.\n<\/p>\n\n<p>Typically, this kind of re-declaration is an error, and can lead to bugs and more generally to confusing code.<\/p>\n\n<p>This rule also applies to function parameters.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar a = 'foo';\nfunction a() {}   \/\/ Noncompliant\nconsole.log(a);   \/\/ prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; \/\/ Noncompliant, argument value is lost\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); \/\/ prints \"bar\"\n\nfunction fun() {  \/\/ Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); \/\/ prints \"bar\"\n<\/pre>\n\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); \/\/ prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); \/\/ prints \"bar\"\n<\/pre>","severity": "Major","tags": ["bug","pitfall"]}]},{"key": "S2864","title": "\"entrySet()\" should be iterated when both the key and value are needed","tags": ["performance"],"implementations": [{"key": "squid:S2864","language": "Java","title": "\"entrySet()\" should be iterated when both the key and value are needed","description": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet<\/code> makes sense. But when both the key and the value are needed, it's more efficient to iterate the <code>entrySet<\/code>, which will give access to both the key and value, instead.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  \/\/ Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    \/\/ ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Major","tags": ["performance"]}]},{"key": "S2870","title": "\"delete\" should not be used on arrays","tags": ["bug"],"implementations": [{"key": "javascript:S2870","language": "JavaScript","title": "\"delete\" should not be used on arrays","description": "<p>\n  The <code>delete<\/code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete<\/code> operator can be used here too,\n  but if it is, a hole will be left in the array because the indexes\/keys won't be shifted to reflect the deletion.\n<\/p>\n\n<p>The proper method for removing an element at a certain index would be:<\/p>\n\n<ul>\n  <li><code>Array.prototype.splice<\/code> - add\/remove elements from the the array<\/li>\n  <li><code>Array.prototype.pop<\/code> - add\/remove elements from the end of the array<\/li>\n  <li><code>Array.prototype.shift<\/code> - add\/remove elements from the beginning of the array<\/li>\n<\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  \/\/ Noncompliant. myArray => ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); \/\/ expected value was 'd' but output is undefined\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n\/\/ removes 1 element from index 2\nremoved = myArray.splice(2, 1);  \/\/ myArray => ['a', 'b', 'd']\nconsole.log(myArray[2]); \/\/ outputs 'd'\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S2885","title": "\"Calendars\" and \"DateFormats\" should not be static","tags": ["multi-threading","bug"],"implementations": [{"key": "squid:S2885","language": "Java","title": "\"Calendars\" and \"DateFormats\" should not be static","description": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data problems or exceptions at runtime.<\/p>\n<p>This rule raises an issue when an instance of <code>Calendar<\/code>, <code>DateFormat<\/code>, <code>javax.xml.xpath.XPath<\/code>, or <code>javax.xml.validation.SchemaFactory<\/code> is marked <code>static<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  \/\/ Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n<\/pre>","severity": "Critical","tags": ["bug","multi-threading"]}]},{"key": "S2912","title": "\"indexOf\" checks should use a start position","tags": ["confusing"],"implementations": [{"key": "squid:S2912","language": "Java","title": "\"indexOf\" checks should use a start position","description": "<p>\n  One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers,\n  and the proper choice of <code>indexOf<\/code> methods can help move code from confusing to clear.\n<\/p>\n\n<p>\n  If you need to see whether a substring is located beyond a certain point in a string,\n  you can test the <code>indexOf<\/code> the substring versus the target point, or you can use the version of <code>indexOf<\/code>\n  which takes a starting point argument. The latter is arguably clearer because the result is tested against -1,\n  which is an easily recognizable \"not found\" indicator.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") > 2) { \/\/ Noncompliant\n\/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) > -1) {\n\/\/ ...\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S2924","title": "JUnit rules should be used","tags": ["junit","unused"],"implementations": [{"key": "squid:S2924","language": "Java","title": "JUnit rules should be used","description": "<p>\n  While some <code>TestRule<\/code> classes have the desired effect without ever being directly referenced by a test,\n  several others do no, and there's no reason to leave them cluttering up the file if they're not in use.\n<\/p>\n<p>\n  This rule raises an issue when <code>Test<\/code> class fields of the following types aren't used by any\n  of the test methods: <code>TemporaryFolder<\/code>, and <code>TestName<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  \/\/ Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n<\/pre>","severity": "Major","tags": ["junit","unused"]}]},{"key": "S2925","title": "\"Thread.sleep\" should not be used in tests","tags": ["bad-practice"],"implementations": [{"key": "squid:S2925","language": "Java","title": "\"Thread.sleep\" should not be used in tests","description": "<p>\n  Using <code>Thread.sleep<\/code> in a test is just generally a bad idea.\n  It creates brittle tests that can fail unpredictably depending on environment (\"Passes on my machine!\") or load.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  \/\/ Noncompliant\n  \/\/ assertions...\n}\n<\/pre>","severity": "Major","tags": ["bad-practice"]}]},{"key": "S2970","title": "Assertions should be complete","tags": ["junit","tests","bug"],"implementations": [{"key": "squid:S2970","language": "Java","title": "Assertions should be complete","description": "<p>\n  It is very easy to write incomplete assertions when using some test frameworks.\n  This rule enforces complete assertions in the following cases:\n<\/p>\n<ul>\n  <li>Fest: <code>assertThat<\/code> is not followed by an assertion invocation<\/li>\n  <li>AssertJ: <code>assertThat<\/code> is not followed by an assertion invocation<\/li>\n  <li>Mockito: <code>verify<\/code> is not followed by a method invocation<\/li>\n<\/ul>\n<p>\n  In such cases, what is intended to be a test doesn't actually verify anything.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ Fest\nboolean result = performAction();\n\/\/ let's now check that result value is true\nassertThat(result); \/\/ Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n\/\/ Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n\/\/ let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); \/\/ Noncompliant; nothing is checked here, oups no call is chained to verify()\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ Fest\nboolean result = performAction();\n\/\/ let's now check that result value is true\nassertThat(result).isTrue();\n\n\/\/ Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n\/\/ let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.<\/p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); \/\/ No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n<\/pre>","severity": "Critical","tags": ["bug","junit","tests"]}]},{"key": "S2975","title": "\"clone\" should not be overridden","tags": ["suspicious"],"implementations": [{"key": "squid:S2975","language": "Java","title": "\"clone\" should not be overridden","description": "<p>\n  Many consider <code>clone<\/code> and <code>Cloneable<\/code> broken in Java,\n  largely because the rules for overriding <code>clone<\/code> are tricky and difficult to get right, according to Joshua Bloch:\n<\/p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\"\n  It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors.\n  There have been lots of bugs over the years, both in and outside Sun,\n  stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object,\n  you have a shallow copy of the object.  The clone generally shares state with the object being cloned.\n  If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n<\/blockquote>\n<p>\n  A copy constructor or copy factory should be used instead.\n<\/p>\n<p>\n  This rule raises an issue when <code>clone<\/code> is overridden,\n  whether or not <code>Cloneable<\/code> is implemented.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class MyClass {\n  \/\/ ...\n\n  public Object clone() { \/\/ Noncompliant\n    \/\/...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class MyClass {\n  \/\/ ...\n\n  MyClass (MyClass source) {\n    \/\/...\n  }\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"http:\/\/www.artima.com\/intv\/bloch13.html\">Copy Constructor versus Cloning<\/a><\/li>\n<\/ul>\n\n<h3>See Also<\/h3>\n<ul>\n  <li>S2157 - \"Cloneables\" should implement \"clone\"<\/li>\n  <li>S1182 - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"<\/li>\n<\/ul>","severity": "Major","tags": ["suspicious"]}]},{"key": "S2976","title": "\"File.createTempFile\" should not be used to create a directory","tags": ["security","owasp-a9"],"implementations": [{"key": "squid:S2976","language": "Java","title": "\"File.createTempFile\" should not be used to create a directory","description": "<p>\n  Using <code>File.createTempFile<\/code> as the first step in creating a temporary directory causes a race condition\n  and is inherently unreliable and insecure. Instead, <code>Files.createTempDirectory<\/code> (Java 7+) or\n  a library function such as Guava's similarly-named <code>Files.createTempDir<\/code> should be used.\n<\/p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:<\/p>\n<ul>\n  <li>call to <code>File.createTempFile<\/code><\/li>\n  <li>delete resulting file<\/li>\n  <li>call <code>mkdir<\/code> on the File object<\/li>\n<\/ul>\n\n<p>\n  <strong>Note<\/strong> that this rule is automatically disabled when the project's <code>sonar.java.source<\/code> is lower than <code>7<\/code>.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li><a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWAPS Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities<\/a><\/li>\n<\/ul>","severity": "Critical","tags": ["owasp-a9","security"]}]},{"key": "S2990","title": "The global \"this\" object should not be used","tags": ["pitfall"],"implementations": [{"key": "javascript:S2990","language": "JavaScript","title": "The global \"this\" object should not be used","description": "<p>\n  When the keyword <code>this<\/code> is used outside of an object, it refers to the global <code>this<\/code> object,\n  which is the same thing as the <code>window<\/code> object in a standard web page. Clearly, such a misdirected usage\n  could have unintended consequences, as well as being confusing to maintainers. Instead, simply drop the <code>this<\/code>;\n  it will have the same effect.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nthis.foo = 1;   \/\/ Noncompliant\nconsole.log(this.foo); \/\/ Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; \/\/ Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { \/\/ Compliant\n    \/\/ ...\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    \/\/ ...\n  }\n}\n<\/pre>","severity": "Critical","tags": ["pitfall"]}]},{"key": "S2999","title": "\"new\" operators should be used with functions","tags": ["bug"],"implementations": [{"key": "javascript:S2999","language": "JavaScript","title": "\"new\" operators should be used with functions","description": "<p>\n  The <code>new<\/code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a <code>TypeError<\/code> because there won't be a constructor function for the <code>new<\/code> keyword to invoke.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    \/\/ Noncompliant;\nvar obj2 = new MyClass();    \/\/ Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/**\n * @constructor\n *\/\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  \/\/ Compliant\nvar obj2 = new MyClass();  \/\/ Compliant regardless of considerJSDoc value\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S3001","title": "\"delete\" should be used only with object properties","tags": ["bug"],"implementations": [{"key": "javascript:S3001","language": "JavaScript","title": "\"delete\" should be used only with object properties","description": "<p>The semantics of the <code>delete<\/code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass anything else to it, and you may or may not get the desired result.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x  = 1;\ndelete x;       \/\/ Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S3002","title": "Unary operators \"+\" and \"-\" should not be used with objects","tags": ["bug"],"implementations": [{"key": "javascript:S3002","language": "JavaScript","title": "Unary operators \"+\" and \"-\" should not be used with objects","description": "<p>\n  The unary operators <code>+<\/code> and <code>-<\/code> can be used to convert some value types to numeric values.\n  But not every value can be converted to a <code>Number<\/code> type: use it with an object, and result will be always <code>NaN<\/code> (Not A Number).\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj);    \/\/ Noncompliant\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo);    \/\/ Noncompliant\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj.x);\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo());\n\nvar str = '42';\ndoSomethingWithNumber(+str);\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>Unary <code>+<\/code> and <code>-<\/code> can be used with objects corresponding to primitive types.<\/p>\n\n<pre>\nvar b = new Boolean(true);\ndoSomethingWithNumber(-b);  \/\/ Compliant\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S3003","title": "Comparison operators should not be used with strings","tags": ["suspicious"],"implementations": [{"key": "javascript:S3003","language": "JavaScript","title": "Comparison operators should not be used with strings","description": "<p>The use of comparison operators (<code>&lt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>, <code>&gt;<\/code>) with strings is not likely to yield the expected results. Instead, try converting at least one operand to the <code>number<\/code> type.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (appleNumber &lt; orangeNumber) {  \/\/ Noncompliant, this condition is true\n  alert(\"There are more oranges\");\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (Number(appleNumber) &lt; Number(orangeNumber)) {\n  alert(\"There are more oranges\");\n}\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S3008","title": "Static non-final field names should comply with a naming convention","tags": ["convention"],"implementations": [{"key": "squid:S3008","language": "Java","title": "Static non-final field names should comply with a naming convention","description": "<p>Shared naming conventions allow teams to  collaborate efficiently. This rule checks that static non-final field names match a provided regular expression.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$<\/code>:<\/p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "S3281","title": "Default EJB interceptors should be declared in \"ejb-jar.xml\"","tags": ["bug"],"implementations": [{"key": "squid:S3281","language": "Java","title": "Default EJB interceptors should be declared in \"ejb-jar.xml\"","description": "<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml<\/code> file, or they will not be treated as default. <\/p>\n<p>This rule applies to projects that contain JEE Beans  (any one of <code>javax.ejb.Singleton<\/code>, <code>MessageDriven<\/code>, <code>Stateless<\/code> or <code>Stateful<\/code>).<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;\/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;\/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;\/interceptor-binding&gt;\n&lt;\/assembly-descriptor&gt;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;\/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;\/interceptor-class&gt;\n   &lt;\/interceptor-binding&gt;\n&lt;\/assembly-descriptor&gt;\n<\/pre>","severity": "Major","tags": ["bug"]}]},{"key": "S3346","title": "\"assert\" should only be used with boolean variables","tags": ["suspicious"],"implementations": [{"key": "squid:S3346","language": "Java","title": "\"assert\" should only be used with boolean variables","description": "<p>Since <code>assert<\/code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their execution the evaluation of any logic required for correct program function.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nassert myList.remove(myList.get(0));  \/\/ Noncompliant\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S3355","title": "Web applications should use validation filters","tags": ["owasp-a1","security","injection"],"implementations": [{"key": "squid:S3355","language": "Java","title": "Web applications should use validation filters","description": "<p>Specifying a validation filter for all input in your <code>web.xml<\/code> allows you to scrub all your HTTP parameters in one central place. To do so, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml<\/code>.<\/p>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  \/\/ ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n<\/pre>\n<p>and<\/p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;\/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;\/filter-class&gt;\n  &lt;\/filter&gt;\n       \n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;\/filter-name&gt;\n     &lt;url-pattern&gt;\/*&lt;\/url-pattern&gt;\n  &lt;\/filter-mapping&gt;\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n<li> <a href=\"https:\/\/www.owasp.org\/index.php\/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1<\/a> - Injection\n<\/li><li> <a href=\"https:\/\/www.owasp.org\/index.php\/How_to_add_validation_logic_to_HttpServletRequest\">OWASP, How to add validation logic to HttpServletRequest<\/a>\n<\/li><\/ul>","severity": "Critical","tags": ["injection","owasp-a1","security"]}]},{"key": "S3398","title": "\"private\" methods called only by inner classes should be moved to those classes","tags": ["confusing"],"implementations": [{"key": "squid:S3398","language": "Java","title": "\"private\" methods called only by inner classes should be moved to those classes","description": "<p>When a <code>private<\/code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same access to the outer class' members, but the outer class will be clearer and less cluttered.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  \/\/ Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "S3400","title": "Methods should not return constants","tags": ["confusing"],"implementations": [{"key": "squid:S3400","language": "Java","title": "Methods should not return constants","description": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method into thinking that something more is done. Declare a constant instead.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\npublic int getBestNumber() {\nreturn 12;  \/\/ Noncompliant\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\npublic static int bestNumber = 12;\n<\/pre>\n\n\n<h2>Exceptions<\/h2>\n<p><code>@Override<\/code> methods are ignored by this rule, since they may be required by an interface or needed to replace the value returned by a parent class.<\/p>","severity": "Major","tags": ["confusing"]}]},{"key": "S3402","title": "Strings and non-strings should not be added","tags": ["suspicious"],"implementations": [{"key": "javascript:S3402","language": "JavaScript","title": "Strings and non-strings should not be added","description": "<p>Use a <code>+<\/code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. Very often that's not what's intended, and even when it is, it's likely to confuse future maintainers. <\/p>\n<p>Since this may not be what's intended, this rule raises an issue when <code>+<\/code> is used with a string and a non-string.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = '42';\nvar b = 5;\nvar sum = a + b;          \/\/ Noncompliant; yields string \"425\"\n\nvar foo = ' is a lucky number';\nalert(42 + foo);          \/\/ Noncompliant; make your intention explicit\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = '42';\nvar b = 5;\nvar sum = parseInt(a) + b; \/\/ Compliant; yields 47\n\nvar foo = ' is a lucky number';\nalert('' + 42 + foo);     \/\/ Use an empty string literal\nalert(`${42}${foo}`);     \/\/ Use template strings; available since ES2015\n<\/pre>","severity": "Major","tags": ["suspicious"]}]},{"key": "S3403","title": "The identity operator (\"===\") should not be used with dissimilar types","tags": ["bug"],"implementations": [{"key": "javascript:S3403","language": "JavaScript","title": "The identity operator (\"===\") should not be used with dissimilar types","description": "<p>Comparing dissimilar types using the identity operator (<code>===<\/code>) will always return <code>false<\/code> because no type conversion is done before the comparison. Thus, such comparisons can only be bugs.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  \/\/ Noncompliant; always false\n  \/\/ ...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  \/\/ ...\n}\n<\/pre>\n<p>or<\/p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  \/\/ ...\n}\n<\/pre>","severity": "Critical","tags": ["bug"]}]},{"key": "S3421","title": "Deprecated \"${pom}\" properties should not be used","tags": ["maven","obsolete"],"implementations": [{"key": "squid:S3421","language": "Java","title": "Deprecated \"${pom}\" properties should not be used","description": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.<\/p>\n<p>This rule raises an issue when <code>${pom.*}<\/code> properties are used in a pom.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;\/finalName&gt;  &lt;!-- Noncompliant --&gt;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;\/finalName&gt;\n<\/pre>\n<p>or<\/p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;\/finalName&gt;\n<\/pre>","severity": "Major","tags": ["maven","obsolete"]}]},{"key": "S3422","title": "Dependencies should not have \"system\" scope","tags": ["maven","lock-in"],"implementations": [{"key": "squid:S3422","language": "Java","title": "Dependencies should not have \"system\" scope","description": "<p><code>system<\/code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that's not configured just like yours is, your code won't work. <\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;\/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;\/artifactId&gt;\n  &lt;version&gt;2.0&lt;\/version&gt;\n  &lt;scope&gt;system&lt;\/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;\/usr\/bin\/lib\/rt.jar&lt;\/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;\/dependency&gt;\n<\/pre>","severity": "Major","tags": ["lock-in","maven"]}]},{"key": "S3438","title": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"","tags": ["spring","bug"],"implementations": [{"key": "squid:S3438","language": "Java","title": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"","description": "<p>Use of a Spring <code>SingleConnectionFactory<\/code> without enabling the <code>reconnectOnException<\/code> setting will prevent automatic connection recovery when the connection goes bad. <\/p>\n<p>That's because the <code>reconnectOnException<\/code> property defaults to <code>false<\/code>. As a result, even if the code that uses this connection factory (Spring's <code>DefaultMessageListenerContainer<\/code> or your own code) has reconnect logic, that code won't work because the <code>SingleConnectionFactory<\/code> will act like a single-connection pool by preventing connection <code>close<\/code> calls from actually closing anything. As a result, subsequent factory <code>create<\/code> operations will just hand back the original broken <code>Connection<\/code>.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n &lt;\/bean&gt;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n &lt;\/bean&gt;\n<\/pre>\n<p>or<\/p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" \/&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;\/value&gt;&lt;\/property&gt;\n &lt;\/bean&gt;\n<\/pre>","severity": "Critical","tags": ["bug","spring"]}]},{"key": "S881","title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","tags": ["misra","cert"],"implementations": [{"key": "php:S881","language": "PHP","title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","description": "<p>\n  The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n<\/p>\n  <ul>\n    <li>It can significantly impair the readability of the code.<\/li>\n    <li>It introduces additional side effects into a statement, with the potential for undefined behavior.<\/li>\n    <li>It is safer to use these operators in isolation from any other arithmetic operators.<\/li>\n  <\/ul>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ \/ 4;\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<p>The following sequence is clearer and therefore safer:<\/p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar \/ 4;\n$bar++;\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions.<\/li>\n  <li>MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.<\/li>\n  <li>MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression.<\/li>\n  <li>MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit<\/li>\n  <li>MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that cause by the increment or decrement operator<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/c\/EXP30-C.+Do+not+depend+on+the+order+of+evaluation+for+side+effects\">CERT, EXP30-C<\/a> - Do not depend on the order of evaluation for side effects<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/cplusplus\/EXP50-CPP.+Do+not+depend+on+the+order+of+evaluation+for+side+effects\">CERT, EXP30-CPP<\/a> - Do not depend on order of evaluation between sequence points<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/EXP05-J.+Do+not+follow+a+write+by+a+subsequent+write+or+read+of+the+same+object+within+an+expression\">CERT, EXP05-J<\/a> - Do not follow a write by a subsequent write or read of the same object within an expression<\/li>\n<\/ul>","severity": "Major","tags": ["cert","misra"]}]},{"key": "S888","title": "Relational operators should be used in \"for\" loop termination conditions","tags": ["cwe","bug","misra","cert"],"implementations": [{"key": "squid:S888","language": "Java","title": "Relational operators should be used in \"for\" loop termination conditions","description": "<p>Testing <code>for<\/code> loop termination using an equality operator (<code>==<\/code> and <code>!=<\/code>) is dangerous, because it could set up an infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfor (int i = 1; i != 10; i += 2)  \/\/ Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  \/\/...\n} \n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  \/\/ Compliant\n{\n  \/\/...\n} \n<\/pre>\n<h2>Exceptions<\/h2>\n\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:<\/p>\n<ul>\n<li> starts below the ending value and is incremented by 1 on each iteration.<\/li>\n<li> starts above the ending value and is decremented by 1 on each iteration.<\/li>\n<\/ul>\n<p>Equality operators are also ignored when the test is against <code>null<\/code>.<\/p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  \/\/ ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  \/\/ ...\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C++:2008, 6-5-2<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/835\">MITRE, CWE-835<\/a> - Loop with Unreachable Exit Condition ('Infinite Loop')<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/EwDJAQ\">CERT, MSC21-C<\/a> - Use robust loop termination conditions<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/GwDJAQ\">CERT, MSC21-CPP<\/a> - Use inequality to terminate a loop whose counter changes by more than one<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert","cwe","misra"]},{"key": "javascript:S888","language": "JavaScript","title": "Relational operators should be used in \"for\" loop termination conditions","description": "<p>\n  Testing <code>for<\/code> loop termination using an equality operator (<code>==<\/code> and <code>!=<\/code>) is dangerous, because it could set up an infinite loop.\n  Using a relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  \/\/ Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  \/\/...\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor (var i = 1; i <= 10; i += 2)  \/\/ Compliant\n{\n  \/\/...\n}\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>An equality operator may be used if the loop counter is not modified within the body of the loop and either:<\/p>\n<ul>\n  <li>starts below the ending value and is incremented by 1 on each iteration.<\/li>\n  <li>starts above the ending value and is decremented by 1 on each iteration.<\/li>\n<\/ul>\n<p>Equality operators are also ignored when the test is against <code>null<\/code>.<\/p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  \/\/ ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  \/\/ ...\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C++:2008, 6-5-2<\/li>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/835\">MITRE, CWE-835<\/a> - Loop with Unreachable Exit Condition ('Infinite Loop')<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/EwDJAQ\">CERT, MSC21-C<\/a> - Use robust loop termination conditions<\/li>\n  <li><a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/GwDJAQ\">CERT, MSC21-CPP<\/a> - Use inequality to terminate a loop whose counter changes by more than one<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cert","cwe","misra"]}]},{"key": "S905","title": "Non-empty statements should have at least one side-effect","tags": ["cwe","bug","misra","unused"],"implementations": [{"key": "javascript:S905","language": "JavaScript","title": "Non-empty statements should have at least one side-effect","description": "<p>An expression statement without side effects, such as a comparison without assigning its result to a variable, is useless, and must have been a mistake on the developer's part.<\/p>\n\n<h2>Noncompliant code example<\/h2>\n\n<pre>\nvar str = \"long string split on multiple lines but\" \/\/ without concatenation operator, statement implicitly ends at the linebreak\n  \" the concatenation operator + is missing\";  \/\/ Noncompliant\n\na == 1;   \/\/ Noncompliant; was assignment intended?\n<\/pre>\n\n<h2>See<\/h2>\n<ul><li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning<\/li><\/ul>","severity": "Critical","tags": ["bug","cwe","unused"]},{"key": "php:S905","language": "PHP","title": "Non-empty statements should change control flow or have at least one side-effect","description": "<p>\n  Any statement (other than a null statement, which means a statement containing only a semicolon <code>;<\/code>)\n  which has no side effect and does not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.\n<\/p>\n\n<h1>Noncompliant Code Example<\/h1>\n\n<pre>\n$a == 1; \/\/ Noncompliant; was assignment intended?\n$a < $b; \/\/ Noncompliant; have we forgotten to assign the result to a variable?\n<\/pre>\n\n\n<h1>See<\/h1>\n\n<ul>\n  <li><a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/482\">MITRE, CWE-482<\/a> - Comparing instead of Assigning<\/li>\n<\/ul>","severity": "Critical","tags": ["bug","cwe","misra","unused"]}]},{"key": "S907","title": "\"goto\" statement should not be used","tags": ["brain-overload","misra"],"implementations": [{"key": "php:S907","language": "PHP","title": "\"goto\" statement should not be used","description": "<p>\n  <code>goto<\/code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as <code>if<\/code>, <code>for<\/code>, <code>while<\/code>, <code>continue<\/code> or <code>break<\/code> should be used instead.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i < 10){\n    goto loop;\n  }\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfor ($i = 0; $i < 10; $i++){\n  echo(\"i = $i\");\n}\n<\/pre>\n\n<h2>See<\/h2>\n<ul>\n  <li>MISRA C:2004, 14.4 - The goto statement shall not be used.<\/li>\n  <li>MISRA C:2012, 15.1 - The goto statement should not be used<\/li>\n<\/ul>","severity": "Major","tags": ["brain-overload","misra"]}]},{"key": "S930","title": "Function calls should not pass extra arguments","tags": ["cwe","bug","misra"],"implementations": [{"key": "javascript:S930","language": "JavaScript","title": "Function calls should not pass extra arguments","description": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function execution.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); \/\/ Noncompliant; last argument is not used\n<\/pre>\n\n<h2>Exceptions<\/h2>\n<p>No issue is reported when <code>arguments<\/code> is used in the body of the function being called.<\/p>\n\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) \/\/ Compliant\n<\/pre>","severity": "Critical","tags": ["bug","cwe","misra"]}]},{"key": "Semicolon","title": "Each statement should end with a semicolon","tags": ["convention"],"implementations": [{"key": "javascript:Semicolon","language": "JavaScript","title": "Each statement should end with a semicolon","description": "<p>In JavaScript, the semicolon (<code>;<\/code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfunction fun() {\n  return  \/\/ Noncompliant. ';' implicitly inserted at end of line\n       5   \/\/ Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  \/\/ prints \"undefined\", not \"5\"\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "StrictMode","title": "\"strict\" mode should be used with caution","tags": ["cross-browser","user-experience"],"implementations": [{"key": "javascript:StrictMode","language": "JavaScript","title": "\"strict\" mode should be used with caution","description": "<p>\n  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfunction strict() {\n  'use strict';\n}\n<\/pre>","severity": "Info","tags": ["cross-browser","user-experience"]}]},{"key": "SwitchLastCaseIsDefaultCheck","title": "\"switch\" statements should end with a \"default\" clause","tags": ["cwe","misra","cert"],"implementations": [{"key": "squid:SwitchLastCaseIsDefaultCheck","language": "Java","title": "\"switch\" statements should end with a \"default\" clause","description": "<p>The requirement for a final <code>default<\/code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken.<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nswitch (param) {  \/\/missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.<\/li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause<\/li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause<\/li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n<li> MISRA C:2012, 16.4 - Every <em>switch<\/em> statement shall have a <em>default<\/em> label<\/li>\n<li> MISRA C:2012, 16.5 - A <em>default<\/em> label shall appear as either the first or the last <em>switch label<\/em> of a <em>switch<\/em> statement<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C<\/a> - Strive for logical completeness<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP<\/a> - Strive for logical completeness<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra"]}]},{"key": "SwitchWithoutDefault","title": "\"switch\" statements should end with a \"default\" clause","tags": ["cwe","misra","cert"],"implementations": [{"key": "javascript:SwitchWithoutDefault","language": "JavaScript","title": "\"switch\" statements should end with a \"default\" clause","description": "<p>\nThe requirement for a final <code>default<\/code> clause is defensive programming.\nThe clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nswitch (param) {  \/\/missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: \/\/ default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch<\/em> syntax shall be used.<\/li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause<\/li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.<\/li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause<\/li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed<\/li>\n<li> MISRA C:2012, 16.4 - Every <em>switch<\/em> statement shall have a <em>default<\/em> label<\/li>\n<li> MISRA C:2012, 16.5 - A <em>default<\/em> label shall appear as either the first or the last <em>switch label<\/em> of a <em>switch<\/em> statement<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/478.html\">MITRE, CWE-478<\/a> - Missing Default Case in Switch Statement<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/YgE\">CERT, MSC01-C<\/a> - Strive for logical completeness<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/JoIyAQ\">CERT, MSC01-CPP<\/a> - Strive for logical completeness<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra"]}]},{"key": "TabCharacter","title": "Tabulation characters should not be used","tags": ["convention"],"implementations": [{"key": "javascript:TabCharacter","language": "JavaScript","title": "Tabulation characters should not be used","description": "<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.\n<\/p>","severity": "Minor","tags": ["convention"]}]},{"key": "TooManyBreakOrContinueInLoop","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","tags": ["brain-overload"],"implementations": [{"key": "javascript:TooManyBreakOrContinueInLoop","language": "JavaScript","title": "Loops should not contain more than a single \"break\" or \"continue\" statement","description": "<p>\n  Restricting the number of <code>break<\/code> and <code>continue<\/code> statements in a loop is done in the interest of good structured programming.\n<\/p>\n\n<p>\n  One <code>break<\/code> and <code>continue<\/code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n<\/p>\n\n<h2>Noncompiant Code Example<\/h2>\n<pre>\nfor (var i = 1; i <= 10; i++) {  \/\/ Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert(\"i = \" + i);\n}\n<\/pre>","severity": "Major","tags": ["brain-overload"]}]},{"key": "TrailingComma","title": "Trailing commas should not be used","tags": ["cross-browser"],"implementations": [{"key": "javascript:TrailingComma","language": "JavaScript","title": "Trailing commas should not be used","description": "<p>\n  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer, which in most versions throws a meaningless error. Therefore trailing commas should be eliminated.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    \/\/ Noncompliant - trailing comma\n};\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n<\/pre>","severity": "Blocker","tags": ["cross-browser"]}]},{"key": "TrailingComment","title": "Comments should not be located at the end of lines of code","tags": ["convention"],"implementations": [{"key": "javascript:TrailingComment","language": "JavaScript","title": "Comments should not be located at the end of lines of code","description": "<p>This rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable,\ntrailing comments would have to be properly written and formatted (correct alignment,\nno interference with the visual structure of the code, not too long to be visible) but most often,\nautomatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar a1 = b + c; \/\/ This is a trailing comment that can be very very long\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\n\/\/ This very long comment is better placed before the line of code\nvar a2 = b + c;\n<\/pre>\n\n<h2>Exceptions<\/h2>\n\n<p>By default, the property \"legalTrailingCommentPattern\" allows to ignore comments containing only one word :<\/p>\n<pre>\ndoSomething(); \/\/FIXME\n<\/pre>","severity": "Info","tags": ["convention"]}]},{"key": "TrailingWhitespace","title": "Lines should not end with trailing whitespaces","tags": ["convention"],"implementations": [{"key": "javascript:TrailingWhitespace","language": "JavaScript","title": "Lines should not end with trailing whitespaces","description": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.<\/p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. <\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\n\/\/ The following string will error if there is a whitespace after '\\'\nvar str = \"Hello \\\nWorld\";\n<\/pre>","severity": "Minor","tags": ["convention"]}]},{"key": "UnreachableCode","title": "Jump statements should not be followed by other statements","tags": ["cwe","misra","cert","unused"],"implementations": [{"key": "javascript:UnreachableCode","language": "JavaScript","title": "Jump statements should not be followed by other statements","description": "<p>Jump statements (<code>return<\/code>, <code>break<\/code> and <code>continue<\/code>) and <code>throw<\/code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw<\/code> are simply wasted keystrokes lying in wait to confuse the unwary. <\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nfun(a) {\n  var i = 10;\n  return i + a;       \/\/ Noncompliant \n  i++;             \/\/ this is never executed\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nint fun(int a) {\n  int i = 10;\n  return i + a;\n}\n<\/pre>\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-9 - There shall be no dead code<\/li>\n<li> MISRA C:2012, 2.2 - There shall be no dead code<\/li>\n<li> <a href=\"http:\/\/cwe.mitre.org\/data\/definitions\/561.html\">MITRE, CWE-561<\/a> - Dead Code<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/NYA5\">CERT, MSC12-C<\/a> - Detect and remove code that has no effect or is never executed<\/li>\n<li> <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/x\/SIIyAQ\">CERT, MSC12-CPP<\/a> - Detect and remove code that has no effect<\/li>\n<\/ul>","severity": "Major","tags": ["cert","cwe","misra","unused"]}]},{"key": "UnusedFunctionArgument","title": "Unused function parameters should be removed","tags": ["misra","unused"],"implementations": [{"key": "javascript:UnusedFunctionArgument","language": "JavaScript","title": "Unused function parameters should be removed","description": "<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction doSomething(a, b) { \/\/ \"a\" is unused\n  return compute(b);\n}\n<\/pre>\n\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n<\/pre>\n\n\n\n<h2>Exceptions<\/h2>\n<p>\n  When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\n  For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:\n<\/p>\n<pre>\n$([\"first\", \"last\"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n<\/pre>\n<p>\n  So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function signature.\n  Unused arguments which are followed by an argument that _is_ used will be ignored.\n<\/p>\n<p>\n  Examples :\n<\/p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  \/\/unused p2 is not reported but p4 is\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  \/\/unused p1, p2 and p3 are not reported\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  \/\/unused p1 is not reported but p3 and p4 are\n                                              return p2; }\n<\/pre>\n<p>\n  Further, when <code>arguments<\/code> is used in the function body, no parameter is reported as unused.\n<\/p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n<\/pre>\n\n<h2>See<\/h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11<\/li>\n<li> MISRA C:2012, 2.7<\/li>\n<\/ul>","severity": "Major","tags": ["misra","unused"]}]},{"key": "UnusedPrivateMethod","title": "Unused private method should be removed","tags": ["unused"],"implementations": [{"key": "squid:UnusedPrivateMethod","language": "Java","title": "Unused private method should be removed","description": "<p>Private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     \/\/Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  \/\/Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  \/\/Compliant, relates to the java serialization mechanism\n}\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     \/\/Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  \/\/Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  \/\/Compliant, relates to the java serialization mechanism\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "UnusedVariable","title": "Unused local variables should be removed","tags": ["unused"],"implementations": [{"key": "javascript:UnusedVariable","language": "JavaScript","title": "Unused local variables should be removed","description": "<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   \/\/ seconds is never used\n  return hours * 60;\n}\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n<\/pre>","severity": "Major","tags": ["unused"]}]},{"key": "UselessImportCheck","title": "Useless imports should be removed","tags": ["unused"],"implementations": [{"key": "squid:UselessImportCheck","language": "Java","title": "Useless imports should be removed","description": "<p>\nThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\nUnused and useless imports should not occur if that is the case.\nLeaving them in reduces the code's readability, since their presence can be confusing.\n<\/p>\n\n<p>The following code snippet illustrates this rule:<\/p>\n\n<pre>\npackage my.company;\n\nimport java.lang.String;        \/\/ Noncompliant - java.lang classes are always implicitly imported\nimport my.company.SomeClass;    \/\/ Noncompliant - same package files are always implicitly imported\nimport java.io.File;            \/\/ Noncompliant - File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    \/\/ Noncompliant - 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n<\/pre>","severity": "Minor","tags": ["unused"]}]},{"key": "UselessParenthesesCheck","title": "Useless parentheses around expressions should be removed to prevent any misunderstanding","tags": ["confusing"],"implementations": [{"key": "squid:UselessParenthesesCheck","language": "Java","title": "Useless parentheses around expressions should be removed to prevent any misunderstanding","description": "<p>\nUseless parentheses can sometimes be misleading and so should be removed.\n<\/p>\n\n<p>\nThe following code snippet illustrates this rule:\n<\/p>\n\n<pre>\nreturn 3;             \/\/ Compliant\nreturn (x);           \/\/ Noncompliant\nreturn (x + 1);       \/\/ Noncompliant\nint x = (y \/ 2 + 1);  \/\/ Noncompliant\nint y = (4+X) * y;    \/\/ Compliant\n<\/pre>","severity": "Major","tags": ["confusing"]}]},{"key": "VariableDeclarationAfterUsage","title": "Variables should be declared before they are used","tags": ["pitfall"],"implementations": [{"key": "javascript:VariableDeclarationAfterUsage","language": "JavaScript","title": "Variables should be declared before they are used","description": "<p>One of the biggest sources of confusion for JavaScript beginners is scoping. The reason scoping is so confusing in JavaScript is because JavaScript looks like a C-family language but doesn't act like one. C-family languages have block-level scope, meaning that when control enters a block, such as an <code>if<\/code> statement, new variables can be declared within that scope without affecting the outer scope. However, this is not the case in JavaScript.<\/p>\n<p>To minimize confusion as much as possible, variables should always be declared before they are used.<\/p>\n<h2>Noncompliant Code Example<\/h2>\n\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); \/\/ Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; \/\/ Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); \/\/ Unexpectedly alerts \"undefined\" instead of \"1\"\n<\/pre>\n<h2>Compliant Solution<\/h2>\n\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); \/\/ Print \"1\"\n<\/pre>","severity": "Major","tags": ["pitfall"]}]},{"key": "WithStatement","title": "\"with\" statements should not be used","tags": ["bug"],"implementations": [{"key": "javascript:WithStatement","language": "JavaScript","title": "\"with\" statements should not be used","description": "<p>\n  The use of the <code>with<\/code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against <code>with<\/code>.\n<\/p>\n<p>\n  Using <code>with<\/code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with<\/code> to access some property not already set in the object,\n  and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with<\/code> are entirely\n  dependent on the object passed to it, <code>with<\/code> can be dangerously unpredictable, and should never be used.\n<\/p>\n\n<h2>Noncompliant Code Example<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  \/\/ Noncompliant\n  y = 4;  \/\/ updates foo.x\n  x = 3;  \/\/ does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); \/\/ shows: undefined 3\n<\/pre>\n\n<h2>Compliant Solution<\/h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); \/\/ shows: 3 a\n<\/pre>","severity": "Major","tags": ["bug"]}]}]}